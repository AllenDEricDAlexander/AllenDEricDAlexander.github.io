<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringBoot-JackSon</title>
    <link href="/2025/08/04/Jackson/"/>
    <url>/2025/08/04/Jackson/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>SpringBoot-JackSon 使用指南</code>。<br>其中包括了关于我的见解和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><ul><li>环境</li><li>JDK 17</li><li>IDEA</li><li>Maven 3</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">mvn</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- POM模块引入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2023.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 项目模块引入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 在Spring Boot项目中，通常不需要手动导入Jackson的依赖，因为spring-boot-starter-web已经包含了这些依赖。但如果你需要单独引入，可以在pom.xml文件中添加以下依赖 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- Jackson核心库 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>lasted-version<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvn</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>Jackson 是一个广泛使用的开源类库，用于处理 JSON 和 XML 数据的格式化。它在日常开发中非常流行，尤其是在 Spring MVC 框架中，默认的<br>JSON 解析器就是 Jackson。</p><p>除了 Jackson，还有一些常见的 JSON 解析器，比如 Jsonlib、Gson 和 fastjson 等。然而，Jackson 在处理大型 JSON<br>文件时，凭借其较快的处理速度、较低的内存占用以及出色的性能，显现出了明显的优势。它还提供了灵活的 API，便于扩展和定制。</p><p>总之，Jackson 是一款非常强大的处理 JSON 和 XML 格式的开源类库，非常适合开发中使用。它在 Spring Boot 项目中也是默认的 JSON<br>处理库，主要用于对象与 JSON 之间的序列化和反序列化。接下来，将详细介绍在 Spring Boot 中如何使用<br>Jackson，包括基本配置、注解使用、自定义序列化器与反序列化器以及如何处理复杂数据类型等内容。</p><p><strong>Jackson 核心模块</strong></p><ul><li><p>jackson-core：核心包，它提供基于”流模式”解析的相关 API，它包括JsonPaser和JsonGenerator。Jackson 内部实现正是通过高性能的流模式<br>API 的 JsonGenerator 和 JsonParser 来生成和解析 json。</p></li><li><p>jackson-annotations：注解包，提供标准注解功能。</p></li><li><p>jackson-databind：数据绑定包， 提供基于”对象绑定” 解析的相关 API （ ObjectMapper ） 和”树模型” 解析的相关 API<br>（JsonNode）；基于”对象绑定” 解析的 API 和”树模型”解析的 API 依赖基于”流模式”解析的 API</p></li></ul><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p>Jackson、Gson、Fastjson 是三个最常用的 JSON 库。它们各有优缺点，性能和使用场景也有所不同。下面我们从性能、功能、易用性和安全性等方面进行详细对比。</p><table><thead><tr><th>库名称</th><th>序列化性能</th><th>反序列化性能</th><th>内存占用</th><th>描述</th></tr></thead><tbody><tr><td>Jackson</td><td>高</td><td>高</td><td>低</td><td>性能最优，适合高并发场景。支持流式 API（JsonParser 和 JsonGenerator），适合处理大文件。多格式支持如  JSON&#x2F;XML&#x2F;YAML&#x2F;CSV。  学习曲线陡峭（配置复杂）。</td></tr><tr><td>Fastjson</td><td>极高</td><td>高</td><td>极低</td><td>性能较好，但存在安全隐患，新版本可用。但 历史上多次曝出反序列化漏洞。 Fastjson 1.x：已停止维护，存在反序列化RCE等严重漏洞。Fastjson2：重构版本，修复安全问题并提升性能（性能较1.x提升20%+）</td></tr><tr><td>Gson</td><td>中</td><td>中</td><td>高</td><td>性能中等，适合简单场景，适合新手，学习难度平缓，API简洁。</td></tr></tbody></table><ul><li>Jackson的流式API 在处理GB级JSON时内存占用仅为Gson的1&#x2F;3；</li><li>Gson的宽松映射 允许字段名不匹配、无参构造器缺失，容错性最佳。</li><li>Fastjson2的Path查询 支持类XPath语法，可直接提取嵌套字段（如JSONPath.eval(json, “$.user.address”)）；</li><li>序列化场景：Fastjson2 &gt; Jackson &gt; Gson</li><li>反序列化场景：Fastjson2 ≈ Jackson &gt; Gson</li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>通过yaml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">jackson:</span><br>    <span class="hljs-comment"># 设置日期格式</span><br>    <span class="hljs-attr">date-format:</span> <span class="hljs-string">yyyy-MM-dd</span> <span class="hljs-string">HH:mm:ss</span><br>    <span class="hljs-comment"># 设置时区</span><br>    <span class="hljs-attr">time-zone:</span> <span class="hljs-string">Asia/Shanghai</span><br>    <span class="hljs-comment"># 设置默认属性包含方式，例如非空</span><br>    <span class="hljs-attr">default-property-inclusion:</span> <span class="hljs-string">non_null</span><br>    <span class="hljs-attr">serialization:</span><br>      <span class="hljs-comment"># 设置序列化时是否格式化输出</span><br>      <span class="hljs-attr">indent-output:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">deserialization:</span><br>      <span class="hljs-comment"># 设置反序列化时是否忽略未知属性</span><br>      <span class="hljs-attr">fail-on-unknown-properties:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">parser:</span><br>      <span class="hljs-comment"># 设置解析器是否允许未转义的控制字符</span><br>      <span class="hljs-attr">allow-unquoted-control-chars:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 设置解析器是否允许单引号</span><br>      <span class="hljs-attr">allow-single-quotes:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>自定义配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.TimeZone;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JacksonConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-keyword">public</span> ObjectMapper <span class="hljs-title function_">objectMapper</span><span class="hljs-params">(Jackson2ObjectMapperBuilder builder)</span> &#123;<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> builder.build();<br><br>        <span class="hljs-comment">// 设置日期格式</span><br>        objectMapper.setDateFormat(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br><br>        <span class="hljs-comment">// 设置时区</span><br>        objectMapper.setTimeZone(TimeZone.getTimeZone(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>));<br><br>        <span class="hljs-comment">// 设置序列化时是否格式化输出</span><br>        objectMapper.configure(SerializationFeature.INDENT_OUTPUT, <span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">// 设置反序列化时是否忽略未知属性</span><br>        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="hljs-literal">false</span>);<br><br>        <span class="hljs-comment">// 设置解析器是否允许未转义的控制字符</span><br>        objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, <span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">// 设置解析器是否允许单引号</span><br>        objectMapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, <span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">// 添加Java 8时间模块支持</span><br>        objectMapper.registerModule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaTimeModule</span>());<br><br>        <span class="hljs-keyword">return</span> objectMapper;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ul><li>@JsonIgnore：忽略字段的序列化和反序列化。</li><li>@JsonProperty：指定字段的JSON键名。</li><li>@JsonCreator：此注解用于构造方法，和 @JsonProperty 配合使用，适用有参数的构造方法。</li><li>@JsonFormat：指定日期格式。</li><li>@JsonInclude：控制字段的序列化条件。</li><li>@JsonView：控制视图。</li><li>@JsonAlias：为反序列化期间要接受的属性定义一个或多个替代名称。</li><li>@JsonPropertyOrder：指定字段的序列化顺序。</li><li>@JsonRawValue：将字段值作为原始JSON字符串处理。</li><li>@JsonAnyGetter和@JsonAnySetter：处理动态属性。</li><li>@JsonValue 自动适配枚举</li><li>@JsonIdentityInfo注解来避免无限递归</li><li>@JsonTypeInfo和@JsonSubTypes注解来处理多态类型</li></ul><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span> <span class="hljs-comment">// 忽略值为null的属性</span><br><span class="hljs-meta">@JsonPropertyOrder(&#123;&quot;name&quot;, &quot;age&quot;, &quot;email&quot;&#125;)</span> <span class="hljs-comment">// 控制属性的序列化顺序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-meta">@JsonProperty(&quot;user_name&quot;)</span> <span class="hljs-comment">// 设置属性的JSON名称</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-meta">@JsonIgnore</span> <span class="hljs-comment">// 忽略此属性的序列化和反序列化</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;Asia/Shanghai&quot;)</span> <span class="hljs-comment">// 设置日期格式和时区</span><br>    <span class="hljs-keyword">private</span> Date createdDate;<br><br>    <span class="hljs-meta">@JsonProperty(&quot;user_email&quot;)</span> <span class="hljs-comment">// 设置属性的JSON名称</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span> <span class="hljs-comment">// 控制字段的序列化条件</span><br>    <span class="hljs-keyword">private</span> String email;<br>    <br>    <span class="hljs-meta">@JsonRawValue</span> <span class="hljs-comment">// 将字段值作为原始JSON字符串处理</span><br>    <span class="hljs-keyword">private</span> String rawJson;<br>    <br>    <span class="hljs-keyword">private</span> CategoryEnum category;<br>    <br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; additionalProperties;<br>    <br>    <span class="hljs-meta">@JsonAnyGetter</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">any</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> additionalProperties;<br>    &#125;<br>    <br>    <span class="hljs-meta">@JsonAnySetter</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String name, Object value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (additionalProperties == <span class="hljs-literal">null</span>) &#123;<br>            additionalProperties = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        &#125;<br>        additionalProperties.put(name, value);<br>    &#125;<br><br>    <span class="hljs-comment">// 其他构造函数、getter和setter省略</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">CategoryEnum</span> &#123;<br><br>    WEB(<span class="hljs-string">&quot;Web&quot;</span>, <span class="hljs-number">1</span>),<br>    APP(<span class="hljs-string">&quot;App&quot;</span>, <span class="hljs-number">2</span>),<br>    EMAIL(<span class="hljs-string">&quot;Email&quot;</span>, <span class="hljs-number">3</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String category;<br>    <br>    <span class="hljs-meta">@JsonValue</span> <span class="hljs-comment">// json序列化反序列化的时候自动处理 会自动返回 这个值，接受这个值 自动映射为 枚举</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Integer value;<br><br>    CategoryEnum(String category, Integer value) &#123;<br>        <span class="hljs-built_in">this</span>.category = category;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// 可以通过注入 或者自己 new一个</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ObjectMapper objectMapper;<br><br><span class="hljs-comment">// 序列化</span><br><span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(user);<br><br><span class="hljs-comment">// 反序列化</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> objectMapper.readValue(jsonString, User.class);<br><br><span class="hljs-comment">// 序列化Java对象列表为JSON字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(users);<br>        <br><span class="hljs-comment">// 反序列化JSON字符串为Java对象列表</span><br>List&lt;User&gt; users = objectMapper.readValue(jsonString, objectMapper.getTypeFactory().constructCollectionType(List.class, User.class));<br><br><span class="hljs-comment">// 序列化Map为JSON字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(map);<br><br><span class="hljs-comment">// 反序列化JSON字符串为Map</span><br>Map&lt;String, Object&gt; resultMap = objectMapper.readValue(jsonString, Map.class);<br><br><span class="hljs-comment">// 循环引用</span><br><span class="hljs-meta">@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = &quot;id&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> User friend;<br>&#125;<br><br><span class="hljs-comment">// 多态问题</span><br><span class="hljs-meta">@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = &quot;type&quot;)</span><br><span class="hljs-meta">@JsonSubTypes(&#123;</span><br><span class="hljs-meta">    @JsonSubTypes.Type(value = Dog.class, name = &quot;dog&quot;),</span><br><span class="hljs-meta">    @JsonSubTypes.Type(value = Cat.class, name = &quot;cat&quot;)</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">private</span> String breed;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">private</span> String color;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        <br>        <span class="hljs-comment">// 创建多态对象</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;German Shepherd&quot;</span>);<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;Black&quot;</span>);<br>        <br>        <span class="hljs-comment">// 序列化多态对象为JSON字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonStringDog</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(dog);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonStringCat</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(cat);<br>        System.out.println(<span class="hljs-string">&quot;序列化后的JSON字符串 (Dog): &quot;</span> + jsonStringDog);<br>        System.out.println(<span class="hljs-string">&quot;序列化后的JSON字符串 (Cat): &quot;</span> + jsonStringCat);<br>        <br>        <span class="hljs-comment">// 反序列化JSON字符串为多态对象</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">deserializedDog</span> <span class="hljs-operator">=</span> mapper.readValue(jsonStringDog, Animal.class);<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">deserializedCat</span> <span class="hljs-operator">=</span> mapper.readValue(jsonStringCat, Animal.class);<br>        System.out.println(<span class="hljs-string">&quot;反序列化后的多态对象 (Dog): &quot;</span> + deserializedDog);<br>        System.out.println(<span class="hljs-string">&quot;反序列化后的多态对象 (Cat): &quot;</span> + deserializedCat);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义序列化器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomDateSerializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JsonSerializer</span>&lt;Date&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">dateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Date date, JsonGenerator gen, SerializerProvider provider)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">formattedDate</span> <span class="hljs-operator">=</span> dateFormat.format(date);<br>        gen.writeString(formattedDate);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义反序列化器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomDateDeserializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JsonDeserializer</span>&lt;Date&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">dateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">deserialize</span><span class="hljs-params">(JsonParser p, DeserializationContext ctxt)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> dateFormat.parse(p.getValueAsString());<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用自定义序列化和反序列化器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-meta">@JsonSerialize(using = CustomDateSerializer.class)</span><br>    <span class="hljs-meta">@JsonDeserialize(using = CustomDateDeserializer.class)</span><br>    <span class="hljs-keyword">private</span> Date registerDate;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://juejin.cn/post/7243607462008389669">Spring Boot之Jackson快速入门</a></li><li><a href="https://blog.csdn.net/hjl_and_djj/article/details/143967687">SpringBoot的Jackson使用详解</a></li><li><a href="https://blog.csdn.net/qq_25216471/article/details/145885172">性能分析</a></li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Guava</title>
    <link href="/2025/08/04/guava/"/>
    <url>/2025/08/04/guava/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>Guava</code>。<br>其中包括了关于我的见解和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.bjpowernode.com/tutorial_guava/">动力节点Guava教程</a></li><li><a href="https://wizardforcel.gitbooks.io/guava-tutorial/content/1.html">Guava 官方教程 中文翻译</a></li><li><a href="https://github.com/google/guava/wiki">Guava Wiki</a></li><li><a href="https://www.bilibili.com/video/BV1FJ411D7hE">汪文君的Google Guava</a></li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HomeLab</title>
    <link href="/2025/04/07/home_lab/"/>
    <url>/2025/04/07/home_lab/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>HomeLab，自建服务器</code>。<br>其中包括了关于我的见解和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>在Linux的服务器领域，我们能接触的到硬件其实挺多的，但是在这些硬件我们根据我们的需要去使用的时候，一般会涉及到以下几个概念，IPMI,BIOS,RAID。</p><h2 id="软硬件清单"><a href="#软硬件清单" class="headerlink" title="软硬件清单"></a>软硬件清单</h2><ul><li>dell r730 3.5寸硬盘8盘位</li><li>ikuai路由器</li><li>机柜</li><li>vSphere8</li></ul><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="IPMI"><a href="#IPMI" class="headerlink" title="IPMI"></a>IPMI</h3><p>IPMI（Intelligent Platform Management<br>Interface，智能平台管理接口）是一种标准化的硬件管理接口，旨在提供对服务器系统硬件的远程管理和监控功能。它允许系统管理员通过网络远程管理服务器，即使在操作系统不可用的情况下也能进行管理和监控。</p><p><strong>主要功能和特点：</strong></p><p>远程电源管理：</p><p>IPMI 允许管理员通过网络远程控制服务器的电源状态，包括打开、关闭、重启等操作。即使操作系统崩溃或不可访问，管理员也可以通过<br>IPMI 进行电源控制。</p><p>硬件监控：</p><p>IPMI 提供了对服务器硬件的实时监控能力，如 CPU 温度、风扇转速、电压、电流等各种传感器的数据。这些数据可以帮助管理员进行性能监控、故障诊断和预测性维护。</p><p>远程控制台：</p><p>IPMI 支持远程 KVM（Keyboard-Video-Mouse）控制台，管理员可以通过 IPMI 访问服务器的控制台界面，执行操作系统级别的管理任务，如安装操作系统、修改<br>BIOS 设置等，而无需物理接触服务器。</p><p>事件日志和警报：</p><p>IPMI 能够记录各种系统事件和警报，如硬件故障、温度超标、电源状态变化等，管理员可以实时监视这些事件并采取必要的响应措施。</p><p>远程虚拟媒体：</p><p>IPMI 支持通过网络加载虚拟光盘镜像或者虚拟软盘镜像到服务器中，从而实现远程安装操作系统或者软件。</p><p>组件和接口：<br>基础硬件：IPMI 需要服务器硬件提供支持，包括管理控制器（BMC，Baseboard Management Controller）和传感器。</p><p>网络接口：IPMI 通过以太网接口连接到服务器网络，通常使用独立的管理网络或者共享本地网络。</p><p>安全性：IPMI 支持安全协议和加密通信，确保远程管理过程的安全性和数据保护。</p><p>实际应用场景：<br>数据中心管理：大型数据中心使用 IPMI 可以远程管理和监控成百上千台服务器，降低运维成本和提高服务可靠性。</p><p>远程办公：对于分布在全球不同地区的服务器，IPMI 可以帮助管理员远程进行维护和故障排除，减少物理出差和维修时间。</p><p>高可用性需求：对于需要高可用性的应用和服务，IPMI 提供了及时响应和远程控制的能力，加速故障恢复和维护。</p><p><strong>总结</strong></p><ol><li>IPMI可以理解成为一个独立的微型系统，它存在于主板上。可以通过它来控制硬件及操作系统。</li><li></li></ol><p>一般情况下都有默认的ip，也有部分机型需要通过bios去配置。在知道或者配置好ipmi的ip地址以后，我们能通过网线，同时连接服务器的ipmi接口，和本地网络接口，本地网络接口配置一个和impi同网段的地址，然后就可以通过浏览器直接访问到服务器IPMI地址。</p><ol start="3"><li>一般情况下通过浏览器访问到IPMI（一般都是https协议）然后进行我们需要的操作。比如配置阵列，安装系统等操作。</li><li>第一次使用完成以后，服务器无故障的情况下一般情况下就不会再用到，当服务器故障的时候，可以检查硬件日志分析是否涉及到硬件故障。</li><li>在超大规模的使用的情况下，也可以把所有服务器的ipmi进行统一管理，可以实现一些批量操作。</li></ol><h3 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h3><p>BIOS（Basic Input&#x2F;Output System，基本输入&#x2F;输出系统）是计算机系统中的一种固件，它位于主板上的一个芯片中，主要负责启动计算机和初始化硬件设备，以及提供基本的输入输出功能。</p><p>功能和作用<br>启动计算机：</p><p>BIOS 是计算机系统启动的第一个程序。当你按下电源按钮时，计算机首先执行 BIOS 中存储的启动程序，检查硬件配置，并加载操作系统。</p><p>硬件初始化：</p><p>BIOS 负责初始化计算机的各种硬件设备，例如处理器、内存、硬盘驱动器、显卡、键盘等。它确保这些设备在操作系统加载之前处于正常工作状态。</p><p>提供基本输入输出功能：</p><p>BIOS 提供了基本的输入输出功能，使得计算机可以与外部设备（如键盘、鼠标、显示器）进行交互。这些功能包括键盘输入、屏幕输出以及处理启动时的错误信息和警告。</p><p>系统设置和配置：</p><p>BIOS 中包含系统的基本设置和配置选项，如日期时间、启动设备顺序、硬件设备设置等。用户可以通过 BIOS 设置程序（BIOS<br>Setup）进行配置和调整。</p><p>BIOS Setup：</p><p>BIOS Setup 是一个通过特定的按键（通常是 DEL、F2、F10 等）进入的设置界面，允许用户修改系统设置和配置。在这里可以调整硬件参数、启动顺序、安全设置等。</p><p>固件更新：</p><p>BIOS 可以通过固件更新来修复错误、提高兼容性、增强功能等。更新 BIOS 需要特殊的固件更新工具和步骤，通常通过官方提供的固件文件进行更新。</p><p>系统自检（POST）：</p><p>在启动过程中，BIOS 还负责执行自检程序（POST，Power-On Self-Test），检测系统硬件是否正常工作。如果发现硬件问题，BIOS<br>会显示错误信息或发出声音警告。</p><p>兼容性和互操作性：</p><p>BIOS 为操作系统提供了一个标准化的硬件接口，确保不同厂商的硬件和操作系统能够相互操作。</p><p><strong>发展和替代</strong></p><p>随着技术的发展，BIOS 的传统形式（基于传统的BIOS&#x2F;MBR）逐渐被现代的UEFI（Unified Extensible Firmware<br>Interface，统一可扩展固件接口）所取代。UEFI 提供了比传统 BIOS 更多的功能和灵活性，支持更大的硬盘容量、更快的启动速度、更好的图形界面等特性。</p><p>综上所述，BIOS 是计算机启动和硬件初始化的基础，虽然它的角色在现代计算机中被UEFI逐渐取代，但在许多传统和嵌入式系统中仍然广泛使用。其实现在的BIOS已经基本上都是UEFI的。</p><p><strong>总结</strong></p><ol><li>bios主要的可能就是配置一些硬件支持的相关参数，比如阵列，impi(不绝对）启动顺序，硬件功能开关等。</li><li>bios传统模式是文本操作，uefi可以是图形操作。</li><li>bios只支持键盘，uefi支持鼠标和键盘。</li><li>bios最大支持硬盘到2T，uefi则支持更大（这个和前面讲到的mbr&amp;gpt类似）。</li><li>一般进入bios的方式是系统自检以后按F1,F12等(一般都有提示)。</li></ol><h3 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h3><p>讲RAID之前，我们先思考一个问题，我们如果购买一个盘，这个盘坏了，我们数据丢了怎么办？虽然这个问题在个人领域，普通人可能一辈子也无法遇到。但是在服务器领域，尤其是超大规模，任何小概率事件，都会经常发生。这也是个人理解RAID的来源。</p><p>RAID（Redundant Array of Independent Disks，独立磁盘冗余阵列）是一种数据存储技术，旨在通过将多个硬盘驱动器组合起来，以提高存储系统的性能、容量或可靠性。RAID<br>技术最初由加利福尼亚大学伯克利分校的研究人员提出，并在1980年代初得到推广和发展。</p><p>主要的 RAID 级别</p><p>RAID 0：条带化（Striping）</p><p>将数据块分散存储在多个硬盘上，提高了读写速度和整体性能。</p><p>不提供冗余备份，一台磁盘损坏会导致数据丢失。</p><p>RAID 1：镜像（Mirroring）</p><p>将相同的数据同时写入两个或多个硬盘，提供了数据冗余，增强了数据安全性和可靠性。</p><p>读性能可以优于单个硬盘，但写性能可能有所降低，因为数据要写入多个磁盘。</p><p>RAID 5：带分布式奇偶校验（Striping with Distributed Parity）</p><p>将数据和奇偶校验信息分散存储在多个硬盘上，提供了性能和容错性的平衡。</p><p>可以容忍一块硬盘的故障，同时不会损失数据。最低要求3块硬盘。</p><p>RAID 6：双分布式奇偶校验（Striping with Double Distributed Parity）</p><p>类似 RAID 5，但提供了更高级别的容错能力。</p><p>可以容忍两块硬盘的故障，在大容量硬盘的使用场景中更为常见。</p><p>RAID 10：RAID 1+0（Mirrored Striping）</p><p>将多组 RAID 1 镜像组成 RAID 0 条带化阵列，结合了 RAID 0 的性能和 RAID 1 的数据冗余。</p><p>提供了很高的读写性能和较高的数据保护能力，但需要至少四块硬盘。</p><p>RAID 的优点</p><ul><li>提高性能：通过条带化技术，在多个磁盘上并行读写数据，显著提高了数据访问速度。</li><li>提供冗余：通过镜像或分布式奇偶校验技术，提供了数据的备份和容错能力，一定程度上提高了系统的可靠性和稳定性。</li><li>灵活性：可以根据不同的应用需求选择合适的 RAID 级别，平衡性能、容量和可靠性。</li></ul><p>RAID 的应用场景</p><ul><li>数据库服务器、文件服务器和企业级应用，需要高性能和数据冗余的环境。</li><li>大数据处理和存储，需要高速数据读写和大容量存储的场景。</li><li>要求数据备份和容错能力的关键业务应用，如金融交易系统和医疗数据存储。</li></ul><p>总之，RAID 技术通过不同的实现级别，在性能、容量和可靠性之间找到了平衡点，是现代数据存储系统中常见和重要的技术之一。</p><p><strong>总结</strong></p><ol><li>其实在分布式存储诞生以后，在大规模集群里面RAID应用已经比较少，主要通过软件多副本方式来保证的高可靠性。并且由于Kubernetes的应用，对单机的可靠性要求也大大降低。</li><li>在部分采用的RAID的业务里面，主要也是以系统盘为主。</li><li>RAID的配置有的需要通过bios来完成，也有的可以通过ipmi来完成。</li><li>目前在市面上的NAS产品，包括个人和企业在很大程度上也是依靠RAID来保证高可用的。</li><li>RAID是分硬件和软件两种的，下一章我们再讲讲具体的</li></ol><h4 id="RAID阵列"><a href="#RAID阵列" class="headerlink" title="RAID阵列"></a>RAID阵列</h4><p>在一般的品牌服务器里面基本上都有一个叫阵列卡的硬件，硬盘先连接到阵列卡上面，然后阵列卡再连接到主板上。</p><p>根据需要对磁盘做阵列以后，暴露给主板或者说操作系统，如果是4块盘，做了RAID5以后，组合成一个盘，对于操作系统而言，看到的就是只有一个盘，但是如果我们从IPMI可以看到4个物理盘组成了一个逻辑盘。并且一般情况下，这些磁盘都是可以在服务器上直接热插拔的。即便有的硬盘坏了，也可以直接拔下来，然后重新换上一个新的硬盘，RAID卡会自动识别并正常加入到RAID中，这个时候操作系统是无法感知到这一切的。</p><p>数据需要经过操作系统通过阵列卡，再到磁盘，这个中间是有一个时间差值的，对于阵列卡部分型号是会带一个独立的电池的，也就是对于操作系统而言，数据已经落盘了，但是这个落盘，还在阵列卡里面，还没有写到真正的磁盘里面，如果这个时候系统断电或者崩溃，由于有电池存在，这个数据会存储在阵列卡里面，等待系统恢复的时候在写入到磁盘里面，从而可以提高可靠性。</p><p>当然如果是自己DIY的服务器或者是没有阵列卡的设备上，要体验或者要使用RAID功能也是没问题，因为Linux是可以从软件层面来实现。当然在测试环境，我们没有真正的硬件，是无法模拟出来的阵列的情况，所以就通过Linux软件来模拟阵列情况（虽然在实际运维中，可能不会用到，但是把他当成知识扩展以及理解阵列还是可以的）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">这台服务器，准备了2块多余的磁盘，sdb和sdc，我们使用他来模拟一个RAID1.</span><br>[root@localhost ~]# lsblk<br>NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda               8:0    0   20G  0 disk <br>├─sda1            8:1    0    1G  0 part /boot<br>└─sda2            8:2    0   19G  0 part <br>  ├─centos-root 253:0    0   17G  0 lvm  /<br>  └─centos-swap 253:1    0    2G  0 lvm  <br>sdb               8:16   0   20G  0 disk <br>sdc               8:32   0   20G  0 disk <br>sr0              11:0    1  973M  0 rom<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装软件</span><br>yum -y install mdadm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建阵列</span><br>mdadm --create /dev/md0 --level=1 --raid-devices=2 /dev/sdb /dev/sdc --metadata=0.90<br><span class="hljs-meta prompt_"># </span><span class="language-bash">/dev/md0 是设备的名字，可根据需要自己定义</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--level=1 是阵列的级别</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--metadata=0.90 主要是兼容性问题</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看阵列</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可以看到2个磁盘组成了一个阵列磁盘</span><br>[root@localhost ~]# lsblk<br>NAME            MAJ:MIN RM  SIZE RO TYPE  MOUNTPOINT<br>sda               8:0    0   20G  0 disk  <br>├─sda1            8:1    0    1G  0 part  /boot<br>└─sda2            8:2    0   19G  0 part  <br>  ├─centos-root 253:0    0   17G  0 lvm   /<br>  └─centos-swap 253:1    0    2G  0 lvm   <br>sdb               8:16   0   20G  0 disk  <br>└─md0             9:0    0   20G  0 raid1 <br>sdc               8:32   0   20G  0 disk  <br>└─md0             9:0    0   20G  0 raid1<br><br>[root@localhost ~]# ll /dev/md0 <br>brw-rw---- 1 root disk 9, 0 7月  19 22:19 /dev/md0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">这个时候我们就有了个20g由阵列提供的磁盘空间，下面的操作就和前面磁盘操作部分一样（创建分区，格式化，挂载等），当然这里只演示了一个简单的RAID阵列，具体更多功能可以自己探索</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建分区</span><br>[root@localhost ~]# fdisk /dev/md0 <br>欢迎使用 fdisk (util-linux 2.23.2)。<br><br>更改将停留在内存中，直到您决定将更改写入磁盘。<br>使用写入命令前请三思。<br><br>Device does not contain a recognized partition table<br>使用磁盘标识符 0x92791e84 创建新的 DOS 磁盘标签。<br><br>命令(输入 m 获取帮助)：<br>命令(输入 m 获取帮助)：m<br>命令操作<br>   a   toggle a bootable flag<br>   b   edit bsd disklabel<br>   c   toggle the dos compatibility flag<br>   d   delete a partition<br>   g   create a new empty GPT partition table<br>   G   create an IRIX (SGI) partition table<br>   l   list known partition types<br>   m   print this menu<br>   n   add a new partition<br>   o   create a new empty DOS partition table<br>   p   print the partition table<br>   q   quit without saving changes<br>   s   create a new empty Sun disklabel<br>   t   change a partition&#x27;s system id<br>   u   change display/entry units<br>   v   verify the partition table<br>   w   write table to disk and exit<br>   x   extra functionality (experts only)<br><br>命令(输入 m 获取帮助)：n<br>Partition type:<br>   p   primary (0 primary, 0 extended, 4 free)<br>   e   extended<br>Select (default p): <br>Using default response p<br>分区号 (1-4，默认 1)：<br>起始 扇区 (2048-41942911，默认为 2048)：<br>将使用默认值 2048<br>Last 扇区, +扇区 or +size&#123;K,M,G&#125; (2048-41942911，默认为 41942911)：<br>将使用默认值 41942911<br>分区 1 已设置为 Linux 类型，大小设为 20 GiB<br><br>命令(输入 m 获取帮助)：w<br>The partition table has been altered!<br><br>Calling ioctl() to re-read partition table.<br>正在同步磁盘。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">格式化</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">分区名字可以通过lsblk或者直接看/dev里面的设备名字来获取</span><br>[root@localhost ~]# mkfs.ext4 /dev/md0p1 <br>mke2fs 1.42.9 (28-Dec-2013)<br>文件系统标签=<br>OS type: Linux<br>块大小=4096 (log=2)<br>分块大小=4096 (log=2)<br>Stride=0 blocks, Stripe width=0 blocks<br>1310720 inodes, 5242608 blocks<br>262130 blocks (5.00%) reserved for the super user<br>第一个数据块=0<br>Maximum filesystem blocks=2153775104<br>160 block groups<br>32768 blocks per group, 32768 fragments per group<br>8192 inodes per group<br>Superblock backups stored on blocks: <br>    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, <br>    4096000<br><br>Allocating group tables: 完成                            <br>正在写入inode表: 完成                            <br>Creating journal (32768 blocks): 完成<br>Writing superblocks and filesystem accounting information: 完成<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">挂载</span><br>[root@localhost ~]# mkdir /mnt/raid<br>[root@localhost ~]# mount /dev/md0p1 /mnt/raid<br>[root@localhost ~]# df -h<br>文件系统                 容量  已用  可用 已用% 挂载点<br>devtmpfs                 475M     0  475M    0% /dev<br>tmpfs                    487M     0  487M    0% /dev/shm<br>tmpfs                    487M  7.7M  479M    2% /run<br>tmpfs                    487M     0  487M    0% /sys/fs/cgroup<br>/dev/mapper/centos-root   17G  2.1G   15G   12% /<br>/dev/sda1               1014M  138M  877M   14% /boot<br>tmpfs                     98M     0   98M    0% /run/user/0<br>/dev/md0p1                20G   45M   19G    1% /mnt/raid<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查raid状态</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">两个磁盘组成的RAID是正常的</span><br>[root@localhost ~]# mdadm --detail /dev/md0  <br>/dev/md0:<br>           Version : 0.90<br>     Creation Time : Fri Jul 19 22:19:27 2024<br>        Raid Level : raid1<br>        Array Size : 20971456 (20.00 GiB 21.47 GB)<br>     Used Dev Size : 20971456 (20.00 GiB 21.47 GB)<br>      Raid Devices : 2<br>     Total Devices : 2<br>   Preferred Minor : 0<br>       Persistence : Superblock is persistent<br><br>       Update Time : Fri Jul 19 22:28:19 2024<br>             State : clean <br>    Active Devices : 2<br>   Working Devices : 2<br>    Failed Devices : 0<br>     Spare Devices : 0<br><br>Consistency Policy : resync<br><br>              UUID : 0794079f:4ce9add0:bfe78010:bc810f04 (local to host localhost.localdomain)<br>            Events : 0.18<br><br>    Number   Major   Minor   RaidDevice State<br>       0       8       16        0      active sync   /dev/sdb<br>       1       8       32        1      active sync   /dev/sdc<br>       <br><span class="hljs-meta prompt_"># </span><span class="language-bash">模拟下磁盘故障，掉盘</span><br>[root@localhost ~]# mdadm --detail /dev/md0  <br>/dev/md0:<br>           Version : 0.90<br>     Creation Time : Fri Jul 19 22:19:27 2024<br>        Raid Level : raid1<br>        Array Size : 20971456 (20.00 GiB 21.47 GB)<br>     Used Dev Size : 20971456 (20.00 GiB 21.47 GB)<br>      Raid Devices : 2<br>     Total Devices : 1<br>   Preferred Minor : 0<br>       Persistence : Superblock is persistent<br><br>       Update Time : Fri Jul 19 22:31:55 2024<br>             State : clean, degraded <br>    Active Devices : 1<br>   Working Devices : 1<br>    Failed Devices : 0<br>     Spare Devices : 0<br><br>Consistency Policy : resync<br><br>              UUID : 0794079f:4ce9add0:bfe78010:bc810f04 (local to host localhost.localdomain)<br>            Events : 0.18<br><br>    Number   Major   Minor   RaidDevice State<br>       -       0        0        0      removed<br>       1       8       16        1      active sync   /dev/sdb<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 可以看到，已经有块盘离线了</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 下面我们继续挂载，然后向里面写数据，都是ok的，体现了raid的1高可用性。</span></span><br><br>[root@localhost ~]# mount /dev/md0p1 /mnt/raid<br>[root@localhost ~]# cd /mnt/raid<br>[root@localhost raid]# touch abcd<br>[root@localhost raid]# ll<br>总用量 16<br>-rw-r--r-- 1 root root     0 7月  19 22:34 abcd<br>drwx------ 2 root root 16384 7月  19 22:24 lost+found<br>[root@localhost raid]#       <br></code></pre></td></tr></table></figure><p><strong>总结</strong></p><ol><li>了解阵列原理及实现方式，在实际运维中还是很有用处的。</li><li>软件阵列如果坏了，还是比较难修的，作为理解阵列倒是没啥问题的。</li></ol><h3 id="DDNS"><a href="#DDNS" class="headerlink" title="DDNS"></a>DDNS</h3><p>我采用的方案是ikuai路由器和阿里云域名</p><p><a href="https://blog.csdn.net/s1608818981/article/details/141324152">参考链接</a></p><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p><a href="https://blog.csdn.net/Hum0rp/article/details/143038401">dell服务器安装esxi参考教程</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.dell.com/support/kbdoc/zh-cn/000137343/%E5%90%84%E4%B8%AA%E4%BB%A3%E7%B3%BB%E7%9A%84%E6%88%B4%E5%B0%94-poweredge-%E6%9C%8D%E5%8A%A1%E5%99%A8">Dell服务器列表</a></li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>house</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>杂谈</tag>
      
      <tag>house</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>demo</title>
    <link href="/2025/04/01/demo/"/>
    <url>/2025/04/01/demo/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>博客模板备份</code>。<br>其中包括了关于我的见解和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="chapter-1"><a href="#chapter-1" class="headerlink" title="chapter 1"></a>chapter 1</h3><h3 id="chapter-2"><a href="#chapter-2" class="headerlink" title="chapter 2"></a>chapter 2</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>分布式小技巧</title>
    <link href="/2025/04/01/distributed_trick/"/>
    <url>/2025/04/01/distributed_trick/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>分布式小技巧</code>。<br>其中包括了关于我的见解和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="一致性Hash问题"><a href="#一致性Hash问题" class="headerlink" title="一致性Hash问题"></a>一致性Hash问题</h3><p>hash问题</p><ul><li>雪崩效应：微小的改变，散列后不可区分性的改变</li><li>严格雪崩准则</li></ul><p>hash冲突解决</p><ul><li>开放寻址</li><li>拉链法</li></ul><p>分布式场景hash的价值</p><ul><li>负载均衡</li><li>分布式存储</li></ul><p>普通hash算法的问题：当一个节点宕机后，之前的hash都要重新计算，缩容和扩容都会有这种问题，用户的会话都会丢失，大量请求的情况下，大量的用户体验不佳</p><p>一致性Hash</p><ul><li>hash槽成环，每个服务器负责一段</li><li>虚拟节点，每个服务器负责多个虚拟节点</li></ul><p><strong>nginx一致性hash</strong></p><ul><li><a href="https://github.com/replay/ngx_http_consistent_hash">https://github.com/replay/ngx_http_consistent_hash</a></li><li>下载第三方模块</li><li>编译第三方模块，添加到被nginx管理</li><li>nginx重新编译安装</li><li>修改配置文件</li></ul><h3 id="集群时钟同步问题"><a href="#集群时钟同步问题" class="headerlink" title="集群时钟同步问题"></a>集群时钟同步问题</h3><h3 id="分布式ID"><a href="#分布式ID" class="headerlink" title="分布式ID"></a>分布式ID</h3><h3 id="分布式任务调度"><a href="#分布式任务调度" class="headerlink" title="分布式任务调度"></a>分布式任务调度</h3><h3 id="Session共享"><a href="#Session共享" class="headerlink" title="Session共享"></a>Session共享</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java常见bugs</title>
    <link href="/2025/03/31/java_bugs/"/>
    <url>/2025/03/31/java_bugs/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>java常见bug及避免方法的介绍</code>。<br>其中包括了关于我的见解和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="NPE-场景"><a href="#NPE-场景" class="headerlink" title="NPE 场景"></a>NPE 场景</h3><ol><li>调用了空对象的实例方法</li><li>访问空对象的属性</li><li>数组为空的时候，取长度</li><li>不能抛出空异常对象</li><li>方法的返回值是null，调用方法直接使用</li><li>自动拆箱导致NPE<ul><li>空包装对象赋值给基本数据类型时</li><li>方法传参时</li><li>空对象进行比较大小</li></ul></li></ol><p><strong>避免方法</strong></p><ul><li>使用之前初始化</li><li>避免返回null</li><li>外部传值，一定要及时判断</li><li>基本数据类型优于包装类型，优先使用基本数据类型</li><li>不确定的包装类型，先校验后使用</li><li>对于Null值的包装类型，赋值为0</li></ul><p><strong>字符串、数组、集合场景</strong></p><ul><li>null字符串调用equals方法</li><li>对象数组new出来，但元素没有初始化</li><li>list的addAll方法，传递null</li></ul><p><strong>Optional</strong></p><ul><li>不能作为类字段使用，没有实现序列化接口</li><li>容器类，代表存在和不存在</li><li>orElse(new Object()) 存在返回，空提供默认值</li><li>orElseGet() 存在返回，空由函数去产生 &#x2F;&#x2F; 配合单例</li><li>orElseThrow 存在返回，空抛出异常</li><li>ifPresent 存在处理</li><li>map 执行操作后返回一个optional对象</li></ul><p><strong>正确处理异常</strong></p><ul><li>使用异常，而不是返回码(或类似)，因为异常会更加的详细</li><li>主动捕获检查性异常，并对异常信息进行反馈(日志或标记)</li><li>保持代码整洁，一个方法中不要有多个 try catch 或者嵌套的 try catch</li><li>捕获更加具体的异常，而不是通用的 Exception</li><li>合理的设计自定义的异常类</li></ul><p><strong>常见异常</strong></p><ul><li>并发修改：可迭代对象在遍历的同时做修改，则会报并发修改异常</li><li>类型转换：类型转换不符合 Java 的继承关系，则会报类型转换异常</li><li>枚举查找：枚举在查找时，如果枚举值不存在，不会返回空，而是直接抛出异常</li></ul><p><strong>资源管理</strong></p><p>try-with-resources</p><h3 id="java计算、接口、集合"><a href="#java计算、接口、集合" class="headerlink" title="java计算、接口、集合"></a>java计算、接口、集合</h3><p><strong>BigDecimal精度问题</strong></p><ul><li>初始化设置精度需要匹配<ul><li>bigDecimal.setScale(2) 可大不能小</li><li>bigDecimal.setScale(2,BigDecimal.ROUND_HALF_UP)</li></ul></li><li>除法结果需要精度</li><li>数值比较需要精度匹配</li></ul><p><strong>日期</strong></p><p>SimpleDataFormat</p><ul><li>可以解析大于或等于它定义的时间精度，但不能解析小于它定义的精度</li><li>线程不安全，多线程会抛出异常<ul><li>原因：内部有一个calendar</li><li>解决方法：定义为局部变量、使用ThreadLoacl、Synchronize</li></ul></li></ul><p><strong>迭代问题</strong></p><ul><li>for-each优于for</li></ul><p><strong>集合判等问题</strong></p><ul><li>equals和hashcode与其可能带来的潜在问题</li><li>类实现了 compareTo 方法，就需要实现 equals 方法</li><li>compareTo 与 equals 的实现过程需要同步</li></ul><p><strong>Lombok</strong></p><ul><li>@EqualsAndHashCode(callSuper&#x3D;true)</li><li>命名问题</li></ul><p><strong>抽象类和接口</strong></p><p>抽象类、接口的含义和特性</p><ul><li>抽象类是子类的通用特性，包含了属性和行为;接口是定义行为，并不关心谁去实现</li><li>抽象类是对类本质的抽象，表达的是 is a 的关系;接口是对行为的抽象，表达的是like a 的关系</li></ul><p>抽象类、接口的相同点</p><ul><li>接口中的方法(java8 改变了这一语法)和抽象类中的抽象方法都不能有方法体，并且必须在子类中实现</li><li>都可以被继承，但是不能被实例化</li></ul><p>抽象类、接口的不同点</p><ul><li>使用时语法不同，抽象类使用 extends，接口则使用implements</li><li>接口中只能定义常量，所以，不能表达对象状态，而抽象类可以</li><li>接口中的方法必须是 public类型的，而抽象类则没有限制</li><li>类可以同时实现多个接口(间接解决了 Java 不支持多继承的we难题)，但是只能继承一个抽象类</li></ul><p>默认方法与静态方法</p><p><strong>lambda与函数式接口</strong></p><p><strong>Stream和lambda真的高效吗</strong></p><p>迭代过多可能会导致计算低效</p><p><strong>序列化</strong></p><ul><li>父类不可序列化，子类实现了序列化接口也不行<ul><li>需要提供父类的默认无参构造器</li></ul></li><li>类中存在引用对象<ul><li>所有属性都是可序列化的才可以序列化</li></ul></li><li>同一个对象多次序列化，直接有更新<ul><li>不会重复序列化，会影响结果</li></ul></li></ul><p><strong>泛型</strong></p><p>玩转泛型的前提是理解泛型擦除。</p><p>泛型的特性</p><ul><li>先检查再编译</li><li>泛型不支持继承</li><li>泛型的类型变量不能是基本类型</li><li>泛型的类型参数只能是类类型，不能是简单类型</li></ul><p>使用原始类型，可能会带来灾难性后果 <code>不声明泛型类型</code>。主要是为了兼容旧代码。</p><p><strong>反射</strong></p><ul><li>应用场景<ul><li>开发通用框架</li><li>动态代理</li><li>注解</li><li>可扩展性功能</li></ul></li><li>缺点<ul><li>性能开销</li><li>破坏封装性</li><li>内部曝光</li></ul></li></ul><p>什么情况下反射获取不到Method</p><ul><li>当方法是基本类型时，反射获取 Method 的参数类型也必须一致</li><li>如果调用的方法属于当前对象的父类，那么 getDetlaredMethod 获取不到Method</li></ul><p><strong>字符串</strong></p><p>可以看我的<code>Java日志</code>和<code>Java·奇技淫巧</code>这两篇文章，有关于字符串拼接的讨论。</p><p><strong>深拷贝与浅拷贝</strong></p><p>Object类的clone()是浅拷贝</p><p><strong>synchronized</strong></p><ul><li>不会被继承，子类需要重新指定</li><li>标记位置：方法声明、方法体</li><li>JDK实现：对象头标记，字节码标记 monitor</li><li>JDK优化：偏向锁-轻量级锁-重量级锁</li></ul><p><strong>多线程原子更新变量值</strong></p><ul><li>countDownLatch</li><li>Atomic系列</li></ul><p><strong>阻塞队列</strong></p><p><strong>copy-on-write容器</strong></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux性能优化</title>
    <link href="/2025/03/13/linux_tuning/"/>
    <url>/2025/03/13/linux_tuning/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>Linux性能优化</code>。<br>其中包括了关于我的见解和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>性能优化指标是什么？</p><p>当看到性能指标时，你会首先想到什么呢?我相信“高并发”和“响应快”一定是最先出现在你脑海里的两个词，而它们也正对应着性能优化的两个核心指标“吞吐”和“延时”。这两个指标是从应用负载的视角来考察性能，直接影响了产品终端的用户体验。跟它们对应的是从系统资源的视角出发的指标，比如资源使用率、饱和度等。</p><p>随着应用负载的增加，系统资源的使用也会升高，甚至达到极限。而性能问题的本质，就是系统资源已经达到瓶颈，但请求的处理却还不够快，无法支撑更多的请求。</p><p>性能分析，其实就是找出应用或系统的瓶颈，并设法去避免或者缓解它们，从而更高效地利用系统资源处理更多的请求。这包含了一系列的步骤，比如下面这六个步骤。</p><ul><li>选择指标评估应用程序和系统的性能，</li><li>为应用程序和系统设置性能目标;</li><li>进行性能基准测试;</li><li>性能分析定位瓶颈，</li><li>优化系统和应用程序</li><li>性能监控和告警。</li></ul><p>前置基础</p><ul><li>Linux基本了解</li><li>熟悉Linux命令、软件安装</li><li>熟悉编程开发、shell语言</li></ul><p>目标：建立整体系统性能的全局观</p><ul><li>理解最基本的几个系统知识原理;</li><li>掌握必要的性能工具;</li><li>通过实际的场景演练，贯穿不同的组件，</li></ul><p><a href="http://www.brendangregg.com/Perf/linux_perf_tools_full.png">linux 性能工具图</a></p><p>核心内容</p><ul><li>CPU</li><li>内存</li><li>网络</li><li>磁盘IO</li><li>性能测试</li><li>性能监控</li><li>架构设计</li><li>应用程序</li><li>Linux内核</li><li>文件系统</li></ul><p>如何学习</p><ul><li>先把书读薄，再读厚，再读薄</li><li>边学边实践</li><li>勤思考，多反思，善总结，多问为什么</li></ul><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="到底应该怎么理解“平均负载”"><a href="#到底应该怎么理解“平均负载”" class="headerlink" title="到底应该怎么理解“平均负载”"></a>到底应该怎么理解“平均负载”</h3><h4 id="平均负载"><a href="#平均负载" class="headerlink" title="平均负载"></a>平均负载</h4><p>每次发现系统变慢时，我们通常做的第一件事，就是执行top或者uptime命令，来了解系统的负载情况。比如像下面这样，我在命令行里输入了uptime命令，系统也随即给出了结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">uptime</span></span><br>02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88<br><span class="hljs-meta prompt_"># </span><span class="language-bash">当前时间  系统运行时间  当前登录用户数 平均负载：1分钟、5分钟、15分钟</span><br></code></pre></td></tr></table></figure><p>简单来说，平均负载是指单位时间内，系统处于 可运行状态 和 不可中断状态 的平均进程数，也就是 平均活跃进程数，它和CPU使用率并没有直接关系。</p><p>Load Average &#x3D; (运行队列中的进程数量) &#x2F; 系统的CPU数量。</p><p>可运行状态的进程，是指正在使用CPU或者正在等待CPU的进程，也就是我们常用ps命令看到的，处于R状态（Running 或 Runnable）的进程。</p><p>不可中断状态的进程则是正处于内核态关键流程中的进程，并且这些流程是不可打断的，比如最常见的是等待硬件设备的I&#x2F;O响应，也就是我们在ps命令中看到的D状态（Uninterruptible<br>Sleep，也称为Disk Sleep）的进程。</p><p>比如，当一个进程向磁盘读写数据时，为了保证数据的一致性，在得到磁盘回复前，它是不能被其他进程或者中断打断的，这个时候的进程就处于不可中断状态。如果此时的进程被打断了，就容易出现磁盘数据与进程数据不一致的问题。</p><p>所以，不可中断状态实际上是系统对进程和硬件设备的一种保护机制。</p><p>可以简单理解为，平均负载其实就是平均活跃进程数。平均活跃进程数，直观上的理解就是单位时间内的活跃进程数，但它实际上是活跃进程数的指数衰减平均值。</p><p>既然平均的是活跃进程数，那么最理想的，就是每个CPU上都刚好运行着一个进程，这样每个CPU都得到了充分利用。比如当平均负载为2时，意味着什么呢？</p><p>在只有2个CPU的系统上，意味着所有的CPU都刚好被完全占用。</p><p>在4个CPU的系统上，意味着CPU有50%的空闲。</p><p>而在只有1个CPU的系统中，则意味着有一半的进程竞争不到CPU。</p><p><strong>平均负载为多少时合理？</strong></p><p>平均负载最理想的情况是等于 CPU个数。所以在评判平均负载时， 首先你要知道系统有几个 CPU，这可以通过 top 命令或者从文件<br>&#x2F;proc&#x2F;cpuinfo 中读取，比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">关于grep和<span class="hljs-built_in">wc</span>的用法请查询它们的手册或者网络搜索</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">grep &amp;apos;model name&amp;apos; /proc/cpuinfo | <span class="hljs-built_in">wc</span> -l</span><br>2<br></code></pre></td></tr></table></figure><p>有了CPU 个数，我们就可以判断出，当平均负载比 CPU 个数还大的时候，系统已经出现了过载。</p><p>不过，且慢，新的问题又来了。我们在例子中可以看到，平均负载有三个数值，到底该参考哪一个呢？</p><p>实际上，都要看。三个不同时间间隔的平均值，其实给我们提供了，分析 系统负载趋势 的数据来源，让我们能更全面、更立体地理解目前的负载状况。</p><p>如果1分钟、5分钟、15分钟的三个值基本相同，或者相差不大，那就说明系统负载很平稳。</p><p>但如果1分钟的值远小于15 分钟的值，就说明系统最近1分钟的负载在减少，而过去15分钟内却有很大的负载。</p><p>反过来，如果1分钟的值远大于 15<br>分钟的值，就说明最近1分钟的负载在增加，这种增加有可能只是临时性的，也有可能还会持续增加下去，所以就需要持续观察。一旦1分钟的平均负载接近或超过了CPU的个数，就意味着系统正在发生过载的问题，这时就得分析调查是哪里导致的问题，并要想办法优化了。</p><p>那么，在实际生产环境中，平均负载多高时，需要我们重点关注呢？</p><p>在我看来， 当平均负载高于 CPU 数量70%的时候，你就应该分析排查负载高的问题了。一旦负载过高，就可能导致进程响应变慢，进而影响服务的正常功能。</p><p>但70%这个数字并不是绝对的，最推荐的方法，还是把系统的平均负载监控起来，然后根据更多的历史数据，判断负载的变化趋势。当发现负载有明显升高趋势时，比如说负载翻倍了，你再去做分析和调查。</p><h4 id="平均负载与CPU使用率"><a href="#平均负载与CPU使用率" class="headerlink" title="平均负载与CPU使用率"></a>平均负载与CPU使用率</h4><p>平均负载是指单位时间内，处于可运行状态和不可中断状态的进程数。所以，它不仅包括了 正在使用 CPU 的进程，还包括 等待 CPU 和 等待<br>I&#x2F;O 的进程。</p><p>而 CPU 使用率，是单位时间内 CPU 繁忙情况的统计，跟平均负载并不一定完全对应。比如：</p><ul><li>CPU 密集型进程，使用大量 CPU 会导致平均负载升高，此时这两者是一致的；</li><li>I&#x2F;O 密集型进程，等待 I&#x2F;O 也会导致平均负载升高，但 CPU 使用率不一定很高；</li><li>大量等待 CPU 的进程调度也会导致平均负载升高，此时的CPU使用率也会比较高。</li></ul><h4 id="案例1-Cpu密集"><a href="#案例1-Cpu密集" class="headerlink" title="案例1 Cpu密集"></a>案例1 Cpu密集</h4><p>先用 uptime 命令，看一下测试前的平均负载情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">uptime</span></span><br>...,  load average: 0.11, 0.15, 0.09<br></code></pre></td></tr></table></figure><p>首先，我们在第一个终端运行 stress 命令，模拟一个 CPU 使用率 100% 的场景：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">$ stress</span> <span class="hljs-literal">--</span><span class="hljs-comment">cpu 1</span> <span class="hljs-literal">--</span><span class="hljs-comment">timeout 600</span><br> <br></code></pre></td></tr></table></figure><p>接着，在第二个终端运行uptime查看平均负载的变化情况：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># -d 参数表示高亮显示变化的区域</span><br>$ watch -d uptime<br>...,  <span class="hljs-built_in">load</span> <span class="hljs-built_in">average</span>: <span class="hljs-number">1.00</span>, <span class="hljs-number">0.75</span>, <span class="hljs-number">0.39</span><br></code></pre></td></tr></table></figure><p>最后，在第三个终端运行mpstat查看 CPU 使用率的变化情况：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># -P ALL 表示监控所有CPU，后面数字5表示间隔5秒后输出一组数据</span><br>$ mpstat -P ALL <span class="hljs-number">5</span><br>Linux <span class="hljs-number">4.15</span>.<span class="hljs-number">0</span> (ubuntu) 09/<span class="hljs-number">22</span>/<span class="hljs-number">18</span> _x86_64<span class="hljs-number">_</span> (<span class="hljs-number">2</span> CPU)<br><span class="hljs-number">13</span>:<span class="hljs-number">30</span>:<span class="hljs-number">06</span>     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle<br><span class="hljs-number">13</span>:<span class="hljs-number">30</span>:<span class="hljs-number">11</span>     all   <span class="hljs-number">50.05</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">49.95</span><br><span class="hljs-number">13</span>:<span class="hljs-number">30</span>:<span class="hljs-number">11</span>       <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>  <span class="hljs-number">100.00</span><br><span class="hljs-number">13</span>:<span class="hljs-number">30</span>:<span class="hljs-number">11</span>       <span class="hljs-number">1</span>  <span class="hljs-number">100.00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><p>从终端二中可以看到，1 分钟的平均负载会慢慢增加到 1.00，而从终端三中还可以看到，正好有一个 CPU 的使用率为 100%，但它的 iowait<br>只有 0。这说明，平均负载的升高正是由于 CPU 使用率为 100% 。</p><p>那么，到底是哪个进程导致了 CPU 使用率为 100% 呢？你可以使用 pidstat 来查询：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># 间隔5秒后输出一组数据</span><br>$ pidstat -u <span class="hljs-number">5</span> <span class="hljs-number">1</span><br><span class="hljs-number">13</span>:<span class="hljs-number">37</span>:<span class="hljs-number">07</span>      UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command<br><span class="hljs-number">13</span>:<span class="hljs-number">37</span>:<span class="hljs-number">12</span>        <span class="hljs-number">0</span>      <span class="hljs-number">2962</span>  <span class="hljs-number">100.00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>  <span class="hljs-number">100.00</span>     <span class="hljs-number">1</span>  stress<br></code></pre></td></tr></table></figure><p>从这里可以明显看到，stress进程的CPU使用率为100%。</p><h4 id="案例2-IO密集"><a href="#案例2-IO密集" class="headerlink" title="案例2 IO密集"></a>案例2 IO密集</h4><p>首先还是运行 stress 命令，但这次模拟 I&#x2F;O 压力，即不停地执行 sync：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">stress -i 1 --<span class="hljs-built_in">timeout</span> 600</span><br></code></pre></td></tr></table></figure><p>还是在第二个终端运行uptime查看平均负载的变化情况：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lasso">$ watch <span class="hljs-params">-d</span> uptime<br><span class="hljs-params">...</span>,  load <span class="hljs-keyword">average</span>: <span class="hljs-number">1.06</span>, <span class="hljs-number">0.58</span>, <span class="hljs-number">0.37</span><br></code></pre></td></tr></table></figure><p>然后，第三个终端运行mpstat查看 CPU 使用率的变化情况：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># 显示所有CPU的指标，并在间隔5秒输出一组数据</span><br>$ mpstat -P ALL <span class="hljs-number">5</span> <span class="hljs-number">1</span><br>Linux <span class="hljs-number">4.15</span>.<span class="hljs-number">0</span> (ubuntu)     09/<span class="hljs-number">22</span>/<span class="hljs-number">18</span>     _x86_64<span class="hljs-number">_</span>    (<span class="hljs-number">2</span> CPU)<br><span class="hljs-number">13</span>:<span class="hljs-number">41</span>:<span class="hljs-number">28</span>     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle<br><span class="hljs-number">13</span>:<span class="hljs-number">41</span>:<span class="hljs-number">33</span>     all    <span class="hljs-number">0</span>.<span class="hljs-number">21</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">12.07</span>   <span class="hljs-number">32.67</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">21</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">54.84</span><br><span class="hljs-number">13</span>:<span class="hljs-number">41</span>:<span class="hljs-number">33</span>       <span class="hljs-number">0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">43</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">23.87</span>   <span class="hljs-number">67.53</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">43</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">7.74</span><br><span class="hljs-number">13</span>:<span class="hljs-number">41</span>:<span class="hljs-number">33</span>       <span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">81</span>    <span class="hljs-number">0</span>.<span class="hljs-number">20</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>    <span class="hljs-number">0</span>.<span class="hljs-number">00</span>   <span class="hljs-number">98.99</span><br></code></pre></td></tr></table></figure><p>从这里可以看到，1 分钟的平均负载会慢慢增加到 1.06，其中一个 CPU 的系统CPU使用率升高到了 23.87，而 iowait 高达<br>67.53%。这说明，平均负载的升高是由于 iowait 的升高。</p><p>那么到底是哪个进程，导致 iowait 这么高呢？我们还是用 pidstat 来查询：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap"><span class="hljs-comment"># 间隔5秒后输出一组数据，-u表示CPU指标</span><br>$ pidstat -u<span class="hljs-number"> 5 </span>1<br>Linux 4.15.0 (ubuntu)     09/22/18     _x86_64_    (2 CPU)<br>13:42:08      UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command<br>13:42:13       <span class="hljs-number"> 0 </span>     <span class="hljs-number"> 104 </span>   0.00    3.39    0.00    0.00    3.39    <span class="hljs-number"> 1 </span> kworker/1:1H<br>13:42:13       <span class="hljs-number"> 0 </span>     <span class="hljs-number"> 109 </span>   0.00    0.40    0.00    0.00    0.40    <span class="hljs-number"> 0 </span> kworker/0:1H<br>13:42:13       <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 2997 </span>   2.00   35.53    0.00    3.99   37.52    <span class="hljs-number"> 1 </span> stress<br>13:42:13       <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 3057 </span>   0.00    0.40    0.00    0.00    0.40    <span class="hljs-number"> 0 </span> pidstat<br></code></pre></td></tr></table></figure><p>可以发现，还是 stress 进程导致的</p><h4 id="场景三-大量进程的场景"><a href="#场景三-大量进程的场景" class="headerlink" title="场景三 大量进程的场景"></a>场景三 大量进程的场景</h4><p>当系统中运行进程超出 CPU 运行能力时，就会出现等待 CPU 的进程。</p><p>比如，我们还是使用 stress，但这次模拟的是 8 个进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">stress -c 8 --<span class="hljs-built_in">timeout</span> 600</span><br></code></pre></td></tr></table></figure><p>由于系统只有 2 个CPU，明显比 8 个进程要少得多，因而，系统的 CPU 处于严重过载状态，平均负载高达7.97：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lasso">$ uptime<br><span class="hljs-params">...</span>,  load <span class="hljs-keyword">average</span>: <span class="hljs-number">7.97</span>, <span class="hljs-number">5.93</span>, <span class="hljs-number">3.02</span><br></code></pre></td></tr></table></figure><p>接着再运行pidstat来看一下进程的情况：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tap"><span class="hljs-comment"># 间隔5秒后输出一组数据</span><br>$ pidstat -u<span class="hljs-number"> 5 </span>1<br>14:23:25      UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command<br>14:23:30       <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 3190 </span>  25.00    0.00    0.00   74.80   25.00    <span class="hljs-number"> 0 </span> stress<br>14:23:30       <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 3191 </span>  25.00    0.00    0.00   75.20   25.00    <span class="hljs-number"> 0 </span> stress<br>14:23:30       <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 3192 </span>  25.00    0.00    0.00   74.80   25.00    <span class="hljs-number"> 1 </span> stress<br>14:23:30       <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 3193 </span>  25.00    0.00    0.00   75.00   25.00    <span class="hljs-number"> 1 </span> stress<br>14:23:30       <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 3194 </span>  24.80    0.00    0.00   74.60   24.80    <span class="hljs-number"> 0 </span> stress<br>14:23:30       <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 3195 </span>  24.80    0.00    0.00   75.00   24.80    <span class="hljs-number"> 0 </span> stress<br>14:23:30       <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 3196 </span>  24.80    0.00    0.00   74.60   24.80    <span class="hljs-number"> 1 </span> stress<br>14:23:30       <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 3197 </span>  24.80    0.00    0.00   74.80   24.80    <span class="hljs-number"> 1 </span> stress<br>14:23:30       <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 3200 </span>   0.00    0.20    0.00    0.20    0.20    <span class="hljs-number"> 0 </span> pidstat<br></code></pre></td></tr></table></figure><p>可以看出，8 个进程在争抢 2 个 CPU，每个进程等待 CPU 的时间（也就是代码块中的 %wait 列）高达 75%。这些超出 CPU 计算能力的进程，最终导致<br>CPU 过载。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>平均负载提供了一个快速查看系统整体性能的手段，反映了整体的负载情况。但只看平均负载本身，我们并不能直接发现，到底是哪里出现了瓶颈。所以，在理解平均负载时，也要注意：</p><ul><li><p>平均负载高有可能是 CPU 密集型进程导致的；</p></li><li><p>平均负载高并不一定代表 CPU 使用率高，还有可能是 I&#x2F;O 更繁忙了；</p></li><li><p>当发现负载高的时候，你可以使用 mpstat、pidstat 等工具，辅助分析负载的来源。</p></li></ul><h3 id="经常说的-CPU-上下文切换是什么意思？"><a href="#经常说的-CPU-上下文切换是什么意思？" class="headerlink" title="经常说的 CPU 上下文切换是什么意思？"></a>经常说的 CPU 上下文切换是什么意思？</h3><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h2><h3 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a>排查思路</h3><ol><li>先去看系统负载、系统监控大盘 top htop</li><li>平均负载过高，看一下什么资源紧张 top</li><li>如果CPU没问题，看一下内存 cache buffer free</li><li>然后看磁盘 iostat</li><li>然后看带宽 iftop</li><li>具体应用看一下配置参数</li><li>外部系统，如数据库、缓存、存储</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM调优</title>
    <link href="/2025/03/11/jvm_config/"/>
    <url>/2025/03/11/jvm_config/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>JVM调优的杂谈</code>。<br>其中包括了关于我的见解和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="chapter-1"><a href="#chapter-1" class="headerlink" title="chapter 1"></a>chapter 1</h3><h3 id="chapter-2"><a href="#chapter-2" class="headerlink" title="chapter 2"></a>chapter 2</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方文档<ul><li><a href="http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html">Java HotSpot VM Options</a></li><li><a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html">Java Platform, Standard Edition Tools Reference for Oracle JDK on Solaris, Linux, and OS X, Release 8</a></li></ul></li><li>垃圾回收相关文档</li><li>官方文档<ul><li><a href="http://www.oracle.com/technetwork/java/javase/gc-tuning-6-140523.html">JVM 6 HotSpot GC tuning</a></li></ul></li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 使用简明指南</title>
    <link href="/2025/03/06/nginx/"/>
    <url>/2025/03/06/nginx/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>Nginx 使用简明指南</code>。<br>其中包括了关于我的见解和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>什么是Nginx？</p><p>Nginx 是一个高性能的HTTP和反向代理web服务器，核心特点是占有内存少，并发能力强</p><p>Nginx能做什么？</p><ul><li>Http服务器（web服务器）<ul><li>性能非常高，非常注重效率，能够经受高负载的考验</li><li>支持50000个并发连接数，不仅如此，CPU和内存的占用也非常的低，10000个没有活动的连接才占用2.5M的内存。</li></ul></li><li>反向代理服务器</li><li>负载均衡服务器</li><li>动静分离</li></ul><p>Nginx特点</p><ul><li>跨平台:Nginx可以在大多数类unix操作系统上编译运行，而且也有windows版本</li><li>Nginx的上手非常容易，配置也比较简单</li><li>高并发，性能好</li><li>稳定性也特别好，宕机概率很低</li></ul><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3><h4 id="Docker方式安装"><a href="#Docker方式安装" class="headerlink" title="Docker方式安装"></a>Docker方式安装</h4><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><ul><li>上传nginx安装包到linux服务器，nginx安装包(.tar文件)下载地址:<a href="http://nginx.org/">http://nginx.org</a></li><li>安装Nginx依赖，pcre、openssl、gcc、zlib(推荐使用yum源自动安装)<ul><li>yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</li></ul></li><li>解包Nginx软件包<ul><li>tar -xvf nginx-release.tar</li></ul></li><li>cd进入解压之后的目录 nginx-release</li><li>.&#x2F;config</li><li>make</li><li>make install 完毕之后在&#x2F;usr&#x2F;local&#x2F;下会产生一个nginx目录</li><li>cd nginx&#x2F;sbin</li><li>.&#x2F;nginx</li><li>访问80端口(nginx默认监听80)</li></ul><h3 id="核心配置"><a href="#核心配置" class="headerlink" title="核心配置"></a>核心配置</h3><p>nginx核心配置文件 <code>conf/nginx.conf</code> 包含三块内容：全局块、events块、http块。</p><ul><li>全局块<ul><li>从配置文件开始到events块之间的内容，此处的配置影响nginx服务器整体的运行，比如worker进程的数量、错误日志的位置等</li></ul></li><li>events块<ul><li>events块主要影响nginx服务器与用户的网络连接，比如worker_connections 1024，标识每个workderprocess支持的最大连接数为1024</li></ul></li><li>http块<ul><li>http块是配置最频繁的部分，虚拟主机的配置，监听端口的配置，请求转发、反向代理、负载均衡</li></ul></li></ul><p>配置文件示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Nginx 主配置文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">全局块</span><br>user nginx;  # 运行 Nginx 的用户<br>worker_processes auto;  # 自动根据 CPU 核数决定 worker 进程数<br>worker_cpu_affinity auto;  # worker 进程绑定 CPU 核心<br>worker_rlimit_nofile 10240;  # 限制每个 worker 进程打开文件的最大数目<br>pid /var/run/nginx.pid;  # 存放 PID 的文件路径<br>include /etc/nginx/modules-enabled/*.conf;  # 引入动态模块<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">events块</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Nginx 工作进程和事件处理</span><br>events &#123;<br>    worker_connections 1024;  # 每个 worker 进程允许的最大连接数<br>    use epoll;  # 使用 epoll 模型（适用于 Linux）<br>    multi_accept on;  # 一个 worker 是否可以同时接受多个连接<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">HTTP 配置块</span><br>http &#123;<br>    log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;<br>                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;<br>                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;  # 设置日志格式<br><br>    access_log /var/log/nginx/access.log main;  # 设置访问日志路径和格式<br>    error_log /var/log/nginx/error.log warn;  # 设置错误日志路径和日志级别<br><br>    sendfile on;  # 启用 sendfile（文件传输优化）<br>    tcp_nopush on;  # 启用 TCP_NOPUSH<br>    tcp_nodelay on;  # 启用 TCP_NODELAY<br>    keepalive_timeout 65;  # 设置连接的保持时间<br>    types_hash_max_size 2048;  # 设置 types_hash 的最大大小<br>    server_tokens off;  # 禁用服务器信息暴露<br>    client_max_body_size 10M;  # 设置请求体最大尺寸<br>    client_body_timeout 12;  # 设置请求体读取超时时间<br>    client_header_timeout 12;  # 设置请求头读取超时时间<br>    server_names_hash_bucket_size 64;  # 配置虚拟主机名称哈希表的大小<br>    reset_timedout_connection on;  # 重置超时连接<br><br>    include /etc/nginx/mime.types;  # 设置 MIME 类型的映射<br>    default_type application/octet-stream;  # 默认 MIME 类型<br><br>    # Gzip 压缩配置<br>    gzip on;<br>    gzip_disable &quot;msie6&quot;;  # 禁用对 IE6 的 Gzip 支持<br>    gzip_vary on;  # 支持 Gzip 缓存<br>    gzip_proxied any;  # 启用压缩处理所有代理请求<br>    gzip_comp_level 6;  # 设置压缩等级<br>    gzip_types text/plain text/css application/javascript application/json application/xml application/xml+rss text/javascript;  # 启用的压缩 MIME 类型<br><br>    # 设置虚拟主机<br>    server &#123;<br>        listen 80 default_server;  # 设置监听端口<br>        server_name _;  # 默认服务器名称<br><br>        location / &#123;<br>            root /usr/share/nginx/html;  # 设置网站根目录<br>            index index.html index.htm;  # 设置默认主页<br>        &#125;<br><br>        # 错误页面处理<br>        error_page 404 /404.html;<br>        location = /404.html &#123;<br>            root /usr/share/nginx/html;<br>        &#125;<br><br>        error_page 500 502 503 504 /50x.html;<br>        location = /50x.html &#123;<br>            root /usr/share/nginx/html;<br>        &#125;<br><br>        # 文件上传限制<br>        client_max_body_size 10M;<br>    &#125;<br><br>    # 另一虚拟主机示例<br>    server &#123;<br>        listen 80;<br>        server_name example.com;<br><br>        location / &#123;<br>            root /var/www/example;<br>            index index.html index.htm;<br>        &#125;<br><br>        # 反向代理示例<br>        location /api/ &#123;<br>            proxy_pass http://backend_server;  # 反向代理到后端服务器<br>            proxy_set_header Host $host;<br>            proxy_set_header X-Real-IP $remote_addr;<br>            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>            proxy_set_header X-Forwarded-Proto $scheme;<br>        &#125;<br>    &#125;<br><br>    # 动态模块配置<br>    include /etc/nginx/conf.d/*.conf;  # 包含所有额外配置<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h4><p>动静分离就是讲动态资源和静态资源的请求处理分配到不同的服务器上，比较经典的组合就是Nginx+Tomcat架构(<br>Nginx处理静态资源请求，Tomcat处理动态资源请求)，Nginx反向代理目标服务器Tomcat，我们能看到目标服务器ROOT项目的index.jsp，这本身就是Tomcat在处理动态资源请求了。</p><p>动静分离需求:主要是静态资源的访问，因为我们之前Nginx反向代理到Tomcat能够看到Tomcat<br>ROOT项目的index.jsp页面这本身就是一个动态资源的请求过程。我们希望在Nginx服务器上部署静态资源，然后浏览器请求http:<br>&#x2F;&#x2F;111.229.248.243:9003&#x2F;static&#x2F;abc.htm，Nginx直接读取的本地静态资源</p><p>通过动静分离，Nginx 将静态资源的请求直接通过 Nginx 自身处理，而将动态请求转发到后端的应用服务器。这样可以减少后端应用服务器的压力，提高处理效率，特别是在高并发情况下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">nginx 动静分离示例</span><br>server &#123;<br>    listen 80;<br>    server_name example.com;<br><br>    # 配置静态资源的处理 所有以 /static/* 开头的请求，都走以下配置，去资源目录里面找，让nginx负责处理<br>    location /static/ &#123;<br>        root /var/www/html;  # 指定静态资源的根目录<br>        expires 30d;         # 设置静态文件缓存30天<br>        add_header Cache-Control public;  # 使浏览器缓存静态文件<br>    &#125;<br><br>    # 配置 PHP 动态请求的处理<br>    location ~ \.php$ &#123;<br>        fastcgi_pass 127.0.0.1:9000;    # PHP-FPM 服务器地址（假设 PHP-FPM 在本机 9000 端口运行）<br>        fastcgi_index index.php;        # 默认文件是 index.php<br>        fastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;  # PHP 脚本路径<br>        include fastcgi_params;         # 包含 FastCGI 参数配置<br>    &#125;<br><br>    # 配置其他动态请求，转发给后端应用服务器<br>    location / &#123;<br>        proxy_pass http://backend_app_server;  # 将动态请求转发到后端应用服务器<br>        proxy_set_header Host $host;<br>        proxy_set_header X-Real-IP $remote_addr;<br>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        proxy_set_header X-Forwarded-Proto $scheme;<br>    &#125;<br><br>    # 配置日志文件<br>    access_log /var/log/nginx/access.log;<br>    error_log /var/log/nginx/error.log;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>nginx开启缓存示例配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">http &#123;<br>    # 配置缓存路径<br>    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m inactive=60m max_size=1g;<br><br>    server &#123;<br>        listen 80;<br>        server_name example.com;<br><br>        # 配置代理缓存<br>        location / &#123;<br>            proxy_cache my_cache;                 # 使用名为 my_cache 的缓存区<br>            proxy_cache_valid 200 1h;              # 缓存 200 状态码的响应 1 小时<br>            proxy_cache_valid 404 1m;              # 缓存 404 状态码的响应 1 分钟<br>            proxy_cache_use_stale error timeout;   # 在后端服务器出现错误或超时时，使用过期的缓存<br>            proxy_pass http://backend_app_server;  # 将请求转发到后端应用服务器<br>            proxy_set_header Host $host;<br>            proxy_set_header X-Real-IP $remote_addr;<br>            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>            proxy_set_header X-Forwarded-Proto $scheme;<br>        &#125;<br><br>        # 其他配置...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>清除缓存方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">http &#123;<br>    # 清理缓存<br>    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m inactive=60m max_size=1g;<br>    <br>    server &#123;<br>        listen 80;<br>        server_name example.com;<br><br>        # 配置缓存清理<br>        location /clear_cache &#123;<br>            # 清理缓存的逻辑，可以通过 Nginx 内部脚本或与缓存管理系统结合。<br>            # 可以写脚本去清理path下面的内容 rm -rf /var/cache/nginx/*<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>反向代理是一种服务器架构，其中代理服务器代表客户端向目标服务器发起请求。与传统的正向代理不同，正向代理是客户端通过代理服务器访问互联网，而反向代理则是客户端直接与反向代理服务器交互，代理服务器再将请求转发到实际的后端服务器，最终将后端服务器的响应返回给客户端。</p><ul><li>正向代理：客户端请求通过代理服务器发送，代理服务器代替客户端向目标服务器发起请求。常见于客户端无法直接访问目标服务器时（如在防火墙后面访问互联网）。</li><li>反向代理：客户端请求通过代理服务器发送，代理服务器代替目标服务器接收请求并返回响应。客户端通常不需要知道反向代理的存在。</li></ul><p>反向代理的主要作用</p><ul><li>负载均衡：反向代理可以根据不同的算法（如轮询、最少连接等）将客户端的请求分发到多个后端服务器。这种做法可以有效地平衡负载，提升系统的整体性能和可靠性。</li><li>增强安全性：反向代理可以隐藏真实的后端服务器IP，防止客户端直接访问后端服务器，从而减少攻击的风险。例如，反向代理服务器可以防止外部用户直接与后端服务器的内部网络进行通信。</li><li>缓存：反向代理可以缓存来自后端服务器的响应内容，特别是静态资源（如图片、JS、CSS<br>文件等）。当相同请求再次到来时，代理服务器可以直接返回缓存的内容，减少对后端服务器的负载并提升响应速度。</li><li>ssl加速：反向代理可以处理 SSL 加密&#x2F;解密工作，将这一计算密集型任务从后端服务器中解脱出来，减轻后端服务器的压力，提升性能。</li><li>请求过滤：反向代理可以用于对客户端的请求进行过滤或处理，例如检查请求是否合法，阻止恶意请求，或者对请求进行认证等。</li></ul><p>nginx 反向代理 tomcat 示例配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">http &#123;<br>    upstream tomcat_backend &#123;<br>        # 定义 Tomcat 后端服务器，支持多个 Tomcat 实例<br>        server 127.0.0.1:8080;  # Tomcat 实例1<br>        # server 192.168.1.2:8080; # 可以添加更多 Tomcat 实例进行负载均衡<br>    &#125;<br><br>    server &#123;<br>        listen 80;  # 监听80端口 用户访问80<br><br>        server_name example.com;  # 服务器域名<br><br>        location / &#123;<br>            proxy_pass http://tomcat_backend;  # 将请求代理到上面定义的 Tomcat 后端服务器<br>            proxy_set_header Host $host;  # 保持原始的 Host 头信息<br>            proxy_set_header X-Real-IP $remote_addr;  # 传递客户端的 IP 地址<br>            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 保留客户端真实 IP<br>            proxy_set_header X-Forwarded-Proto $scheme;  # 保留协议（http/https）<br>            proxy_set_header X-Forwarded-Port $server_port;  # 传递端口信息<br>            proxy_set_header X-Forwarded-Host $host;  # 保持原始的 Host 信息<br>            proxy_set_header X-Forwarded-Server $host;  # 传递代理服务器的主机名<br>        &#125;<br><br>        error_page  500 502 503 504  /50x.html;<br>        location = /50x.html &#123;<br>            root   /usr/share/nginx/html;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p>Nginx负载均衡策略</p><ul><li>轮询</li><li>weight</li><li>ip_hash</li><li>最少连接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">轮询示例</span><br>http &#123;<br>    upstream backend &#123;<br>        # 默认使用轮询算法<br>        server backend1.example.com;<br>        server backend2.example.com;<br>        server backend3.example.com;<br>    &#125;<br><br>    server &#123;<br>        listen 80;<br><br>        server_name example.com;<br><br>        location / &#123;<br>            # 将请求转发到 upstream 中定义的服务器<br>            proxy_pass http://backend;<br>            proxy_set_header Host $host;<br>            proxy_set_header X-Real-IP $remote_addr;<br>            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>            proxy_set_header X-Forwarded-Proto $scheme;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">常见配置</span><br>upstream backend &#123;<br>    server backend1.example.com max_fails=3 fail_timeout=30s;<br>    server backend2.example.com;<br>    server backend3.example.com;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">权重方式</span><br>upstream backend &#123;<br>    server backend1.example.com weight=3;<br>    server backend2.example.com weight=1;<br>    server backend3.example.com weight=2;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">iphash</span><br>upstream backend &#123;<br>    ip_hash;<br>    server backend1.example.com;<br>    server backend2.example.com;<br>    server backend3.example.com;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">最少连接</span><br>upstream backend &#123;<br>    least_conn;<br>    server backend1.example.com;<br>    server backend2.example.com;<br>    server backend3.example.com;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>Java</tag>
      
      <tag>DevOps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux基础</title>
    <link href="/2025/03/05/linux_basic/"/>
    <url>/2025/03/05/linux_basic/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>linux基础</code>。<br>其中包括了关于我的见解和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h3 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h3><p>Linux与windows类似的，他们都是操作系统。只不过Linux一般用于企业环境，相对更稳定。</p><p>发展历史</p><ul><li>孵化：Unix贝尔实验室</li><li>谭宁邦 教学：Mint (mini unix</li><li>斯托曼<ul><li>组织: 自由软件基金会 FSF</li><li>规则、协议：GPL 公共通用许可<ul><li>要求01：所有软件开源，可以随意修改。</li><li>要求02：改完之后的内容，也要开源。</li></ul></li><li>项目：GNU项目 弄出个系统</li></ul></li><li>托瓦兹：开发出了Linux内核</li></ul><p>Linux组成</p><ul><li>蛋壳 - 各种应用程序： linux各种命令，服务。。。</li><li>蛋清 - 命令解释器：shell, 斯托曼GNU项目中叫bash</li><li>蛋黄 - Linux内核： 托沃兹开发</li></ul><p>发行版（重要的加粗）</p><ul><li>Debian系列<ul><li><strong>Debian</strong></li><li><strong>Ubuntu</strong></li></ul></li><li>红帽系列<ul><li><strong>RHEL</strong> Redhat Enterprise Linux</li><li><strong>CentOS</strong>(被红帽收购,红帽CentOS Stream测试版)</li><li>Rocky Linux( CentOS系统创始人，新出的Linux系统。)</li></ul></li><li>国产系列<ul><li><strong>麒麟Kylin</strong></li><li>红旗</li><li>欧拉</li><li>others</li></ul></li><li>其他<ul><li>OpenSUSE</li><li>archlinux</li></ul></li><li>推荐选择LTS版本或稳定版。</li></ul><h3 id="虚拟机概述"><a href="#虚拟机概述" class="headerlink" title="虚拟机概述"></a>虚拟机概述</h3><p>虚拟机是什么：虚拟机是一种软件实现的计算机，能够模拟一台真实计算机的功能和操作系统。它通过在物理计算机（宿主机）上运行，模拟出多个独立的虚拟计算机（虚拟机），每台虚拟机都可以运行自己的操作系统和应用程序。</p><p>虚拟机分类 <code>TODO</code></p><ul><li>第一类虚拟机</li><li>第二类虚拟机</li></ul><p>虚拟机工具：<code>VMware workstation</code>、<code>virtual box</code>、<code>wsl</code>、etc…</p><p>推荐<code>VM</code>。微信公众号 软件管家 免费获取。自己下载安装一下就是永久的。我用了几年了，应该没病毒。传播范围应该挺广的，我经常传播。</p><p>VM安装： 略。获取软件的地方，有详细教程</p><blockquote><p>主机要求：win&#x2F;mac。cpu i5以上，不推荐m1&#x2F;m2。内存最低16G。硬盘500G。VM版本建议17。vm15.5.5<br>之前版本和win的hyper-v冲突，只能用一个。新一些的已解决冲突问题。感兴趣可以去网上搜索相关内容。</p></blockquote><h4 id="linux系统安装"><a href="#linux系统安装" class="headerlink" title="linux系统安装"></a>linux系统安装</h4><p>Linux系统安装的过程可能会因不同的发行版和使用的软件有所区别，但一般来说，可遵循以下步骤：</p><ul><li><p>准备安装介质：首先需要下载一个Linux发行版的ISO文件，例如Ubuntu、Fedora或CentOS等。然后，将这个ISO文件烧录到USB闪存驱动器或DVD光盘，用作启动和安装介质。</p></li><li><p>启动安装介质：将安装介质插入电脑，并重新启动电脑。在BIOS或UEFI设置中，将启动顺序设置为优先从安装介质启动。</p></li><li><p>开始安装：电脑启动后，通常会出现一个菜单，选择“开始安装”或者“试用 Linux”。</p></li><li><p>选择语言：选择你的首选语言。</p></li><li><p>分区：在硬盘上为Linux系统分配空间。在大多数情况下，选择“自动分区”或者“使用整个磁盘”就足够了。如果你需要更精细的控制，或者需要设置多系统引导，你可能需要手动分区。</p></li><li><p>设置用户信息：输入用户名、计算机名称以及密码。</p></li><li><p>安装：点击“开始安装”或者“下一步”，安装程序将开始安装操作系统。这个过程可能会花费一段时间。在安装过程中，你可以阅读一些关于你的Linux发行版的信息。</p></li><li><p>安装完成：安装完成后，将提示你移除安装介质，并重新启动计算机。重新启动后，你将可以启动并使用你的新Linux系统。</p></li></ul><p>以上是一般的Linux安装过程，具体可能会根据不同的Linux发行版和硬件环境有所不同。在安装过程中请根据屏幕提示进行操作，如果遇到问题，不要犹豫寻求帮助。</p><h4 id="VM网络管理"><a href="#VM网络管理" class="headerlink" title="VM网络管理"></a>VM网络管理</h4><ul><li>vm</li><li>编辑</li><li>虚拟网络编辑器</li><li>管理员模式</li><li>修改nat模式</li><li>子网，掩码和服务器的对应。</li><li>dhcp设置，网关设置好10.0.0.2。</li><li>然后去win的网络共享中心，找到vm8网卡，ipv4地址设置成10.0.0.1</li><li><strong>warning：IP设置成你自己的</strong></li></ul><h4 id="VM安装CentOS"><a href="#VM安装CentOS" class="headerlink" title="VM安装CentOS"></a>VM安装CentOS</h4><ul><li>新建虚拟机</li><li>选择自定义</li><li>稍后安装系统，避免自动安装</li><li>选择系统，此处Linux-CentOS 7 64位</li><li>命名，选位置。建议全英文。</li><li>CPU核心数</li><li>调整内存大小</li><li>网络NAT模式</li><li>I&#x2F;O控制器类型选推荐</li><li>磁盘类型选推荐</li><li>创建新虚拟磁盘</li><li>设置最大磁盘空间，40G，不拆分，存储单个文件。</li><li>磁盘空间选择</li><li>完成</li><li>虚拟机设置界面，CD&#x2F;DVD配置项，选择你的系统ios文件地址。系统镜像文件下载，略。</li><li>启动</li><li>在第一个界面，选 <code>Install CentOS 7</code></li><li>(这一步骤可省略)按tab，在最后添加 <code>biosdevname=0 net.ifnames=0</code> ，回车。</li><li>语言选择</li><li>安装位置选一下磁盘</li><li>网络和主机名<ul><li>以太网，打开，配置<ul><li>常规：可用时自动链接到这个网络。</li><li>IPV4设置<ul><li>IP：10.0.0.200</li><li>子网掩码：24</li><li>网关：10.0.0.2</li><li>DNS：223.5.5.5,223.6.6.6</li></ul></li></ul></li><li>主机名，自己设置一下</li></ul></li><li>KDUMP：关闭</li><li>软件：最小安装，选调试工具、兼容性程序库、开发工具、系统管理工具。</li><li>时区，关闭网络时间</li><li>root密码设置</li><li>(可选)新建用户</li><li>安装完成后，提示重启，点击重启</li><li>进入系统，输入账号密码登录</li><li>测试 <code>ping 10.0.0.2</code> 测一下和网关通不通</li><li>测试：查看ip <code>ip -a</code></li><li>测试： <code>ping www.baidu.com</code></li><li>IP配置 nmtui 命令工具</li><li>edit a connection</li><li>选择网卡，配置网络信息</li><li>退出，保存</li></ul><p><strong>Warning：可选</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">biosdevname=0 net.ifnames=0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装centos的时候 命令中添加以上配置内容，用于修改网卡名字 ensxxx --&gt;eth0 eth1</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据需求选择，一般是server版</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">官方源</span><br>http://isoredirect.centos.org/centos/7/isos/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">阿里源</span><br>https://mirrors.aliyun.com/centos/7/isos/x86_64/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">腾讯源</span><br>https://mirrors.cloud.tencent.com/centos/7/isos/x86_64/<br></code></pre></td></tr></table></figure><h4 id="Linux-SSH-连接"><a href="#Linux-SSH-连接" class="headerlink" title="Linux SSH 连接"></a>Linux SSH 连接</h4><p>SSH协议介绍</p><blockquote><p>SSH，全称Secure Shell，是一种网络协议，用于安全地在不安全的网络上执行命令并传输数据。SSH在计算机世界中广泛使用，特别是在进行远程系统管理和安全文件传输方面。</p></blockquote><blockquote><p>SSH提供了一种安全的通道，用于两个在不安全的网络（如互联网）上的系统之间的通信。它使用公钥加密来验证远程计算机和允许远程计算机验证用户。</p></blockquote><p>SSH主要提供以下功能：</p><ul><li><p>安全远程命令执行：SSH提供了一种在远程服务器上执行命令的安全方式。</p></li><li><p>安全文件传输：SSH包含两个重要的文件传输协议，SCP和SFTP。它们都可以在不安全的网络上安全地复制文件。</p></li><li><p>端口转发和隧道：SSH可以安全地隧道各种网络协议，并为本地和远程的应用程序提供端口转发。</p></li><li><p>身份和安全：SSH使用公钥加密和其他加密技术来提供数据完整性、加密和验证。</p></li></ul><p>SSH的默认端口是22，但可以在服务器配置中更改。</p><p>SSH协议有两个主要版本，SSH1和SSH2。SSH2包含了对SSH1的许多改进，并且解决了SSH1中的许多安全问题。因此，SSH2是首选的SSH协议版本。</p><p>SSH的一个重要组成部分是SSH密钥对，它包括一个公钥和一个私钥。公钥存储在远程服务器上，私钥保留在本地计算机上。当尝试通过SSH连接到服务器时，服务器会使用存储的公钥来加密一个消息，然后发送到客户端。客户端使用其私钥解密消息并发送回服务器，从而验证其身份。这种方式提供了一种强大的身份验证方法，而无需传输密码。</p><p>在Linux实际运维当中，ssh分服务端（SSHD）和客户端（ssh），服务端其实一般代表的就是别人可以通过ssh连接到服务器，而客户端则代表我们可以通过ssh协议连接其他服务器，而不用借助其他辅助工具，比如下面这些常见的ssh软件（类UNIX系统都会自带）</p><blockquote><p>常见的SSH软件</p></blockquote><ul><li><p>OpenSSH：它是SSH协议的开源实现，包含了一个SSH客户端和服务器。适用于各种操作系统，包括Linux、Unix、Windows等。</p></li><li><p>PuTTY：一个免费的、开源的SSH和telnet客户端，主要用于Windows系统。</p></li><li><p>SecureCRT：一款商业的SSH客户端，提供了图形界面和一些高级功能，如多标签、脚本支持、会话管理等。</p></li><li><p>Bitvise SSH Client：又是一款商业SSH客户端，主要用于Windows系统。支持SFTP、端口转发、动态SOCKS代理等。</p></li><li><p>MobaXterm：一个增强版的SSH客户端，集成了很多功能，如多标签、SFTP、X11转发、内置的Unix命令等，主要用于Windows系统。</p></li><li><p>Termius：一个跨平台的SSH客户端，适用于Windows、Mac、Linux、iOS和Android。提供了图形界面，支持多标签、端口转发、SFTP等。</p></li><li><p>Xshell：商业软件，目前新版本提供社区版免费使用，输入邮箱申请就行了，支持SSH1, SSH2以及Microsoft<br>Windows平台的TELNET协议。提供完整的终端模拟、动态端口转发、自动登录和脚本功能等。Xshell是商业软件，但对于学术和家庭用户，提供了免费的个人版。</p></li><li><p>以上只是常见的SSH软件，实际上还有很多其他的SSH客户端和服务器软件，用户可以根据自己的需要选择合适的工具。比如<code>final shell</code><br>等</p></li></ul><blockquote><p>我个人使用的是 MobaXterm 和 开发工具内置的ssh工具。xshell目前我也比较推荐。</p></blockquote><p>其他协议介绍</p><ul><li><p>在服务器领域不仅有Linux，也有WIN的服务器，Linux通用的是ssh（默认端口22），而win是一个RDP的协议（默认端口3389）</p></li><li><p>VNC，全称是Virtual Network Computing，是一种图形界面的远程控制技术。通过VNC协议，用户可以在本地计算机上操作远程计算机的桌面环境。</p><ul><li><p>VNC工作原理是：在远程计算机上运行一个VNC服务器程序，它会把屏幕图像（或者改变的部分）以图形的形式通过网络传送到本地计算机的VNC客户端。本地计算机上的用户可以看到远程计算机的桌面，并可以通过鼠标和键盘来操作远程计算机。</p></li><li><p>VNC协议在云厂商使用比较多，可以等效于显示器来使用，在云厂商的网页控制台里面一般都可以找到。在互联网早期，云并未大面积普及的时候，如果误操作导致网络异常，是无法通过ssh或者rdp连接的，就可以提供额外的vnc方式去连接（前提是你额外配置过，主要针对虚拟机）。独立服务器还可以通过ipmi&#x2F;带外方式进行操作。</p></li></ul></li></ul><p>连接步骤：</p><ul><li>新建会话</li><li>输入服务器的IP,端口，账号，密码</li><li>连接成功</li></ul><p><strong>特别注意</strong>：Linux是可以设置为空密码的，如果通过控制台（显示器）输入账号以后是可以直接进入系统，不需要密码的，但是在ssh连接的时候是必须用密码的，如果出现服务器为空密码的情况，是无法ssh连接进去的。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Linux-基础知识"><a href="#Linux-基础知识" class="headerlink" title="Linux 基础知识"></a>Linux 基础知识</h3><h4 id="命令相关"><a href="#命令相关" class="headerlink" title="命令相关"></a>命令相关</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@machinname ~]#<br><span class="hljs-meta prompt_">#</span><span class="language-bash">[用户@主机名 当前目录]<span class="hljs-comment">#</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">~代表当前目录 后面的<span class="hljs-comment">#代表root用户 $代表普通用户 主机名务必要修改，如果不修改默认是localhost</span></span><br></code></pre></td></tr></table></figure><p>linux命令格式：<code>command option arguments/parameter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">命令 Linux下面通过命令控制整个系统。(一般是单词或缩写)<br>选项 option,同一个命令的不同的功能执行命令的时候可以加上的条件。<br>参数 argument/parameter命令处理的目标<br><br>命令不会怎么办？<br><span class="hljs-number">1.</span> 上网查<br><span class="hljs-number">2.</span> man 命令 查询帮助<br><span class="hljs-number">3.</span> 命令 --help 查询帮助 简洁<br><span class="hljs-number">4.</span> info 帮助 详细<br><span class="hljs-number">5.</span> help 查询linux内置命令<br><br>linux快捷键<br>ctrl + a 光标移动到行首<br>ctrl + e 光标移动到行尾<br>ctrl + u 把光标所在位置到行首的内容剪切<br>ctrl + k 把光标所在位置到行尾的内容剪切<br>ctrl + l 清屏<br>ctrl + c 取消当前命令<br><br>ctrl + s linux是锁屏，win是保存<br>ctrl + q 解锁<br>ctrl + z linux是后台挂起当前命令，win是撤销<br><br>tab 自动补全命令<br></code></pre></td></tr></table></figure><ul><li>关机命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">shutdown (-c 取消) (-h 指定时间，单位分钟后 now 10) <br>halt<br>poweroff<br>init 0<br></code></pre></td></tr></table></figure><ul><li>重启</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">shutdown -r null / now / 10<br>reboot<br>init 6<br></code></pre></td></tr></table></figure><ul><li>cd &amp; pwd</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd change directory 进入到某个目录<br>pwd print working directory显示当前所在位置（以绝对路径方式显示）<br><br>回到家目录<br>cd ~<br>cd<br>上级目录<br>cd ..<br>上次目录<br>cd -<br>进入当前目录<br>cd . <br></code></pre></td></tr></table></figure><ul><li>mkdir</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir make dir directory<br>-p 创建多级目录<br>-v 显示目录创建过程，工作中基本不用<br></code></pre></td></tr></table></figure><ul><li>touch</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch 创建文件<br>-a：仅修改文件的访问时间（atime）。<br>-c：如果文件不存在，则不创建新文件。<br>-m：仅修改文件的修改时间（mtime）。<br>-r：使用指定文件的时间戳信息来设置目标文件的时间戳。<br>-t：使用指定的时间戳来设置文件的时间戳。<br><br>touch test.txt test.sh<br></code></pre></td></tr></table></figure><ul><li>vi</li></ul><p>linux文件编辑器。提vi之前必须得先提提vim,vi可以理解是早期的版本，vim是升级版本，具备更多的功能，但是vim在默认的Centos最小化安装是不会自带的，需要单独安装软件包vim-enhanced</p><p>主要区别是以下几个方面：vim支持可视化、语法高亮、自动补全、支持多级撤销和重做、插件支持、执行外部命令、分屏编辑、搜索和替换功能</p><p>Vi 编辑器有三种主要的工作模式，它们是命令模式（Command Mode）、插入模式（Insert Mode）和底线命令模式（Last Line<br>Mode）。每种模式都有不同的功能和用途。</p><ul><li>命令模式：执行多种操作<ul><li>移动光标<ul><li>直接通过小键盘就可以上下左右移动</li><li>G ：到文件末尾</li><li>gg: 到文件开头</li><li>0: 到行首（数字0）</li><li>$: 到行尾</li><li>:set number: 显示行号</li><li>:行号：直接定义到某某行，比如 :10 就是到第10行</li></ul></li><li>删除<ul><li>x：删除光标所在位置的字符。</li><li>dd：删除光标所在行</li></ul></li><li>复制和粘贴<ul><li>yy：复制当前行。</li><li>p：粘贴</li></ul></li><li>搜索<ul><li>&#x2F;：开始向下搜索。</li><li>?：开始向上搜索。</li></ul></li><li>撤销和重做<ul><li>u：撤销上一步操作。</li><li>Ctrl + r：重做。</li></ul></li></ul></li><li>插入模式：输入、编辑文本<ul><li>进入方式<ul><li>i：在当前光标位置插入文本。</li><li>a：在光标后的位置插入文本。</li><li>o：在当前行的下方新建一行并进入插入模式。</li></ul></li><li>退出插入模式：<ul><li>按下 ESC 键，返回到命令模式。</li></ul></li></ul></li><li>底线命令模式：执行文件保存、退出 Vi 等操作<ul><li>:w 保存文件。</li><li>:q 退出 Vi。</li><li>:wq 或 ZZ 保存文件并退出 Vi。</li><li>!   强制操作，不单独操作，组合使用，用于强制退出或者强制保存退出。</li></ul></li><li>模式切换<ul><li>从命令模式切换到插入模式，按下 i、a 或其他插入命令。</li><li>从插入模式切换到命令模式，按下 ESC 键。</li><li>从命令模式切换到底线命令模式，按下 : 键。</li><li>从底线命令模式切换到命令模式，按下 ESC 键。</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi # 如果文件不存在，则也会创建一个文件<br><br></code></pre></td></tr></table></figure><ul><li>ls</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls list<br>-l 长格式显示，显示详细信息<br>-t 按照时间排序<br>-r 逆序<br>-h 人类可读形式<br>-a all<br>-R 递归列出<br>--color=auto 多色彩显示<br><br>ls /etc<br><br>ls -l /etc<br>一般简写为ll ll /etc<br></code></pre></td></tr></table></figure><ul><li>mv</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv [选项] 源文件 目标文件<br>mv move<br><br>-i：在移动或重命名前进行交互式确认，避免意外覆盖文件。<br>-f：如果目标文件已存在，则强制移动或重命名，覆盖已存在的文件。<br>-v：显示详细的移动或重命名信息，展示操作过程。<br>--backup[=CONTROL]：在移动或重命名文件时，根据 CONTROL 控制备份行为。<br><br>mv /home/user1/test.txt /home/user2/test.txt <br>mv 命令既可以用于移动文件或目录，也可以用于重命名文件或目录<br></code></pre></td></tr></table></figure><ul><li>cp</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp [选项] 源文件 目标文件<br>copy<br>-a all = -dpr<br>-i 在复制前进行交互式确认，避免文件覆盖。<br>-r/R 递归复制<br>-p 复制时保持属性不变<br>-d 可以复制软连接<br>--preserve：保留文件的特殊属性，如 SELinux 上下文等<br>-u：仅在源文件更新时才复制<br>-v：显示详细的复制信息，展示复制过程<br>cp file1.txt file2.txt<br>cp -a /home/user1 /home/user2<br></code></pre></td></tr></table></figure><ul><li>rm</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm remove<br>rm [选项] 文件或目录<br><br>-f force 强制删除<br>-r 递归删除<br>-i：在删除文件或目录前进行交互式确认，避免意外删除重要文件<br><br>rm -rf /home/user1<br></code></pre></td></tr></table></figure><ul><li>echo</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo 输出信息到屏幕<br>echo 996.icu<br>echo &#123;a..z&#125; &gt;&gt; /home/user1/test.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">重定向符号   先清空再写入</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt; 追加重定向  追加写入</span><br></code></pre></td></tr></table></figure><ul><li>cat</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat 显示文件内容<br>-n：显示行号，同时显示文件内容。<br>-b：显示行号，但仅对非空行编号，空行不编号。<br>-s：将多个连续的空行合并为一个空行输出。<br>-E：在每行末尾显示 $ 符号。<br>-T：将制表符显示为 ^I。<br>-A：同时显示 -E、-T 和 -v 的效果，以可见方式显示非打印字符。<br>-v：显示非打印字符。<br><br>cat -n /home/user1/test.txt<br></code></pre></td></tr></table></figure><ul><li>less</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">less # 查看文件内容<br>-N：显示每行的行号。<br>-S：在水平方向上截断长行，而不是换行显示。<br>-i：忽略搜索时的大小写。<br>-q：不显示&quot;Press ENTER or type command to continue&quot;的提示信息，直接退出。<br>-F：在只有一个屏幕可以显示所有内容时，不再显示“显示第 X 到 Y 行，共 Z 行”等提示信息，直接退出。<br>-h：显示帮助信息，列出 less 命令的选项说明。<br><br>less -N filename.txt<br></code></pre></td></tr></table></figure><ul><li>more</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">more 逐页显示文本文件内容<br>-d：显示每页内容前暂停，显示 --More-- 提示信息。<br>-l：忽略换行符，将长行视为单行显示。<br>-n：显示每行的行号。<br>-p：通过清除整个屏幕来显示文件，而不是在当前屏幕的底部显示文件。<br>-s：合并多个连续空白行为一行。<br>-u：禁用分页显示，直接将整个文件内容输出到屏幕上。<br>+N：从文件中的第 N 行开始显示。<br><br>more -n filename.txt<br></code></pre></td></tr></table></figure><ul><li>head</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">head 显示文件的开头部分<br>-n NUM 或 --lines=NUM：显示文件的开头 NUM 行内容。<br>-c NUM 或 --bytes=NUM：显示文件的开头 NUM 字节内容。<br>-q 或 --quiet 或 --silent：不显示文件名作为头部提示。<br>-v 或 --verbose：始终显示文件名作为头部提示。<br><br>head -c 20 filename.txt<br></code></pre></td></tr></table></figure><ul><li>tail</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">tail 显示文件末尾内容<br>-n NUM 或 --lines=NUM：显示文件的末尾 NUM 行内容。<br>-f 或 --follow：持续监视文件末尾的新增内容，实时显示文件的变化。<br>-c NUM 或 --bytes=NUM：显示文件末尾的 NUM 字节内容。<br>-q 或 --quiet 或 --silent：不显示文件名作为头部提示。<br>-v 或 --verbose：始终显示文件名作为头部提示。<br>-s SEC 或 --sleep-interval=SEC：指定 tail -f 命令输出之间的等待时间，默认为 1 秒。<br><br>tail -f filename.txt<br></code></pre></td></tr></table></figure><ul><li>find</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">find 文件搜索<br>find [search_dir] [options] [expression]<br><br><br>find /path/to/search -iname &quot;filename&quot;  # -iname 忽略大小写<br>find /path/to/search -mtime +10<br>find /path/to/search -size +100M<br>find /path/to/search -type f  # f代表文件，d代表目录<br>find /path/to/search -type f -name &quot;*.txt&quot; -o -name &quot;*.md&quot;  //如果没有-o参数则必须同时<br>find /path/to/search -type f -mtime +30 -delete # 查找 /path/to/search 目录中所有的文件，并且修改时间大于30天进行删除<br></code></pre></td></tr></table></figure><ul><li>locate</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在系统上快速定位文件 通过查询系统中维护的文件名数据库来实现高效的文件查找</span><br>locate [OPTION]... PATTERN...<br><br>updatedb # 更新 locate 的数据库<br><span class="hljs-meta prompt_"># </span><span class="language-bash">locate在默认最小化安装的系统是不会自带的，需要额外安装，在mlocate包里面</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装该包以后，系统会自动创建一个定时任务，该任务每天执行一次，用于更新数据库</span><br></code></pre></td></tr></table></figure><ul><li>grep</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">globally search a regular expression and <span class="hljs-built_in">print</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">egrep 是 grep 命令的一个变种，通常在许多 Unix系统上也可以用 grep -E 来代替。它与普通的 grep 命令有所不同，主要在于支持扩展的正则表达式语法。</span><br>grep pattern file<br><br>-i：忽略大小写<br>-r 或 --recursive：递归搜索子目录<br>-n：显示行号<br>-v：反向匹配<br>-E：支持扩展正则表达式<br>-o：仅显示匹配的文本<br>-l：仅显示包含匹配的文件名<br>-c: 统计行号<br><br>grep example file.txt  #搜索文件中包含单词&quot;example&quot;的行<br>grep -r error . # 在当前目录及其子目录中搜索包含 &quot;error&quot; 的文件 <br>grep -v warning file.txt # 搜索文件中不包含 &quot;warning&quot; 的行<br>grep &#x27;^[0-9]&#x27; file.txt # 使用正则表达式搜索包含 ^[0-9] 开头的行（以数字开头的行）<br>grep -rE &#x27;pattern1|pattern2&#x27; directory # 递归搜索多个模式<br>grep -A5 examplie file.text   # 匹配examplie及后5行，包括自己<br>grep -B5 examplie file.text   # 匹配examplie及前5行，包括自己<br>grep -C5 examplie file.text   # 匹配examplie上下5行，包括自己<br></code></pre></td></tr></table></figure><ul><li>tar</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar cvf archive.tar file1 file2 file3 # 打包文件（不压缩）<br><span class="hljs-meta prompt_"># </span><span class="language-bash">c：创建新的打包文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">v：显示详细的过程（可选）</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">f archive.tar：指定打包后的文件名</span><br><br>tar cvzf archive.tar.gz directory # 压缩为 .gz 格式<br><span class="hljs-meta prompt_"># </span><span class="language-bash">z：使用 gzip 压缩</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">f archive.tar.gz：指定压缩后的文件名</span><br><br>tar cvjf archive.tar.bz2 directory # 压缩为 .bz2 格式<br><span class="hljs-meta prompt_"># </span><span class="language-bash">j：使用 bzip2 压缩</span><br><br>tar xvf archive.tar # 解压 .tar 文件<br><span class="hljs-meta prompt_"># </span><span class="language-bash">x：提取文件。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">v：显示详细的过程（可选）。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">f archive.tar：指定要解压的文件名</span><br><br>tar xvzf archive.tar.gz # 解压 .tar.gz 文件 <br><span class="hljs-meta prompt_"># </span><span class="language-bash">z：使用 gzip 解压</span><br><br>tar xvjf archive.tar.bz2 # 解压 .tar.bz2 文件<br><span class="hljs-meta prompt_"># </span><span class="language-bash">j：使用 bzip2 解压</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 tar 命令时，选项的顺序很重要，通常 f 应该是最后一个选项，并且后面紧跟文件名</span>  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">对于 gzip 和 bzip2，原始文件在压缩完成后会被删除，只留下压缩文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 unzip 命令解压 .zip 文件时，会将文件解压到当前目录</span><br></code></pre></td></tr></table></figure><ul><li><p>gzip</p><ul><li><code>gzip filename</code> 原文件会被删除</li></ul></li><li><p>bzip2</p><ul><li><code>bzip2 filename</code>  原文件会被删除</li><li><code>bzip2 -d filename.bz2</code></li></ul></li><li><p>zip</p><ul><li><code>zip -d filename.gz</code></li></ul></li><li><p>gunzip</p><ul><li><code>gunzip filename.gz</code></li></ul></li><li><p>bunzip2</p><ul><li><code>bunzip2 filename.bz2</code></li></ul></li><li><p>unzip</p><ul><li><code>unzip archive.zip</code></li></ul></li><li><p>WGET</p></li></ul><p>wget是一个非常强大的命令行下载工具,它可以用来下载文件、网页、目录等各种资源。它支持递归下载、断点续传、镜像网站等功能,非常适合自动化和批量下载任务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget [options] &lt;URL&gt;<br><br>-c: 断点续传<br>-r: 递归下载<br>-p: 下载页面所需的所有资源文件<br>-nH: 不创建主机名目录<br>-O &lt;filename&gt;: 指定输出文件名<br>-P &lt;directory&gt;: 指定输出目录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">只下载首页，但是不会下载附带的图片什么的</span><br>wget https://www.qq.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">等效于Windowns的另存为xxx</span><br>wget -O example.zip https://example.com/example.zip<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">下载这个目这个网站子目录里面的内容，一般用得比较少</span><br>wget -r https://www.example.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">就是会下载代码里面css这些，也用的比较少</span><br>wget -p https://www.example.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Wget 的一些其他高级用法包括:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">定时任务和计划任务: 利用 cron 等工具周期性地执行 Wget 命令</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">用户代理切换: 使用 -U 或 --user-agent 选项伪装成其他浏览器</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">认证和代理设置: 使用 -u/-p 或 --proxy-user/--proxy-password 选项</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">限速和并发: 使用 -l/--limit-rate 和 -p/--parallel 选项</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">部分文件有做防盗链配置，直接用wget命令无法直接下载，下载会提示403。但是使用浏览器点进去下载却是没问题的</span><br></code></pre></td></tr></table></figure><ul><li>CURL</li></ul><p>curl是一个强大的命令行工具,用于在客户端和服务器之间传输数据。它支持广泛的协议,包括 HTTP、HTTPS、FTP、SFTP<br>等,并提供了丰富的功能和选项。wget最主要的功能是下载，但是时间在运维中，也只是用到了下载这个功能，虽然curl也可以达到同样的目的，只是curl最主要的功能调试http服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl [options] &lt;URL&gt;<br><br>curl https://example.com<br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果首页是个html，则是把网页的html打印到控制台</span><br><br>curl -X POST https://example.com/api   <br><span class="hljs-meta prompt_">#</span><span class="language-bash">默认不加就是GET请求</span><br><br>curl -H &quot;Content-Type: application/json&quot; https://example.com/api<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加请求头:</span><br><br>curl -X POST -d &quot;param1=value1&amp;param2=value2&quot; https://example.com/api<br><span class="hljs-meta prompt_"># </span><span class="language-bash">发送 POST 请求并传递数据</span><br><br>curl -o output.html https://example.com<br><span class="hljs-meta prompt_">#</span><span class="language-bash">等效于把显示到控制台的内容，输出到文件</span><br><br>curl -L https://example.com<br><span class="hljs-meta prompt_">#</span><span class="language-bash">等于打开跳转的地址</span><br><br><br>curl -O https://example.com/file.zip<br><span class="hljs-meta prompt_">#</span><span class="language-bash">等效于wget 下载文件</span><br><br>curl -C - -O https://example.com/large_file.iso<br><span class="hljs-meta prompt_"># </span><span class="language-bash">断点续传</span><br><br>curl --proxy http://proxy.example.com:8080 https://example.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置代理</span><br><br><br>curl -I https://example.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示响应头  不显示网页，只显示http状态码</span> <br></code></pre></td></tr></table></figure><ul><li>NETSTAT</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat [options] # 查看本地监听的情况<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看活动连接</span><br>-a: 显示所有连接和监听端口<br>-n: 以数字形式显示地址和端口<br>-t: 仅显示 TCP 协议的连接<br>-u: 仅显示 UDP 协议的连接<br>-x: 仅显示 UNIX 域套接字连接<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看监听端口</span><br>-l: 仅显示正在监听的连接<br>-i: 显示网络接口信息<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看进程信息</span><br>-p: 显示与每个连接相关的进程 ID 和进程名称<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看统计信息</span><br>-s: 显示各种协议的统计信息<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看路由表</span><br>-r: 显示内核路由表<br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出格式控制</span><br>-e: 显示扩展信息<br>-A &lt;family&gt;: 仅显示指定地址族的连接<br>-o: 显示计时器信息<br><span class="hljs-meta prompt_"># </span><span class="language-bash">其他选项</span><br>-c: 持续刷新输出<br>-v: 显示版本信息<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示所有活动的 TCP 连接,包括远程地址、本地地址、状态和相关进程信息</span><br>netstat -antp<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看某个进程正在使用的网络连接</span><br><br>netstat -antp | grep 12345<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在网络连接里面有一个概念叫五元组或者简化版的四元组(源 IP 地址，源端口号，目标 IP 地址，目标端口号，协议类型)，一般除去协议类型就是四元组。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">比如:我从linux服务器，请求一个地址123.150.76.218:80 ，那么在网络连接里面就就存在类似下面的一个连接,当然这里还有更多的信息，这里不展开</span><br><br>[root@localhost ~]# netstat -lnap<br>Active Internet connections (servers and established)<br>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name              <br>tcp        0      0 192.168.179.102:50276   123.150.76.218:80       TIME_WAIT   -            <br><br>源IP：192.168.179.102<br>源端口：50276<br>目标IP:123.150.76.218<br>目标端口：80<br>协议：TCP<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">netstat 最常用的用法，就是使用本机查看网络连接情况 xxx可以是端口号，也可以进程号，也可以是进程名字</span><br>netstat -lnp |grep xxx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果某个进程无法访问网络，可以通过这样来检查网络连接，是否已经建立网络连接。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">具体细节涉及到TCP网络协议栈的问题，这里暂时不展开。</span><br>netstat -lanp |grep xxx<br></code></pre></td></tr></table></figure><ul><li>SS</li></ul><p>ss命令是 netstat 命令的替代品,它提供了与 netstat 类似的功能,但性能更优,输出更详细。ss 命令的基本语法如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">ss [options]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看活动连接</span><br>-a: 显示所有连接和监听端口<br>-t: 仅显示 TCP 协议的连接<br>-u: 仅显示 UDP 协议的连接<br>-x: 仅显示 UNIX 域套接字连接<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看监听端口</span><br>-l: 仅显示正在监听的连接<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看进程信息</span><br>-p: 显示与每个连接相关的进程 ID 和进程名称<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看统计信息</span><br>-s: 显示各种协议的统计信息<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看套接字选项</span><br>-o: 显示套接字选项<br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出格式控制</span><br>-n: 以数字形式显示地址和端口<br>-r: 以更易读的格式显示输出<br><span class="hljs-meta prompt_"># </span><span class="language-bash">其他选项</span><br>-i: 显示网络接口信息<br>-e: 显示扩展信息<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看系统上所有的 TCP 连接</span><br>ss -antp<br><br>ss -antp | grep 12345<br></code></pre></td></tr></table></figure><p>与 netstat 相比,ss 命令的优势在于:</p><ul><li><p>更快的执行速度,特别是在连接数量非常大的情况下。</p></li><li><p>输出更加详细和丰富,包括更多的连接信息和统计数据（信息也就更多，看起来也相对麻烦）。</p></li><li><p>支持更多的过滤和查询选项,可以更精确地定位问题。大部分问题其实也不需要用到那么多选项。</p></li><li><p>SU</p></li></ul><p>su 是在类 Unix 操作系统（如Linux、BSD等）中用于切换用户的命令。它的主要作用是让当前用户临时切换到另一个用户，可以是超级用户（root）或者系统中的其他用户。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">su [选项] [用户名]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">选项：可以包括 - 或 -l，表示在切换用户时同时加载该用户的环境变量。如果啥都不加，则是不加载环境变量(这个后面会单独拿出来讲)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">用户名：要切换到的目标用户，如果未指定用户名，则默认切换到超级用户（root）。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到 root 用户：最常见的用法是通过 su 命令切换到超级用户（root），以执行需要特权的操作，例如系统配置、软件安装等。在切换到 root 用户后，用户可以使用完整的系统管理权限进行操作。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到其他用户：除了切换到 root 用户外，su 命令还可以用于切换到系统中的其他用户。这对于测试和调试以及特定任务的执行很有用，例如测试用户环境、共享资源等。</span><br><br>su # 切换到 root 用户<br>su username # 切换到其他用户<br>su - username # 切换并加载用户环境变量 或者 su -l username<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">一种常见的安全策略是禁止root的ssh登录，然后使用普通用户ssh登录，然后开放su命令切换到root用户下进行对应的操作。在Linux进阶部分会有讲这部分内容。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">root的密码可以只开放给管理员，其他人使用普通账号使用登录系统。</span><br></code></pre></td></tr></table></figure><ul><li>sudo</li></ul><p>sudo 是类 Unix 系统（如Linux、BSD等）中的一个命令，用于允许授权用户以另一个用户的身份执行命令。它的名称来源于”Superuser Do”<br>（超级用户执行），用于执行需要超级用户权限（通常是 root 用户权限）的任务，而无需直接切换到 root 用户。</p><ul><li>权限管理：<ul><li>临时提升权限：允许普通用户在需要时以特权用户（通常是 root）的身份执行命令，执行完毕后权限自动降低为普通用户。</li><li>授权控制：管理员可以通过配置 sudoers 文件详细控制哪些用户可以以哪些用户的身份执行哪些命令，以及在哪些主机上执行。</li></ul></li><li>安全性：<ul><li>审计：sudo 的使用可以被记录和审计，管理员可以了解哪些用户在何时执行了哪些特权操作，有助于系统安全和问题追踪。</li><li>限制权限：相比直接使用 root 用户，sudo 允许更细粒度地控制用户对系统的访问权限，减少了误操作和滥用特权的风险。</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo command<br><br>sudo -u username command # 以其他用户身份执行<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编辑文件</span><br>sudoedit file<br>sudo vi file  //也可以这样<br><br>sudo yum updae # root角色执行命令<br></code></pre></td></tr></table></figure><ul><li>密码验证：默认情况下，sudo 会要求用户输入自己的密码来验证身份。</li><li>安全配置：应当小心配置 sudoers 文件，确保只有可信用户可以执行特权操作，并限制执行的具体命令和参数。</li><li>不建议直接使用 root 用户：推荐使用 sudo 来执行需要特权的任务，以避免潜在的安全风险和操作失误。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">允许特定用户执行sudo命令</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Allow root to run any commands anywhere</span> <br>root  ALL=(ALL)   ALL<br><span class="hljs-meta prompt_">#</span><span class="language-bash">需要添加这行，user01才有使用sudo命令的权限</span><br>user01  ALL=(ALL)       ALL  <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">免密使用sudo</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Allow root to run any commands anywhere</span></span> <br>root  ALL=(ALL)   ALL<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改成这样，就可以免密使用sudo命令</span><br>user01  ALL=(ALL)       NOPASSWD:ALL<br></code></pre></td></tr></table></figure><ul><li>UMASK</li></ul><p>umask 是一个 Unix&#x2F;Linux 的 shell 命令，用来设置文件创建时的默认权限。这是一个设置了用户文件和目录创建模式的掩码值。</p><p>在 Unix&#x2F;Linux 系统中，当创建新的文件或目录时，系统会根据 umask 值来设置新文件或目录的默认权限。这个 umask 值通常是一个 4<br>位的八进制数，如 0022、0007 等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">umask 命令的使用格式为：umask [选项]... [模式]。<br>- 如果不带任何参数，umask命令会显示当前的 umask 值。<br>- 如果带有模式参数，umask 命令会设置 umask 值为指定的模式。<br>一些常见的 umask 值：<br>- umask 0022：文件的默认权限是 644（rw-r--r--），目录的默认权限是 755（rwxr-xr-x）。<br>- umask 0007：文件的默认权限是 660（rw-rw----），目录的默认权限是 770（rwxrwx---）。<br>- umask 0077：文件的默认权限是 600（rw-------），目录的默认权限是 700（rwx------）。<br><br>需要注意的是，umask 是一个掩码值，它的作用是屏蔽掉（即禁用）某些权限，而不是直接设置权限。所以，要得到文件或目录的实际默认权限，需要用基础权限（通常是 777 对于目录，666 对于文件）减去 umask 值。<br>正常Centos系统的umask是0022，一般读法是022，第一个0会被省略，一般也不需要去修改。该参数默认在/etc/profile,这个也是环境变量最常用的配置文件之一(后期会单独出环境变量的介绍)<br></code></pre></td></tr></table></figure><ul><li>chmod</li></ul><p>chmod 命令是用于在Unix和类Unix操作系统（如Linux）上改变文件或目录的权限的命令。它是 “change mode”<br>的缩写，允许用户设定文件或目录的读、写、执行权限，以及特殊权限（如 SUID、SGID、Sticky bit）等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod options permissions filename<br><br>options：可选，用于指定特定的操作或设置。<br>permissions：设定的权限模式，可以使用数字形式（如 755）或符号形式（如 u=rwx,g=rx,o=rx）。<br>filename：需要改变权限的文件或目录名。<br><br>-R：递归的应用权限设置到指定目录下的所有文件和子目录。<br>-v：显示详细信息，指示 chmod 所做的每个修改。<br>-c：只显示实际改变了权限的文件。<br><br>数字形式权限：<br>数字形式权限由三个八进制数字构成，每个数字代表一组权限（所有者、所属组、其他用户）。每个数字可以是以下几种权限的组合：<br>4：读权限（r）<br>2：写权限（w）<br>1：执行权限（x）<br><br>计算方式为将所需权限的数字相加。例如：<br>7：读（4）+ 写（2）+ 执行（1）<br>6：读（4）+ 写（2）<br>5：读（4）+ 执行（1）<br>4：只读（4）<br>0：无权限<br><br>符号形式权限：<br>符号形式允许更精细地控制权限，主要由以下几个部分组成：<br>u：表示文件所有者（user）<br>g：表示文件所属组（group）<br>o：表示其他用户（others）<br>a：表示所有用户（user、group、others）<br><br>权限部分可以使用以下符号：<br>+：增加权限<br>-：移除权限<br>=：设定权限<br><br>chmod 744 example.txt # 给文件 example.txt 设置所有者具有读写执行权限，所属组和其他用户具有只读权限<br>chmod u+w example.txt # 为文件 example.txt 添加用户写权限<br>chmod -R u+w dir # 为 dir 添加用户写权限，并且递归应用到子目录<br>chmod u+s script.sh # 为 script.sh 文件设置 SUID 权限<br>chmod g+s data.txt # 为 data.txt 文件设置 SGID 权限<br></code></pre></td></tr></table></figure><ul><li>chown</li></ul><p>chown 命令用于更改文件或目录的所有者（owner）。它允许系统管理员或文件所有者将文件或目录的所有权转移给其他用户或组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">chown [options] new_owner[:new_group] filename<br><br>options：可选，用于指定特定的操作或设置。<br>new_owner：新的所有者用户名或用户ID。<br>new_group：新的所属组名或组ID，可选。如果未指定，则文件的所属组不变。<br>filename：需要改变所有者的文件或目录名。<br><br>-v：显示详细信息，显示实际更改了的每个文件。<br>-c：只显示实际更改了的文件数量，而不显示详细信息。<br>--reference=RFILE：从参考文件 RFILE 复制所有者和所属组的信息到目标文件或目录。<br><br>chown user1 file.txt # 更改文件所有者<br>chown user2:group2 file.txt # 同时更改文件所有者和所属组<br>chown -R user3:group3 directory/ # 递归地更改目录及其所有子目录和文件的所有者<br><br>chown主要用来修改文件所有者，同时修改组，但是还有一个chgrp命令可以单独修改组权限<br></code></pre></td></tr></table></figure><ul><li><p>history</p></li><li><p>显示命令历史：直接在 Bash 终端中输入 history 命令即可显示当前会话中执行过的命令列表，每行一个命令，序号从小到大排列。</p></li><li><p>使用序号重新执行命令：可以使用 ! 加上命令的序号来重新执行特定的命令。</p></li><li><p>搜索历史记录：可以使用 Ctrl+R 键来搜索历史记录中的命令。按下 Ctrl+R 后，输入关键字（如 vi），Bash 将会显示最近使用过的包含该关键字的命令，按下<br>Enter 可以执行搜索到的命令。</p></li><li><p>清空整个历史记录：可以使用 history -c 命令清空当前 shell 会话的所有历史记录。</p></li><li><p>保存历史记录到文件：使用 history -w 命令将当前的命令历史记录保存到默认的历史文件（通常是 ~&#x2F;.bash_history）中，这样即使关闭<br>shell 会话，历史记录也能被保留</p></li></ul><p>总结</p><ol><li>我们通常通过该命令分析曾经执行过的命令，来确定服务器的某些状态是谁执行的，比如谁在什么时候删除了文件，修改了时间等操作。</li><li>非正常退出是不会保存到历史记录的，必须是正常退出才会自动保存当前shell执行的命令。</li><li>不同的用户的histroy是独立的 ，因为这个文件是被记录在家目录.bash_history 文件。</li><li>快速生成1000条的历史命令。 for ((i&#x3D;1; i&lt;&#x3D;1000; i++)); do echo “echo Command $i”; history -s “echo Command $i”; done</li><li>最常用的配置是修改历史命令数量，和添加时间戳及用户功能。<br>HISTSIZE&#x3D;10000<br>export HISTTIMEFORMAT&#x3D;”%F %T $(whoami)”</li><li>ctrl+r 搜索以后，如果这个命令被执行过多次，可以继续用ctrl+r 继续向前搜索。</li></ol><ul><li>echo</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo [OPTION] [STRING]<br><br>-n 不会自动换行，输出后不添加换行符。<br>-e 识别转义字符，如 \n 表示换行符。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出一条简单的消息</span><br>echo &quot;Hello, World!&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出变量的值</span><br>name=&quot;Alice&quot;<br>echo &quot;Hello, $name&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">不换行输出</span><br>echo -n &quot;This is a &quot;<br>echo &quot;single line.&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">识别转义字符</span><br>echo -e &quot;First line\nSecond line&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出特殊字符</span><br>echo &quot;The cost is \\$10&quot;   # 输出：The cost is \$10<br></code></pre></td></tr></table></figure><p>应用场景</p><ul><li><p>在脚本中用于输出调试信息或提示消息。</p></li><li><p>用于打印变量值，方便调试和查看内容。</p></li><li><p>结合重定向符号（&gt; 和 &gt;&gt;）将输出内容写入文件，后面将单独将重定向。</p></li><li><p>date</p></li></ul><p>在Linux基础软件-ntp里面我们讲过在没有ntp或者chrony的时候可以通过date来设置时间。</p><p>date 命令在Linux和Unix系统中用于显示或设置系统的日期和时间。它可以输出当前的日期时间，或者根据指定的格式来格式化日期时间的输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">date [OPTION]... [+FORMAT]<br><br>-d, --date=STRING：显示给定日期时间的格式。<br>-u, --utc, --universal：显示UTC时间（协调世界时）。<br>-s, --set=STRING ：设置时间或者日期。<br>+%FORMAT：用指定格式输出日期时间。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">格式化字符串</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在 +FORMAT 中，可以使用以下特殊的格式化字符串来定义输出的日期时间格式：</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">Y：四位数的年份（如：2024）。</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">m：两位数的月份（01 到 12）。</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">d：两位数的日（01 到 31）。</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">H：24小时制的小时数（00 到 23）。</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">M：两位数的分钟数（00 到 59）。</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">S：秒数（00 到 60）。</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">Z：时区（例如：UTC、GMT、PST）。</span><br></code></pre></td></tr></table></figure><p>应用场景</p><ul><li><p>在脚本中记录日志，使用 date 命令添加时间戳。</p></li><li><p>用于文件名的时间戳，例如备份文件。</p></li><li><p>调试和分析日志文件时，确定特定事件发生的时间。</p></li><li><p>在需要精确计时和定期任务的自动化脚本中使用。</p></li><li><p>alias</p></li></ul><p>我们曾经说过有一个命令ll，实际上是ls -l。他们的实现方式实际就是alias。当然还有很多命令默认都是有alias的。</p><p>alias 命令用于在命令行中创建命令别名，允许用户为常用命令或命令序列定义简短的替代名称。这样做可以显著提高命令行操作的效率和便捷性。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">alias [name[=value] ...]<br><br>alias ll=&#x27;ls -l&#x27;<br><br>alias grep=&#x27;grep --color=auto&#x27;<br><br>alias # 查看当前定义的所有别名<br><br>unalias ll # 删除别名<br></code></pre></td></tr></table></figure><p>永久生效</p><ul><li>在终端中定义的别名仅在当前会话中有效，关闭终端后会丢失。如果希望别名永久生效，可以将其添加到用户的 shell 配置文件中，比如：</li><li>对于 bash shell，可以将别名定义添加到 ~&#x2F;.bashrc 文件中。</li><li>然后使用 source ~&#x2F;.bashrc 命令使其立即生效，或者重新启动终端。</li></ul><p>应用场景</p><ul><li><p>简化命令行操作： 将常用的复杂命令或长命令序列定义为简单易记的别名，减少输入量。</p></li><li><p>增强命令功能： 向命令添加默认参数或选项，以便于特定需求的快速调用。</p></li><li><p>提高工作效率： 根据个人工作流程和使用习惯优化命令行环境，使得操作更高效。</p></li><li><p>echo</p></li></ul><p>echo 是在Linux和Unix系统中常用的命令，主要用于在终端输出指定的文本或变量值。它也可以用来打印简单的文本消息或变量的值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo [OPTION] [STRING]<br><br>OPTION 可选，用于控制输出格式或行为。<br>STRING 通常是要输出的文本或变量。<br><br>-n 不会自动换行，输出后不添加换行符。<br>-e 识别转义字符，如 \n 表示换行符<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出一条简单的消息</span><br>echo &quot;Hello, World!&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出变量的值</span><br>name=&quot;Alice&quot;<br>echo &quot;Hello, $name&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">不换行输出</span><br>echo -n &quot;This is a &quot;<br>echo &quot;single line.&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">识别转义字符</span><br>echo -e &quot;First line\nSecond line&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出特殊字符</span><br>echo &quot;The cost is \\$10&quot;   # 输出：The cost is \$10<br></code></pre></td></tr></table></figure><p>应用场景</p><ul><li><p>在脚本中用于输出调试信息或提示消息。</p></li><li><p>用于打印变量值，方便调试和查看内容。</p></li><li><p>结合重定向符号（&gt; 和 &gt;&gt;）将输出内容写入文件，后面将单独将重定向。</p></li><li><p>date</p></li></ul><p>date 命令在Linux和Unix系统中用于显示或设置系统的日期和时间。它可以输出当前的日期时间，或者根据指定的格式来格式化日期时间的输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">date [OPTION]... [+FORMAT]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">OPTION 是可选的选项，用于控制输出格式或行为。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">+FORMAT 是用于指定日期时间输出格式的字符串。</span><br><br>-d, --date=STRING：显示给定日期时间的格式。<br>-u, --utc, --universal：显示UTC时间（协调世界时）。<br>-s, --set=STRING ：设置时间或者日期。<br>+%FORMAT：用指定格式输出日期时间。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">格式化字符串</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在 +FORMAT 中，可以使用以下特殊的格式化字符串来定义输出的日期时间格式：</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">Y：四位数的年份（如：2024）。</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">m：两位数的月份（01 到 12）。</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">d：两位数的日（01 到 31）。</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">H：24小时制的小时数（00 到 23）。</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">M：两位数的分钟数（00 到 59）。</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">S：秒数（00 到 60）。</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">Z：时区（例如：UTC、GMT、PST）。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示当前日期时间</span><br>date<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">以特定格式输出当前日期时间</span><br>date +&quot;%Y-%m-%d %H:%M:%S&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示UTC时间</span><br>date -u<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置日期</span><br>date -s 2024-08-15<br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置时间</span><br>date -s 00:54:00<br></code></pre></td></tr></table></figure><p>应用场景</p><ul><li><p>在脚本中记录日志，使用 date 命令添加时间戳。</p></li><li><p>用于文件名的时间戳，例如备份文件。</p></li><li><p>调试和分析日志文件时，确定特定事件发生的时间。</p></li><li><p>在需要精确计时和定期任务的自动化脚本中使用。</p></li><li><p>top</p></li></ul><p>top 命令是一个功能强大的实时进程监视器，在Linux和Unix系统中广泛用于监控系统的运行情况和进程活动。它以交互式的方式显示系统当前的进程列表，并实时更新各个进程的相关指标，如CPU使用率、内存使用率等。</p><ul><li>第一行：全局信息</li><li>第二行：进程概述</li><li>第三行：cpu概述</li><li>第四&#x2F;五行：内存概述：</li><li>进程列表</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs shell">top - 11:34:50 up 3 days, 18:49,  2 users,  load average: 0.04, 0.05, 0.01<br><br>11:34:50：当前时间。<br>up 3 days, 18:49：系统运行时间，从上次开机时间<br>2 users：当前登录用户数，Linux的多用户可以在这里体现。<br>load average: 0.04, 0.05, 0.01：系统负载，分别代表1分钟、5分钟、15分钟的平均负载。非常重要的指标，这里有一个简单的计算方式：cpu如果有多少核，这里的负载就应该略低于这个cpu的核数量，才算是正常的。<br><br>Tasks: 210 total,   1 running, 209 sleeping,   0 stopped,   0 zombieTasks: 210 total,   1 running, 209 sleeping,   0 stopped,   0 zombie<br><br>210 total：总进程数。<br>1 running：正在运行的进程数，这个指标和上面的load有相似的计算方法，偶尔的波动不算，持续高才算异常。<br>209 sleeping：休眠中的进程数。<br>0 stopped：停止的进程数。<br>0 zombie：僵尸进程数，这个后面会单独来讲。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">Cpu(s):  2.3 us,  0.2 sy,  0.0 ni, 97.5 <span class="hljs-built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><br>us（User Time）：表示用户空间占用 CPU 的时间占比为 2.3%。一般而言就是业务使用。<br>sy（System Time）：系统空间占用 CPU 的时间占比为 0.2%。一般而言就是系统使用，正常这个值都应该很低才低。<br>ni（Nice Time）：优先级调整过的进程的用户态占用 CPU 时间比例为 0.0%。<br>id（Idle Time）：CPU 空闲时间占比为 97.5%，说明大部分时间 CPU 没有进行实质性工作，处于等待任务分配的状态。<br>wa（Waiting for I/O to Complete）：CPU 等待 I/O 操作完成的时间占比为 0.0%，这个指标也应该比较低才是正常的。<br>hi（Hardware Interrupt Time）：处理硬件中断占用的 CPU 时间比例为 0.0%。<br>si（Software Interrupt Time）：处理软件中断占用的 CPU 时间比例为 0.0%。<br>st（Steal Time，虚拟化环境下）：在虚拟化场景中，被其他虚拟机占用的 CPU 时间比例为 0.0%。<br><br>KiB Mem :  1798728 total,    83520 free,   179256 used,  1535952 buff/cache<br><br>total（总内存）：系统总的物理内存为 1798728 KiB。<br>free（空闲内存）：当前未被使用的内存有 83520 KiB。<br>used（已使用内存）：已经被分配给各种进程和系统内核等的内存为 179256 KiB。Linux的特殊性就是随着他的使用时间增加，他会无限接近于总内存，这个是正常的。除了应用程序使用外，其他都给了buff和cache来提高Linux的速度。<br>buff/cache（缓冲区和缓存）：用于磁盘缓存和各种缓冲区的内存为 1535952 KiB，这些内存可以在需要时快速释放给其他应用程序使用。<br><br>KiB Swap:        0 total,        0 free,        0 used.  1431816 avail Mem<br><br>total（总交换空间）：交换空间总量为 0 KiB，交换空间通常用于当物理内存不足时，将部分内存数据暂存到磁盘的特定区域。<br>free（空闲交换空间）：当前未使用的交换空间为 0 KiB。<br>used（已使用交换空间）：已使用的交换空间为 0 KiB，说明目前没有进行内存与交换空间之间的数据交换操作。<br>avail Mem（可用内存）：当前系统可供应用程序立即使用的内存为 1431816 KiB，这部分内存包括了空闲内存以及可以快速从缓冲区和缓存中回收的部分内存。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进程列表</span><br>PID  USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND<br>1083 root      20   0  194472  12488   9612 S   1.0   0.3   0:00.59 systemd-journal<br>1254 root      20   0  240636  16716  12684 S   0.7   0.4   0:00.32 snapd<br><br>PID：进程ID。<br>USER：进程所有者。<br>PR：进程优先级。<br>NI：进程的nice值。<br>VIRT：虚拟内存使用量。<br>RES：物理内存使用量。<br>SHR：共享内存大小。<br>S：进程状态（R表示运行，S表示休眠，Z表示僵尸进程等）。<br><span class="hljs-meta prompt_">%</span><span class="language-bash">CPU：CPU使用率，这个地方是按照单核cpu计算的，也就是会出现占用200%的情况，就等于使用了2核cpu。</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">MEM：内存使用率。</span><br>TIME+：累计CPU时间。<br>COMMAND：进程的命令名称。<br></code></pre></td></tr></table></figure><h4 id="linux文件系统相关"><a href="#linux文件系统相关" class="headerlink" title="linux文件系统相关"></a>linux文件系统相关</h4><blockquote><p>linux目录及含义</p><p>相对路径 绝对路径的含义：略</p><p>目录结构大部分情况下是相似的，具体可能会根据不同的发行版有所不同。</p><p>Linux与Windows目录区别：Linux目录:一切从根开始，形似一个倒挂的大树。Windows下面目录:从C盘或D盘开始</p></blockquote><ul><li>&#x2F; 根目录</li><li>&#x2F;root root用户的家目录</li><li>&#x2F;bin 二进制目录，存放系统的基本命令，如ls、cd、rm等</li><li>&#x2F;boot 启动目录，有点类似win的启动光盘</li><li>&#x2F;etc 系统服务配置文件的目录,存放系统，服务的配置</li><li>&#x2F;lib &#x2F;lib64 库文件目录，存放系统动态链接库和内核模块</li><li>&#x2F;mnt 挂载目录，用于挂载其他文件系统</li><li>&#x2F;opt 可选的应用软件包目录，一些附加的应用程序会放在这里</li><li>&#x2F;proc 虚拟文件系统目录，用于系统核心，例如进程和系统信息</li><li>&#x2F;sbin 系统二进制文件目录，存放需要超级用户权限才能运行的二进制文件</li><li>&#x2F;tmp 临时目录，通常重启以后，里面的内容都会删除</li><li>&#x2F;usr 用户资源目录，通常重启是应用程序所在目录</li><li>&#x2F;var 可变目录，比如常用的日志，默认软件的数据目录</li><li>&#x2F;loft_found 临时目录，一般用不到</li><li>&#x2F;home 用户家目录<ul><li>&#x2F;home&#x2F;user1</li><li>&#x2F;home&#x2F;user2</li></ul></li><li>&#x2F;dev 设备文件目录，存放硬件设备文件<ul><li>&#x2F;dev&#x2F;hd[a-d] IDE硬盘机</li><li>&#x2F;dev&#x2F;sd[a-p] SCSI&#x2F;SATA&#x2F;USB 硬盘机</li><li>&#x2F;dev&#x2F;sd[a-p] USB 快闪碟</li><li>&#x2F;dev&#x2F;fd[0-1] 软盘驱动器</li><li>&#x2F;dev&#x2F;lp[0-2] 25针打印机</li><li>&#x2F;dev&#x2F;usb&#x2F;lp[0-15] USB打印机</li><li>&#x2F;dev&#x2F;usb&#x2F;mouse[0-15] USB 鼠标</li><li>&#x2F;dev&#x2F;psaux PS2 鼠标</li><li>&#x2F;dev&#x2F;cdrom 当前 CDROM&#x2F;DVDROM</li><li>&#x2F;dev&#x2F;mouse 当前的鼠标</li><li>&#x2F;dev&#x2F;ht0 IDE磁带机</li><li>&#x2F;dev&#x2F;st0 SCSI磁带机</li><li>目前IDE接口类型基本上很少见了，常见的是SAS和SATA</li></ul></li></ul><blockquote><p>挂载：利用一个目录当成进入点，将磁盘分区槽的数据放置在该目录下。就是进入该目录就可以读取该分割槽的意思</p></blockquote><h4 id="linux磁盘系统相关"><a href="#linux磁盘系统相关" class="headerlink" title="linux磁盘系统相关"></a>linux磁盘系统相关</h4><p>在Windows里面我们常见的涉及到磁盘那是C盘，D盘，E盘等。但是在这些盘符到底是在一个硬盘还是几个硬盘呢？如果我们不到磁盘管理里面看是看不出来的，当然作为普通人其实也并不需要关心到底是几个硬盘。但是在Linux里面磁盘作为一种核心的资源，我们必须要对他足够了解才行。</p><p>在前面的Linux目录介绍里面我们说过&#x2F;dev目录就是硬件目录，如果服务器里面有硬盘，当然也就在这里形成一个类似的目录。在Linux里面我们一般用&#x2F;dev&#x2F;sda及&#x2F;dev&#x2F;sdb来代表一个独立的磁盘。</p><p>然后把一个磁盘&#x2F;dev&#x2F;sda分成一个或者多个分区，然后分别挂载到不同的目录下，这个分区如果挂载到Linux目录上面，就基本等效于Windows的盘符，只是Windows的盘符是C盘，D盘，而Linux则是下面这种目录树结构。</p><p>&#x2F;dev&#x2F;sda1 放到 &#x2F;boot 目录</p><p>&#x2F;dev&#x2F;sda2 放到 &#x2F; 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">这是一个本地虚拟机的磁盘,只有一个盘/dev/sda,大小是20G.其中/boot目录500M,根目录<span class="hljs-string">&quot;/&quot;</span>使用了剩余的19.5G.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">当然最下面的还有个设备/dev/sro 其实就是光盘,本地是iso文件,但是如果我要使用,还必须把他挂载到一个目录才可以使用.</span><br>[root@localhost ~]# lsblk<br>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda      8:0    0   20G  0 disk <br>├─sda1   8:1    0  500M  0 part /boot<br>└─sda2   8:2    0 19.5G  0 part /<br>sr0     11:0    1  942M  0 rom<br></code></pre></td></tr></table></figure><p>介绍2个命令，一个是上面已经用到lsblk，我们用他查看有多少个磁盘，以及分区情况。如果磁盘故障或者其他原因未识别到，这里也不会显示。在实际运维中也可用于判断磁盘是否异常。另外一个命令是fdisk,他就会显示完整的路径,日常使用看个人习惯即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# fdisk -l<br>磁盘 /dev/sda：21.5 GB, 21474836480 字节，41943040 个扇区<br>Units = 扇区 of 1 * 512 = 512 bytes<br>扇区大小(逻辑/物理)：512 字节 / 512 字节<br>I/O 大小(最小/最佳)：512 字节 / 512 字节<br>磁盘标签类型：dos<br>磁盘标识符：0x000bb97e<br><br>   设备 Boot      Start         End      Blocks   Id  System<br>/dev/sda1   *        2048     1026047      512000   83  Linux<br>/dev/sda2         1026048    41943039    20458496   83  Linux<br></code></pre></td></tr></table></figure><p>在比较早的时候，磁盘有一种接口叫IDE，在Linux服务器里面的设备命名：&#x2F;dev&#x2F;hda，&#x2F;dev&#x2F;hdb。</p><p>目前主流的SATA接口，在Linux服务器里面的设备命名：&#x2F;dev&#x2F;sda,&#x2F;dev&#x2F;sdb。</p><p>目前高端服务器里面还有带有NVME接口的，在Linux服务器里面的设备命名: &#x2F;dev&#x2F;nvme0n1，&#x2F;dev&#x2F;nvme0n2。</p><p>目前云厂商使用的云硬盘，由于都是分布式的，在Linux服务器里面的设备命名:  &#x2F;dev&#x2F;vda&#x2F;，&#x2F;dev&#x2F;vdb。</p><p><strong>创建分区</strong></p><p>基于已经有一块磁盘的情况下，我们在通过虚拟机界面添加了一块硬盘(过程这里就不介绍)，可以看到2个硬盘分别是sda和sdb两块磁盘。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# lsblk<br>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda      8:0    0   20G  0 disk <br>├─sda1   8:1    0  500M  0 part /boot<br>└─sda2   8:2    0 19.5G  0 part /<br>sdb      8:16   0   20G  0 disk <br>sr0     11:0    1  942M  0 rom<br></code></pre></td></tr></table></figure><p>1.开始分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# fdisk /dev/sdb<br>欢迎使用 fdisk (util-linux 2.23.2)。<br><br>更改将停留在内存中，直到您决定将更改写入磁盘。<br>使用写入命令前请三思。<br><br>Device does not contain a recognized partition table<br>使用磁盘标识符 0x898f0efa 创建新的 DOS 磁盘标签。<br><br>命令(输入 m 获取帮助)：<br></code></pre></td></tr></table></figure><p>2.进入选择菜单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">输入m以后进入选择菜单,大家可以直接根据英文翻译就能看出来是什么意思</span><br><br>命令(输入 m 获取帮助)：m<br>命令操作<br>   a   toggle a bootable flag<br>   b   edit bsd disklabel<br>   c   toggle the dos compatibility flag<br>   d   delete a partition<br>   g   create a new empty GPT partition table<br>   G   create an IRIX (SGI) partition table<br>   l   list known partition types<br>   m   print this menu<br>   n   add a new partition<br>   o   create a new empty DOS partition table<br>   p   print the partition table<br>   q   quit without saving changes<br>   s   create a new empty Sun disklabel<br>   t   change a partition&#x27;s system id<br>   u   change display/entry units<br>   v   verify the partition table<br>   w   write table to disk and exit<br>   x   extra functionality (experts only)<br></code></pre></td></tr></table></figure><p>3.创建新分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">输出n以后,将进入分区界面</span><br><br>命令(输入 m 获取帮助)：n<br>Partition type:<br>   p   primary (0 primary, 0 extended, 4 free)<br>   e   extended<br>Select (default p):<br></code></pre></td></tr></table></figure><p>这里涉及到2个概念，就是主分区和扩展分区。</p><p>主分区：主分区是直接位于硬盘上的一个分区，每个主分区都有一个唯一的编号，最多能分4个。比如分出来的&#x2F;dev&#x2F;sda1，&#x2F;dev&#x2F;sda2这样就是使用2个分区。并且每个主分区都可以包含一个文件系统。</p><p>扩展分区：但是如果我需要分更多的分区，就必须引用扩展分区，然后在扩展分区里面再划分更多的分区。不过现在用的已经比较少了。</p><p>在分区细节的时候，这里有一个扇区的概念，那什么是扇区呢？可以简单理解就是把一个磁盘从物理上分成了多少份，然后每份固定大小，如果要定义一个10g大小，就需要用10G&#x2F;每个扇区大小。</p><p>比如我们用到的磁盘大小是20G,大概就是4096000个扇区，每个扇区就是512字节，如果我们再分区的时候需要分成2个，第一个5G,那他的扇区就是从2048到1000000扇区，然后剩余15G就是从1000001到4096000扇区，这个数字比较大不用太精确，理解到了就可以。当然还有些保留扇区，如果有兴趣可以专门查询磁盘相关资料。</p><p>扇区的概念其实主要是在机械硬盘时代，在SSD时代，已经没有严格意义上的扇区。</p><p>传统的机械硬盘都是有一个马达的，如果马达转速越快，找到数据的速度就越快，这个概念在磁盘里面叫寻址。衍生出来的磁盘的转速就有了以下几个转速：5400转，主要用于早期的笔记本；7200转，就是市面上最常见的普通硬盘；10000转及15000转就是服务器专用的SAS硬盘</p><p>在计算机发展的早期，硬盘的大小是很小的，所以历史上采用的分区表MBR由于技术限制，最大就只能支持到2T，我们上一章用的fdisk划分出来的分区就是采用的MBR分区表.</p><p>后来的计算机发展太快，MBR分区已经无法满足要求，GPT分区就出来了。GPT分区一般用parted命令来进行分区。</p><p>4.确认分区细节</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">如果只分一个分区,这里可以一路回车,或者根据提示输出对应的数字</span><br><br>Select (default p): p<br>分区号 (1-4，默认 1)：1<br>起始 扇区 (2048-41943039，默认为 2048)：<br>将使用默认值 2048<br>Last 扇区, +扇区 or +size&#123;K,M,G&#125; (2048-41943039，默认为 41943039)：<br>将使用默认值 41943039<br>分区 1 已设置为 Linux 类型，大小设为 20 GiB<br>命令(输入 m 获取帮助)：<br></code></pre></td></tr></table></figure><p>5.保存分区表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">到这里个界面的时候,如果敲太快回车,就会退出,需要注意</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果你还记得前面的提示,可以直接按<span class="hljs-string">&quot;w&quot;</span>保存分区表</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果你不记得前面的提示,就再次按<span class="hljs-string">&quot;m&quot;</span>,然后根据提示选择</span><br><br>命令(输入 m 获取帮助)：W<br>The partition table has been altered!<br><br>Calling ioctl() to re-read partition table.<br>正在同步磁盘。<br></code></pre></td></tr></table></figure><p>6.分区完成</p><p>到这里我们分区做完了，但是这个时候我们还不能使用这个磁盘，可以看到同sda对比，他还没挂载到对应的目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# lsblk<br>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda      8:0    0   20G  0 disk <br>├─sda1   8:1    0  500M  0 part /boot<br>└─sda2   8:2    0 19.5G  0 part /<br>sdb      8:16   0   20G  0 disk <br>└─sdb1   8:17   0   20G  0 part <br>sr0     11:0    1  942M  0 rom<br></code></pre></td></tr></table></figure><p><strong>GPT分区</strong></p><p>1.准备1个3T硬盘</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# lsblk<br>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda      8:0    0   20G  0 disk <br>├─sda1   8:1    0  500M  0 part /boot<br>└─sda2   8:2    0 19.5G  0 part /<br>sdb      8:16   0   20G  0 disk <br>└─sdb1   8:17   0   20G  0 part <br>sdc      8:32   0    3T  0 disk <br>sr0     11:0    1  942M  0 rom<br></code></pre></td></tr></table></figure><p>2.开始分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# parted /dev/sdc<br>GNU Parted 3.1<br>使用 /dev/sdc<br>Welcome to GNU Parted! Type &#x27;help&#x27; to view a list of commands.<br>(parted)<br></code></pre></td></tr></table></figure><p>3.打印磁盘信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">(parted) print                                                            <br>Model: VMware, VMware Virtual S (scsi)<br>Disk /dev/sdc: 3221GB<br>Sector size (logical/physical): 512B/512B<br>Partition Table: msdos<br>Disk Flags: <br><br>Number  Start  End  Size  Type  File system  标志<br><br>(parted)<br></code></pre></td></tr></table></figure><p>4.创建GPT分区表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">(parted) mklabel gpt                                                      <br>警告: The existing disk label on /dev/sdc will be destroyed and all data on this disk will be lost. Do you want to continue?<br>是/Yes/否/No? yes                                                         <br>(parted) print                                                            <br>Model: VMware, VMware Virtual S (scsi)<br>Disk /dev/sdc: 3221GB<br>Sector size (logical/physical): 512B/512B<br>Partition Table: gpt<br>Disk Flags: <br><br>Number  Start  End  Size  File system  Name  标志<br><br>(parted)<br></code></pre></td></tr></table></figure><p>5.创建分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建分区使用全部磁盘内容，也可以根据实际情况选择。</span><br><br>(parted) mkpart primary 0% 100%                                           <br>(parted) print                                                            <br>Model: VMware, VMware Virtual S (scsi)<br>Disk /dev/sdc: 3221GB<br>Sector size (logical/physical): 512B/512B<br>Partition Table: gpt<br>Disk Flags: <br><br>Number  Start   End     Size    File system  Name     标志<br> 1      1049kB  3221GB  3221GB               primary<br><br>(parted) quit                                                             <br>信息: You may need to update /etc/fstab.<br></code></pre></td></tr></table></figure><p>6.分区完成</p><p>到这里我们分区做完，但是这个时候我们还不能使用这个磁盘，目前使用MBR和GPT的分区都是只属于分区完成，未使用的状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# lsblk<br>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda      8:0    0   20G  0 disk <br>├─sda1   8:1    0  500M  0 part /boot<br>└─sda2   8:2    0 19.5G  0 part /<br>sdb      8:16   0   20G  0 disk <br>└─sdb1   8:17   0   20G  0 part <br>sdc      8:32   0    3T  0 disk <br>└─sdc1   8:33   0    3T  0 part <br>sr0     11:0    1  942M  0 rom<br></code></pre></td></tr></table></figure><p><strong>挂载</strong></p><p>开始之前，我们如何知道我们的分区是MBR，还是GPT呢？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装的时候选择中文，才可以用中文过滤，dos就是MBR,gpt就会GPT.</span><br>[root@localhost ~]# fdisk -l |grep &quot;磁盘标签&quot;<br>磁盘标签类型：dos<br>磁盘标签类型：gpt<br><br><br>[root@localhost ~]# lsblk                                                 <br>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda      8:0    0   20G  0 disk <br>├─sda1   8:1    0  500M  0 part /boot<br>└─sda2   8:2    0 19.5G  0 part /<br>sdb      8:16   0   20G  0 disk <br>└─sdb1   8:17   0   20G  0 part <br>sdc      8:32   0    3T  0 disk <br>└─sdc1   8:33   0    3T  0 part <br>sr0     11:0    1  942M  0 rom<br></code></pre></td></tr></table></figure><p>在Windows里面我们格式化的时候，有2种文件系统：NTFS和FAT32。而在Linux系统里面目前用得最多的系统是ext4和xfs，这里我们有2块盘分别用不同的方式进行格式化。在ext4前面当然还有ext3，ext2。当然在其他类型的Linux里面也还有更多的文件系统。</p><p>1.格式化ext4</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# mkfs.ext4 /dev/sdc1<br>mke2fs 1.42.9 (28-Dec-2013)<br>文件系统标签=<br>OS type: Linux<br>块大小=4096 (log=2)<br>分块大小=4096 (log=2)<br>Stride=0 blocks, Stripe width=0 blocks<br>196608000 inodes, 786431488 blocks<br>39321574 blocks (5.00%) reserved for the super user<br>第一个数据块=0<br>Maximum filesystem blocks=2933915648<br>24000 block groups<br>32768 blocks per group, 32768 fragments per group<br>8192 inodes per group<br>Superblock backups stored on blocks: <br>    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, <br>    4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968, <br>    102400000, 214990848, 512000000, 550731776, 644972544<br><br>Allocating group tables: 完成                            <br>正在写入inode表: 完成                            <br>Creating journal (32768 blocks): 完成<br>Writing superblocks and filesystem accounting information: 完成<br></code></pre></td></tr></table></figure><p>2.格式化xfs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# mkfs.xfs /dev/sdb1<br>meta-data=/dev/sdb1              isize=512    agcount=4, agsize=1310656 blks<br>         =                       sectsz=512   attr=2, projid32bit=1<br>         =                       crc=1        finobt=0, sparse=0<br>data     =                       bsize=4096   blocks=5242624, imaxpct=25<br>         =                       sunit=0      swidth=0 blks<br>naming   =version 2              bsize=4096   ascii-ci=0 ftype=1<br>log      =internal log           bsize=4096   blocks=2560, version=2<br>         =                       sectsz=512   sunit=0 blks, lazy-count=1<br>realtime =none                   extsz=4096   blocks=0, rtextents=0<br></code></pre></td></tr></table></figure><p>3.挂载磁盘</p><p>前面说过，磁盘可以挂载到任何目录，但是系统自带的目录一般都是安装系统的时候就已经完成配置，一般都不要去动他。这里我们就创建2个新目录进行挂载。有挂载也就有卸载，卸载使用的命令是umount。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# mkdir /data /data1<br>[root@localhost ~]# mount /dev/sdb1 /data<br>[root@localhost ~]# mount /dev/sdc1 /data1<br>[root@localhost ~]# lsblk<br>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda      8:0    0   20G  0 disk <br>├─sda1   8:1    0  500M  0 part /boot<br>└─sda2   8:2    0 19.5G  0 part /<br>sdb      8:16   0   20G  0 disk <br>└─sdb1   8:17   0   20G  0 part /data<br>sdc      8:32   0    3T  0 disk <br>└─sdc1   8:33   0    3T  0 part /data1<br>sr0     11:0    1  942M  0 rom  <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##[root@localhost ~]# umount /data1</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##卸载最容易遇到的问题就是磁盘正在被使用，无法卸载。</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##这里可能会会涉及到2个命令lsof和fuser，有兴趣可以去了解下。</span></span><br></code></pre></td></tr></table></figure><p>4.配置fstab</p><p>如果挂载以后直接使用也没有问题，但是如果主动或者被动重启了系统，你会发现磁盘会被还原到未挂载的情况，那怎么实现开机自动挂载呢？这里就需要知道在Linux里面有下面这个一个文件，你的磁盘是否自动挂载都写到这里。</p><p>在刚刚挂载的时候，我们用的是直接用的是输入的设备地址，而下面配置文件写的是一串UUID，他们之间有什么区别呢？我如何知道每个盘的UUID呢？这里需要知道一个命令blkid，他会告诉你每个盘的UUID。</p><p>他们之间有什么区别呢？每个盘的UUID是不会变的，所以用UUID是可靠的，但是如果用设备名字，这个是可能出现问题的，比如原来有3个盘，其中一个盘坏了，他们的盘符是可能会发生变化的，如果因为磁盘故障，外加重启就可能导致盘符出现变化，这个时候可能会出现我们意想不到的问题。</p><p>确认好怎么配置以后，参考上面的格式进行配置即可，配置完成以后最好重启一下，如果配置错误可以在还未开始应用的时候修复，避免正式使用以后遇到重启在引发的问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cat /etc/fstab <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># /etc/fstab</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Created by anaconda on Fri Jun  7 19:56:34 2024</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) <span class="hljs-keyword">for</span> more info</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash">UUID=fb21e404-5ed7-400f-b936-ce2d8b631bfe /                       xfs     defaults        0 0</span><br>UUID=15251c96-cf20-46c3-ac06-c5b86c4afe70 /boot                   xfs     defaults        ms, by reference, are maintained under &#x27;/dev/disk&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# blkid<br>/dev/sda1: UUID=&quot;15251c96-cf20-46c3-ac06-c5b86c4afe70&quot; TYPE=&quot;xfs&quot; <br>/dev/sda2: UUID=&quot;fb21e404-5ed7-400f-b936-ce2d8b631bfe&quot; TYPE=&quot;xfs&quot; <br>/dev/sdb1: UUID=&quot;9fcb9c55-b38c-472e-b8b7-07db7b243e4f&quot; TYPE=&quot;xfs&quot; <br>/dev/sdc1: UUID=&quot;53e67bf0-fe14-4cd0-bcd9-8b9720e2360b&quot; TYPE=&quot;ext4&quot; PARTLABEL=&quot;primary&quot; PARTUUID=&quot;cea97c50-59e7-4f79-9454-5b86fd67b7a0&quot; <br>/dev/sr0: UUID=&quot;2019-09-11-19-02-53-00&quot; LABEL=&quot;CentOS 7 x86_64&quot; TYPE=&quot;iso9660&quot; PTTY<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">可以，但是不推荐的方式</span><br>/dev/sdb1                                 /data                   xfs    defaults        0 0<br><span class="hljs-meta prompt_">#</span><span class="language-bash">推荐的挂载方式</span><br>UUID=53e67bf0-fe14-4cd0-bcd9-8b9720e2360b /data1                  ext4   defaults        0 0<br></code></pre></td></tr></table></figure><p><strong>inode&amp;硬连接</strong></p><p>“Inode” 是文件系统中一个重要的概念，特别是在类 Unix 操作系统中（如 Linux）。它是 “index node”<br>的缩写，用于存储文件或目录的元数据信息。每个文件和目录在文件系统中都有一个唯一的<br>inode，它包含了关于文件的重要信息，如文件的权限、所有者、大小、时间戳以及数据块的位置等。</p><p>Inode 的主要组成部分包括：</p><ul><li>文件类型和权限： 文件类型（regular file、directory、symbolic link 等）和访问权限（读、写、执行）。</li><li>所有者和所属组：文件或目录的所有者和所属的用户组。</li><li>文件大小：文件占用的大小（以字节为单位）。</li><li>时间戳：包括文件的访问时间、修改时间和状态改变时间。</li><li>指向数据块的指针：存储文件数据的实际位置，这些指针可以直接指向数据块，或者在某些情况下，指向间接块、双重间接块和三重间接块。</li></ul><p>Inode 的作用：</p><ul><li>唯一标识：每个文件和目录在文件系统中由唯一的 inode 号码标识。</li><li>元数据管理：存储文件和目录的元数据信息，例如权限、所有者、大小等。</li><li>性能优化：通过 inode 可以快速访问和管理文件的元数据，从而提高文件系统的性能。</li><li>硬链接：硬链接是通过相同的 inode 号码连接到同一文件的多个文件名。这允许文件在文件系统中具有多个名称，但是只有一个物理副本，因为所有硬链接共享相同的<br>inode。</li></ul><p>在 Linux 中，可以使用命令如 ls -i 来查看文件或目录的 inode 号码，或使用 stat 命令查看详细的 inode 元数据信息。</p><p>总结</p><ol><li>inode简单理解就是从整个分区里面分割出来一部分空间，用来存储inode信息，大小是根据分区大小自定定义的。</li><li>如果没特需求不建议修改inode的大小调整。</li><li>inode 也是有容量限制的，如果磁盘里面是大量的小文件，inode就可能满的，这个时候也是无法写入文件的，也是普通运维最容易遇到的inode问题。</li><li>结合find命令，可以对那些无法使用rm命令删除的文件进行删除(目前为止也是我用过涉及到inode的两个地方)。</li></ol><p><strong>硬连接&amp;软连接</strong></p><p>硬连接（Hard<br>link）是操作系统中用来连接文件名与文件内容的一种技术，可以让一个文件拥有多个文件名（即多个硬连接）。硬链接与原始文件在文件系统中的inode相同，因此不同的文件名实际上引用了同一个文件内容，它们在系统级别上没有区别，只是文件系统为每个文件名维护了一个目录项。</p><p>软连接（Symbolic Link），也称为符号链接，是一种特殊类型的文件，它包含指向另一个文件或目录的路径。软连接类似于Windows系统中的快捷方式，它允许你创建一个指向另一个文件或目录的链接，而不是实际复制或移动文件本身。</p><table><thead><tr><th>特点</th><th>硬连接 (Hard Link)</th><th>软连接 (Symbolic Link)</th></tr></thead><tbody><tr><td>定义</td><td>目录项指向相同的物理文件数据块。</td><td>特殊类型的文件，包含指向另一文件或目录的路径。</td></tr><tr><td>类型</td><td>文件系统层级的链接。</td><td>文件系统层级的链接。</td></tr><tr><td>跨文件系统</td><td>不能跨越文件系统。</td><td>可以跨越文件系统。</td></tr><tr><td>目标类型</td><td>只能链接到文件，不能链接到目录。</td><td>可以链接到文件或目录。</td></tr><tr><td>inode</td><td>与目标文件相同的inode号。</td><td>新的inode号，指向目标的路径。</td></tr><tr><td>链接计数</td><td>增加原始文件的硬链接计数。</td><td>不影响目标文件或目录的链接计数。</td></tr><tr><td>更新</td><td>如果原始文件被修改，所有硬连接都会同步更新。</td><td>软连接可以指向动态变化的目标。</td></tr><tr><td>删除原始文件</td><td>不影响硬链接，直到所有硬链接被删除。</td><td>软连接失效，称为悬空连接。</td></tr><tr><td>权限和所有权</td><td>与目标文件相同的权限和所有权。</td><td>有自己的权限和所有权。</td></tr><tr><td>用途</td><td>保护特殊文件，避免被误删除</td><td>常用于创建快捷方式或简化路径。</td></tr><tr><td>命令行创建</td><td>ln targetfile linkfileln -s targetfile linkfile</td><td></td></tr></tbody></table><p>硬连接需要删除所有的文件，才能最终把文件删除。</p><p>软连接可以使用普通rm命令删除，也可以使用unlink取消连接。</p><p><strong>df 命令</strong></p><p>df 命令（磁盘空间使用情况查询）是一个常用于查看文件系统磁盘空间使用情况的命令。它能够显示指定文件系统的总空间、已使用空间、可用空间以及使用率等信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">df [选项] [文件或目录]<br><br>-h：以人类可读的方式显示输出结果，使用 K（千字节）、M（兆字节）、G（吉字节）等单位。<br>-T：显示文件系统类型。<br>-i：显示 inode 的使用情况而不是磁盘块的使用情况。<br>-t &lt;文件系统类型&gt;：仅显示指定文件系统类型的信息。<br>-x &lt;文件系统类型&gt;：排除指定文件系统类型的信息。<br><br><br>df -h # 显示所有文件系统的磁盘空间使用情况（以人类可读的格式）<br>df -t ext4 # 仅显示特定类型的文件系统（比如 ext4 文件系统）<br>df -h /home/user # 显示指定目录的文件系统磁盘空间使用情况<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">df</span> 命令显示的信息依赖于文件系统的挂载状态和权限，通常需要以管理员或超级用户权限运行以获得完整的信息。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 -h 选项可以更方便地查看磁盘空间使用情况，以人类可读的格式显示。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">df</span> 命令用于快速查看文件系统的整体状况，特别是在管理存储空间、排查空间不足问题时非常有用。</span><br></code></pre></td></tr></table></figure><p><strong>du 命令</strong></p><p>du 命令用于查看目录或文件的磁盘使用情况，即显示指定路径下文件和目录的磁盘使用量。它可以帮助你快速了解文件或目录占用的存储空间大小</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">du [选项] [文件或目录]<br><br>-h：以人类可读的方式显示输出结果，使用 K（千字节）、M（兆字节）、G（吉字节）等单位。<br>-s：仅显示总计信息，而不显示每个文件或目录的详细大小。<br>-c：同时显示所有列出的目录或文件的总计大小。<br>-a：显示所有文件和目录的大小，而不仅仅是目录。<br>-k：以 KB 单位显示磁盘使用量，这是默认的单位。<br><br>du -h # 显示当前目录及其子目录的磁盘使用情况（以人类可读的格式<br>du -sh /home/user/docs 显示特定目录或文件的磁盘使用情况（以人类可读的格式<br>du -sh * # 示目录的总计大小，包括所有子目录和文件<br>du -ah | sort -rh #   显示目录或文件的详细大小并按大小排序<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">du</span> 命令计算磁盘使用量时，默认只统计文件的物理大小，而不包括间接块、块大小或磁盘分配的大小。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 -h 选项可以更方便地查看磁盘使用情况，以人类可读的格式显示。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">du</span> 命令通常用于快速评估目录或文件占用的存储空间，特别是在管理磁盘空间、查找大文件或清理存储空间时非常有用。</span><br></code></pre></td></tr></table></figure><p>df 是从文件系统来统计的，du是从文件来统计的，正常的情况下这这种统计数据是很接近的，有两种意外情况</p><ul><li>df 使用量远大于du统计数据量，这个问题是文件句柄未释放，重启系统可以解决</li><li>du统计数量已经超过df看到的磁盘总量，比如磁盘20G,du统计出来有25G,这个时候可以添加-x参数就可以规避掉这个问题(<br>主要出现在有Docker的环境</li><li>df -h 如果卡住不输出，那么这个系统肯定是有问题的（常出现在nfs客户端，这个时候nfs服务端挂掉，nfs客户端执行这个命令就会卡住）</li></ul><h4 id="Linux-网络相关"><a href="#Linux-网络相关" class="headerlink" title="Linux 网络相关"></a>Linux 网络相关</h4><p>本文档会涉及到一些网络配置相关信息，如果要配置网络，需要先知道网卡的配置文件（在Linux里面一切皆文件，这也是Linux的思想之一）也会涉及到一些基础操作命令。</p><p>1.找到网卡配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/sysconfig/network-scripts<br><span class="hljs-meta prompt_">#</span><span class="language-bash">一般而言centos7的网卡名字都叫ifcfg-ensxxx</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">对于有早期的it经验的人而言一般网卡名字都是ifcfg-eth0或者ifcfg-eth1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">名字是可以随便修改的，这个是看个人习惯，目前主流的云厂商一般而言网卡的名字都是ethx，主要方便记忆和习惯。</span><br></code></pre></td></tr></table></figure><p>2.默认网卡配置文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs text">#此配置也是默认生成的配置文件<br>TYPE=Ethernet<br>PROXY_METHOD=none<br>BROWSER_ONLY=no<br>BOOTPROTO=dhcp<br>DEFROUTE=yes<br>IPV4_FAILURE_FATAL=no<br>IPV6INIT=yes<br>IPV6_AUTOCONF=yes<br>IPV6_DEFROUTE=yes<br>IPV6_FAILURE_FATAL=no<br>IPV6_ADDR_GEN_MODE=stable-privacy<br>NAME=ens33<br>UUID=607b48a5-3828-419b-ba97-8672bec9225f<br>DEVICE=ens33<br>ONBOOT=no<br></code></pre></td></tr></table></figure><p>3.手工配置网卡文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs text"># 部分参数可以进行删减,，下面的配置基于默认配置文件进行了修改。<br>TYPE=&quot;Ethernet&quot;<br>PROXY_METHOD=&quot;none&quot; <br>BROWSER_ONLY=&quot;no&quot;<br>BOOTPROTO=&quot;none&quot;<br>DEFROUTE=&quot;yes&quot;<br>IPV4_FAILURE_FATAL=&quot;no&quot;<br>IPV6INIT=&quot;yes&quot;<br>IPV6_AUTOCONF=&quot;yes&quot;<br>IPV6_DEFROUTE=&quot;yes&quot;<br>IPV6_FAILURE_FATAL=&quot;no&quot;<br>IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;<br>NAME=&quot;ens33&quot;<br>UUID=&quot;4385a0df-063d-42f7-a9f4-827ac1242248&quot;<br>DEVICE=&quot;ens33&quot;<br>ONBOOT=&quot;yes&quot;<br>IPADDR=&quot;192.168.40.211&quot;<br>PREFIX=&quot;24&quot;<br>GATEWAY=&quot;192.168.40.1&quot;<br>DNS1=&quot;61.139.2.69&quot;<br>DNS2=&quot;223.5.5.5&quot;<br>IPV6_PRIVACY=&quot;no&quot;<br><br><br># 其实这样也是可以的<br>DEVICE=ens33<br>TYPE=Ethernet<br>ONBOOT=yes<br>NM_CONTROLLED=no<br>BOOTPROTO=static<br>IPADDR=192.168.0.2<br>NETMASK=255.255.255.0<br>GATEWAY=192.168.0.1<br>DNS1=8.8.8.8<br></code></pre></td></tr></table></figure><p>4.重启网卡&amp;服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">启动单网卡</span><br>ifup ifcfg-ens33<br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动网络服务，生产环境这个命令要慎重，因为它可能让你失去网络</span><br>systemctl restart network<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看ip是否配置正常</span><br>ip a  # 也可以使用ifconfig，默认最小化安装没这个命令<br></code></pre></td></tr></table></figure><p>5.配置文件解释</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs text">下面是一些常见的Linux网卡配置文件参数的解释：<br>DEVICE：网络设备的名称，如eth0、eth1等。<br>TYPE：网络设备的类型，一般为Ethernet。<br>ONBOOT：开机是否启动网络接口，一般设置为yes。<br>BOOTPROTO：接口获取IP的方式，一般有dhcp（动态获取），static（静态IP），none（无）等几种。<br>IPADDR：IP地址，如果BOOTPROTO为static，那么需要手动设定一个IP地址。<br>NETMASK：子网掩码，如果BOOTPROTO为static，那么需要手动设定一个子网掩码。<br>GATEWAY：默认网关，如果BOOTPROTO为static，那么需要手动设定一个默认网关。<br>HWADDR：MAC地址，一般不需要手动设置，系统会自动读取网卡的MAC地址。<br>IPV6INIT：是否启动IPv6协议，一般设置为yes或者no。<br>USERCTL：是否允许普通用户控制此设备，一般设置为yes或者no。<br>DNS1、DNS2：DNS服务器地址，可以设定一个或者两个，用于域名解析。<br>NM_CONTROLLED：是否由NetworkManager管理，设置为yes表示由NetworkManager管理，设置为no表示由network service管理。<br><br>这些参数都是可选的，不是每一个配置文件都需要所有的参数。具体使用哪些参数取决于你的网络配置需求。<br></code></pre></td></tr></table></figure><p>6.总结</p><ol><li>这个是比较常用的配置ip的方式，永久生效。</li><li>也可以通过命令直接配置，但是这个重启以后会丢失。</li><li>ip不仅可以配置单个，也可以配置多个。</li><li>设备名字都会省略”ifcfg-“，但是在Linux目录里面必须包含。</li></ol><p><strong>PING</strong></p><p>ping命令是网络诊断工具中最基础和常用的命令之一。它用于检查两台主机之间的网络连通性,并测量数据包的往返时间 (Round-Trip<br>Time, RTT)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">ping &lt;目标主机IP或域名&gt;<br><br>-c &lt;数量&gt;: 指定发送数据包的数量,默认是无限发送(Windowns是发送4个)。<br>-i &lt;秒数&gt;: 设置发送数据包的时间间隔,默认是 1 秒。<br>-W &lt;秒数&gt;: 设置等待响应的超时时间,默认是 10 秒。<br>-s &lt;字节数&gt;: 指定发送数据包的大小,默认是 56 字节。<br><br>ping 命令的输出信息包括:<br>丢包率: 发送的数据包中有多少没有收到响应。<br>最小/平均/最大 RTT: 数据包的最小、平均和最大往返时间。<br>标准差: RTT 的标准差,反映了网络时延的稳定性。<br><br><br>[root@localhost ~]# ping 192.168.179.105<br>PING 192.168.179.105 (192.168.179.105) 56(84) bytes of data.<br>64 bytes from 192.168.179.105: icmp_seq=1 ttl=64 time=0.576 ms<br>64 bytes from 192.168.179.105: icmp_seq=2 ttl=64 time=0.274 ms<br>64 bytes from 192.168.179.105: icmp_seq=3 ttl=64 time=0.183 ms<br>64 bytes from 192.168.179.105: icmp_seq=4 ttl=64 time=0.331 ms<br>64 bytes from 192.168.179.105: icmp_seq=5 ttl=64 time=0.696 ms<br></code></pre></td></tr></table></figure><p>总结</p><ol><li>icmp_seq&#x3D;x 是发送请求编号，如果中途缺少一个，则说明包丢了。</li><li>TTL 是 IP 数据包头部的一个字段,用于控制数据包在网络中的存活时间。简单点说TTL默认64，离64越远，则经过的设备越多。</li><li>time 是超时时间，一般本机都是是小于1ms，一般局域网不会超过10ms，全国同网一般不会超过50ms。</li><li>判断ping就是判断是否丢包，延时是否不稳定。</li><li>一般情况下，能ping通，就代表网络的联通性是没问题的，但是也可能出现对方服务器限制了ping的原因。</li><li>ping通和端口通是完全没有任何关系的两件事。</li></ol><p><strong>TELNET</strong></p><p>Telnet是一种基于 TCP&#x2F;IP 的远程登录协议,它允许用户从本地计算机远程访问和控制其他计算机。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">telnet &lt;目标主机IP地址或域名&gt; &lt;端口号&gt; # 默认是 23 端口<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果失败则是无反应，或者提示连接被拒绝</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">该情况说明对方的22端口是通的</span><br>[root@localhost ~]# telnet 192.168.179.105 22<br>Trying 192.168.179.105...<br>Connected to 192.168.179.105.<br>Escape character is &#x27;^]&#x27;.<br>SSH-2.0-OpenSSH_7.4<br></code></pre></td></tr></table></figure><p>总结</p><ol><li>telnet只支持TCP协议，不支持UDP协议。</li><li>telnet不仅用于探测端口是否畅通，还可以用于登录网络设备(交换机等)。</li><li>telnet不仅用于探测端口是否畅通，还可以用于登录某些特殊服务(不常见)。</li><li>ping 和telnet 实际运维中都会组合到一起使用，但是切记他们之间是没有必然关系的，因为他们使用的网络协议都是不一样的。</li></ol><p>命令 echo &gt; &#x2F;dev&#x2F;tcp&#x2F;192.168.179.107&#x2F;22<br>是一种利用Linux系统中的特性来尝试与远程主机进行TCP连接的方式。这种方法通常用于快速检查目标主机的网络可达性，特别是在没有安装ping或telnet等网络工具时</p><p>具体解释如下：</p><ul><li>&#x2F;dev&#x2F;tcp&#x2F;192.168.179.107&#x2F;22 是Linux中的一个虚拟设备文件路径，它允许通过文件I&#x2F;O来操作网络套接字。</li><li>echo 命令在这里被用来向指定的TCP套接字发送数据。</li><li>&gt; &#x2F;dev&#x2F;tcp&#x2F;192.168.179.107&#x2F;22 表示将空字符串（即空数据）通过TCP连接发送到目标IP地址 192.168.179.107 的22端口（SSH端口）。</li><li>注意事项<ul><li>是否能够使用： 这种方法的可用性取决于Linux系统内核的配置。在某些较新的Linux发行版中，默认情况下可能会禁用 &#x2F;dev&#x2F;tcp 和<br>&#x2F;dev&#x2F;udp 虚拟文件系统。此外，某些安全策略也可能会限制对这些设备文件的访问。</li><li>仅用于检查连接性： 上述命令通常只用来检查目标主机是否可以访问指定的端口。它并不会建立一个真正的SSH连接或发送任何有意义的数据。</li><li>替代工具： 更好的做法是使用专门的网络工具来进行连接测试，如ping、telnet、nc（netcat）等，它们提供了更多的控制和信息反馈，能够更精确地确认网络连接的状态和问题。</li><li>UDP探测：由于UDP是无状态的，所以无论对方的端口是否在监听，我们都可以把包发出去，所以我们无法知道对方是否正在监听</li></ul></li></ul><h4 id="权限组"><a href="#权限组" class="headerlink" title="权限组"></a>权限组</h4><p>Linux操作系统的用户体系非常灵活，这使得它成为了一个很好的多用户系统。它有三种类型的用户：超级用户（root），系统用户和常规用户。</p><ul><li>超级用户 (root)<br>：在Linux系统中，超级用户是权限最高的用户，被称为根用户，也就是root用户。超级用户可以执行任何命令，包括系统设置、软件安装、用户和权限管理等。root用户的权限等同于Windows系统中的管理员权限。</li><li>系统用户：系统用户主要是为了运行某些服务或者守护进程（daemon）而创建的。这些系统用户通常不会具有登录shell，也就是说，它们不能直接登录系统。例如，邮件系统会有一个名为<br>mail 的系统用户，网页服务器可能会有一个名为 www 或 http 的用户。</li><li></li></ul><p>常规用户：这些用户是进行日常工作的用户，他们可以登录系统并运行各种应用程序。但是，他们不能对系统进行修改，也不能访问其他用户的文件，除非这些文件被明确地赋予了访问权限。你在安装Linux系统后创建的第一个用户就是常规用户（也可以不创建），通常这个用户会被赋予使用sudo命令的权限，也就是说，这个用户可以执行一些需要root权限的命令。</p><p>在Linux系统中，每个用户都有一个唯一的用户ID（UID），系统内部通过UID来识别用户。UID 0通常被赋予root用户，UID<br>1-999一般为系统用户，1000以上的UID用于常规用户。</p><p><strong>用户命令</strong></p><ul><li>useradd [options] username：创建新的用户。例如 useradd -m username 将会创建一个新的用户，并创建用户的主目录。</li><li>passwd username：设置或修改用户的密码。不加用户名则默认修改当前用户，只有root可以修改其他用户的密码。</li><li>userdel [options] username：删除用户。例如 userdel -r username 将会删除用户以及用户的主目录。</li><li>usermod [options] username：修改用户的信息。例如 usermod -l newname username 将会修改用户的用户名。</li><li>groups username：显示用户所属的组。</li><li>id username：显示用户的 UID（用户 id）、GID（用户组 id）以及所属的组。</li><li>su username：切换到其他用户。例如 su - username 将会切换到用户，并加载用户的环境变量。</li><li>whoami：显示当前的用户名。</li><li>who：显示当前登录的所有用户。</li><li>last：显示系统的登录记录。</li></ul><p>用户管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cat /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">省略中间部分</span><br>nginx:x:997:995:Nginx web server:/var/lib/nginx:/sbin/nologin<br>ntp:x:38:38::/etc/ntp:/sbin/nologin<br><span class="hljs-meta prompt_">#</span><span class="language-bash">省略中间部分</span><br>user01:x:1000:1000::/home/user01:/bin/bash<br><br>root 属于超级管理员，无论用户ID还是组ID都是0<br>nginx&amp;ntp 属于系统用户，都是服务自带的用户，/sbin/nologin 就是不允许登录，包括ssh和通过控制台<br>user01 属于常规用户，属于通过useradd 增加的用户的，没有nologin就是允许ssh和通过<br></code></pre></td></tr></table></figure><p>&#x2F;etc&#x2F;passwd 文件中的每一行都代表系统上的一个用户账号，每行由多个字段组成，字段之间使用冒号（:）分隔。典型的字段包括：</p><ul><li>用户名：用户的登录名。</li><li>密码占位符：（在现代系统中通常是 x）原本是存储加密的密码，现在通常是存储在 &#x2F;etc&#x2F;shadow 文件中，或者指向其他安全存储的文件。</li><li>用户 ID (UID)：唯一标识符，用于系统内部识别用户。</li><li>组 ID (GID)：该用户所属的主要组的标识符。</li><li>用户描述：一般是用户的全名或注释。</li><li>主目录：用户登录后所处的初始目录。</li><li>登录 Shell：用户登录后默认使用的 Shell 程序。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cat /etc/shadow<br>root:*:18961:0:99999:7:::<br><span class="hljs-meta prompt_">#</span><span class="language-bash">省略中间部分</span><br>ntp:!!:19885::::::<br>user01:!!:19893:0:99999:7:::<br></code></pre></td></tr></table></figure><p>&#x2F;etc&#x2F;shadow 文件用于存储用户账号的加密密码、密码过期信息以及账号是否被锁定等敏感信息。相比于 &#x2F;etc&#x2F;passwd<br>文件，它具有更高的安全性，因为普通用户无法直接读取此文件。</p><p>文件结构：</p><ul><li>用户名：与 &#x2F;etc&#x2F;passwd 中的用户名对应。</li><li>加密密码：使用密码哈希算法加密后的密码。实际密码不会直接存储在此处，只存储其哈希值。</li><li>密码最后更改日期：自 Unix 时间戳起，距离上次更改密码的天数。</li><li>密码更改最短天数：两次密码更改之间的最小天数间隔。</li><li>密码更改最大天数：密码的有效期，超过此期限用户需要强制更改密码。</li><li>密码过期前警告天数：密码即将过期前，提前多少天发出警告。</li><li>账号失效日期：账号失效的日期，即停止使用该账号的日期。</li><li>账号标志：包含有关账号当前状态的其他信息，例如是否被锁定等。</li><li>每一行对应一个用户账号，字段之间用冒号（:）分隔。</li><li>访问权限：&#x2F;etc&#x2F;shadow 文件具有非常严格的访问控制，通常只有 root 用户或具有相应特权的用户能够读取和修改此文件。这是为了确保用户密码和账户信息不被未经授权的用户获取。</li></ul><ol><li>如果自己是一个普通运维角色，我们能拿到的账号和密码，应该是一个普通用户和密码。</li><li>如果自己是运维管理员的情况，则分配给其他人的账号也只能是一个普通账号。</li><li>普通用户可以可以通过su及sudo命令来提升自己的权限，用于完成需要超级管理员权限才能完成运维的操作。</li><li>当然，这并不是标准方案，你可以根据自己的实际情况选择。</li><li>有的应用程序则要求必须使用非root用户启动，比如es，使用root则会被提示不允许使用root启动。</li></ol><p><strong>用户组介绍</strong><br>在类 Unix 操作系统（如Linux、FreeBSD等）中，用户组是用于管理和组织用户的一种机制。以下是关于用户组的基本介绍：</p><ul><li>定义：<ul><li>用户组是一组用户的集合，它们可以共享相同的权限和访问控制设置。每个用户都可以属于一个或多个用户组。</li></ul></li><li>用途：<ul><li>权限管理：用户组是控制文件和系统资源访问权限的重要机制。通过用户组，系统管理员可以轻松管理多个用户对文件和目录的访问权限。</li><li>共享资源：用户组允许一组用户共享相同的资源，这在团队和组织环境中特别有用。</li><li>管理简化：通过组织用户到不同的组中，系统管理员可以更有效地分配和管理用户权限，而不必为每个用户单独设置权限。</li></ul></li><li>特性：<ul><li>主组：每个用户在创建时会有一个主组，通常与其用户名相同。这个主组是用户在文件系统上创建文件和目录时的默认所属组。</li><li>附加组：用户可以同时属于多个附加组，这些组可以授予用户访问其他资源的额外权限。</li></ul></li><li>管理工具：<ul><li>groupadd：用于创建新的用户组。</li><li>groupdel：用于删除现有的用户组。</li><li>groupmod：用于修改用户组的属性，如名称或GID（组ID）。</li><li>gpasswd：管理用户组的密码（组密码）。</li><li>groups：显示当前用户所属的所有组。</li></ul></li><li>其实还有2个涉及权限的命令也可以操作文件和目录的组权限。</li><li>在Unix&#x2F;Linux系统中，管理用户组的主要工具包括：</li><li>文件：<ul><li>用户组信息通常存储在 &#x2F;etc&#x2F;group 文件中。这个文件包含了所有用户组的列表，每个用户组一行，由冒号（:）分隔的字段构成，包括组名、组密码（通常是<br>x）、组ID（GID）和组成员等信息。</li></ul></li><li>权限：<ul><li>文件和目录的权限可以分配给用户组，这允许组内的所有成员共享特定的读、写、执行权限。通过组权限的设置，管理员可以实现更精细的权限控制和资源管理。</li></ul></li></ul><ol><li>在实际运维中，其实组这个概念用得是比较少的，我到目前为止都还没用过，大家作为一个了解吧。</li><li>在小型的系统是很难用到组概念的，大型系统都会通过其他堡垒机方式来实现管理，并不需要针对单独的Linux服务器配置组策略。</li></ol><p>Linux的权限介绍</p><p>在Linux系统中，每个文件和目录都有一个访问权限，用来保护数据的安全。这个权限分为三类，分别对应三种不同的用户：</p><ol><li>文件拥有者（User）：创建该文件或目录的用户。</li><li>用户组（Group）：文件拥有者所在的用户组，用户组中的用户可以共享某些权限。</li><li>其他用户（Other）：除了文件拥有者和用户组内的用户之外的其他用户。</li></ol><p>每种用户都有以下三种权限：</p><ol><li>读取权限（Read）：用户可以读取文件的内容或列出目录的内容。用“r”表示，对应数值4。</li><li>写入权限（Write）：用户可以修改文件的内容或在目录中创建和删除文件。用“w”表示，对应数值2。</li><li>执行权限（Execute）：用户可以执行文件，或者进入和查看目录的内容。用“x”表示，对应数值1。</li></ol><p>例如，如果一个文件的权限被设置为”755”，那么对应的权限是：</p><ul><li>文件拥有者：7（即4+2+1）拥有读、写、执行权限</li><li>用户组：5（即4+0+1）拥有读、执行权限</li><li>其他用户：5（即4+0+1）拥有读、执行权限</li></ul><p>可以使用chmod命令来改变文件或目录的权限，使用chown命令来改变文件或目录的所有者，使用chgrp命令来改变文件或目录的用户组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">-rwxr--r--  1 root   root         688 May 15 15:45 check_port.py<br>-rw-r--r--  1 root   root        6852 Jun  6 15:04 DistributionInfo.json<br>drwxr-xr-x 10 root   root        4096 May  6  2021 go<br>drwxr-xr-x  2 root   root        4096 Jun  4 14:55 pgsql<br>drwxr-xr-x 10 109965   5000      4096 May 20 09:35 protobuf-2.6.1<br>drwxr-xr-x  8 user01 user01      4096 May 20 09:39 protobuf-c-1.2.1<br>-rwxr--r--  4 root   root         473 May 27 09:23 redis1.sh<br><br>1. &#x27;d&#x27;头代表目录，&#x27;-&#x27;开头代表文件。<br>2. &#x27;r&#x27;代表读权限，用数字4表示；&#x27;w&#x27;代表写权限，用数字2表示；&#x27;x&#x27;代表执行权限，用数字1表示。<br>3. 2个root 第一个代表用户，第二个root代表用户组。<br>4. 这里有一个文件用户和组都是普通用户user01。<br>5. 还有个109965和5000 ，及其他数字，一般情况下都是从windows上传的文件，就会出现这样的情况。<br>6. 如果把user01那个用户及组的对应的文件，复制到另外一台服务器，而这个服务器没有这个user01用户，那么复制过去以后的权限也会显示1000，1000（还要看对方服务器的用户占用的编号，可能会更大）。<br></code></pre></td></tr></table></figure><p>在Linux系统中，有一些特殊权限和文件属性，它们可以进一步控制文件和目录的访问和行为。这些特殊权限和属性通常通过文件的权限位（文件属性）和文件属性位（文件系统特性）来实现。</p><p>1.Setuid、Setgid 和 Sticky Bit</p><p>Setuid (SUID)：当文件设置了SUID权限后，执行该文件的用户将暂时获取文件所有者的权限。在执行过程中，该用户的权限将提升到文件所有者的权限级别。</p><p>示例：chmod u+s filename，使用 ls -l 查看时，文件权限会显示为 -rwsr-xr-x。</p><p>这个权限最典型的就是passwd这个命令，这样root用户可以用它修改自己的密码，而其他普通用户也可以通过这个命令修改自己的密码。所以它的权限就是-rwsr-xr-x</p><p>Setgid (SGID)：当文件设置了SGID权限后，执行该文件的用户将以文件所属组的身份运行。对于目录，则表示新建文件和目录将继承父目录的组权限。</p><p>示例：chmod g+s filename，使用 ls -l 查看时，文件权限会显示为 -rwxr-sr-x。</p><p>Sticky Bit：常用于目录上，设置了Sticky Bit后，只有文件所有者、目录所有者或超级用户可以删除或移动文件，即使其他用户对该目录有写权限。</p><p>示例：chmod +t directory，使用 ls -ld 查看时，目录权限会显示为 drwxrwxrwt。</p><p>2.ACL（Access Control List）</p><p>ACL：Access Control List，即访问控制列表，允许用户对文件或目录设置更为精细的权限控制，可以控制多个用户或组对文件或目录的访问权限。</p><p>设置 ACL：setfacl 命令用于设置 ACL，如 setfacl -m u:user:rwx filename。</p><p>查看 ACL：getfacl 命令用于查看 ACL，如 getfacl filename。</p><p>3.文件属性</p><p>Immutable (i)：设置了文件的不可变属性后，即使是超级用户也不能修改或删除该文件，直到该属性被取消。</p><p>设置不可变属性：chattr +i filename。</p><p>取消不可变属性：chattr -i filename。</p><p>Append-only (a)：设置了文件的追加属性后，只能向文件中追加内容，不能删除或修改文件的已有内容。</p><p>设置追加属性：chattr +a filename。</p><p>取消追加属性：chattr -a filename。</p><h4 id="SSHD"><a href="#SSHD" class="headerlink" title="SSHD"></a>SSHD</h4><p>我们前面讲了如何ssh登录，都是使用的密码，其实在ssh登录里面还有几个经常遇到的问题，比如我能否不使用ssh密码，而是用一种免密的方式登录(<br>目前一般的公有云平台创建新的云主机都可以选择使用密码还是密钥的)，而且ssh端口默认都是22，是否可以修改，如果为了安全，是否可以不允许root登录。</p><p><strong>免密码登录</strong></p><p>先普及2个概念，在免密登录的时候一般会涉及到2个文件，一个私钥，一个公钥，他们是配对的。私钥就是放本地服务器里面，公钥就是放到我们想要免密登录的服务器里面，如果从我们从云平台开通主机的时候，选择密钥登录，则会获得一个文件，它就是私钥。如果你不愿意用系统给你生成的，你也可以上传你自己定义好的公钥。</p><p>在实际运维中，部分软件是要求配置免密登录才能更好运行，甚至必须要免密才能运行。还有就是可以给服务器设置一个自己都不记得甚至空密码的情况下，然后使用密钥登录来提高安全性。</p><p><strong>配置免密登录</strong></p><p>生成公钥及私钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ssh-keygen 输入该命令以后，一直回车即可。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这里也可以添加很多参数，甚至可以设置密钥的密码。</span><br><br>[root@localhost ~]# ssh-keygen <br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/root/.ssh/id_rsa): <br>Created directory &#x27;/root/.ssh&#x27;.<br>Enter passphrase (empty for no passphrase): <br>Enter same passphrase again: <br>Your identification has been saved in /root/.ssh/id_rsa.<br>Your public key has been saved in /root/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>SHA256:4jzW3nqWv4wxN7j4v0LjFI+DUuYFVQ1xeiS6fUF3yGo root@localhost.localdomain<br>The key&#x27;s randomart image is:<br>+---[RSA 2048]----+<br>|         ...==+.o|<br>|        .  . *+..|<br>|         .. ..o  |<br>|        o ooE. . |<br>|      .+So.=. .  |<br>|     o.oo *...   |<br>|      =..+++o    |<br>|     . o o*B .   |<br>|        +==+*o   |<br>+----[SHA256]-----+<br></code></pre></td></tr></table></figure><p>查看公钥和私钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[root@localhost]# </span><span class="language-bash"><span class="hljs-built_in">ls</span> -l /root/.ssh/</span><br>总用量 8<br>-rw-------. 1 root root 1675 6月  28 22:57 id_rsa     //私钥<br>-rw-r--r--. 1 root root  408 6月  28 22:57 id_rsa.pub //公钥<br></code></pre></td></tr></table></figure><p>把公钥传输其他服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">需要输入对方服务器的密码</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">也可以手工把id_rsa.pub文件的内容放到/root/.ssh/authorized_keys里面，注意权限</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">我们把公钥传输到108服务器以后，我们可以免密登录108服务器</span><br>[root@localhost .ssh]# ssh-copy-id 192.168.179.108<br>/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/id_rsa.pub&quot;<br>The authenticity of host &#x27;192.168.179.108 (192.168.179.108)&#x27; can&#x27;t be established.<br>ECDSA key fingerprint is SHA256:KcCHSnldK0xz0g82jmvKQ5bFYI8Wn04rPYbmK94nwhQ.<br>ECDSA key fingerprint is MD5:f3:3b:6d:09:54:06:57:b0:13:3a:75:e1:ca:79:70:bd.<br>Are you sure you want to continue connecting (yes/no)? yes<br>/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed<br>/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys<br>root@192.168.179.108&#x27;s password: <br><br>Number of key(s) added: 1<br><br>Now try logging into the machine, with:   &quot;ssh &#x27;192.168.179.108&#x27;&quot;<br>and check to make sure that only the key(s) you wanted were added.<br></code></pre></td></tr></table></figure><p>查看远程服务器的公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">虽然公钥在原始服务器的名字是内容是/root/.ssh/id_rsa.pub，但是复制过来名字会变成authorized_keys</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果该服务器允许多个其他机器过来免密登录，则该文件会有多行。</span><br>[root@localhost .ssh]# cd /root/.ssh/<br>[root@localhost .ssh]# ls -l<br>总用量 4<br>-rw-------. 1 root root 408 6月  28 23:02 authorized_keys<br></code></pre></td></tr></table></figure><p>验证免密登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">未输入密码，也可以直接登录。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">登录的时候，它会读取本地私钥和服务器里面的公钥进行验证，验证通过则登录成功。</span><br><br>[root@localhost .ssh]# ssh 192.168.179.108<br>Last login: Fri Jun 28 23:09:05 2024 from 192.168.179.1<br>[root@localhost ~]#<br></code></pre></td></tr></table></figure><p>总结</p><ol><li>这里所有的操作都是基于root账号来操作的，实际上也可以普通账号来配置免密。</li><li>把私钥拿到win 也可以登录成功服务器，使用ssh软件，选择密钥登录也可以使用。</li><li>如果不做任何操作的情况下，它同时支持密码和密钥两种方式。也就是我可以拿密钥去登录，也可以拿密码去登录。</li><li>同一个服务器，允许配置多个公钥，让不同的私钥都可以使用免密登录。在实际authorized_keys文件里面就是体现有多行。</li><li>使用密钥登录可以避免密码被撞库的可能性，从而提高系统安全性。</li></ol><p><code>22</code>作为所有人都知道的ssh端口，它只要暴露在互联网，就会不停的面临暴力破解。我们最常用的做法就是修改端口，以及禁止root用户登录，使用一个普通账号登录，然后再使用sudo<br>或者su 方式来满足自己的运维需求。</p><p>修改SSH端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/ssh/sshd_config<br><span class="hljs-meta prompt_">#</span><span class="language-bash">默认这个参数是注释的，需要取消注释，并更换其中的端口</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">这里其实是可以配置多个端口，可以根据实际修改</span><br>Port 22<br>Port 9508<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">保存以后，重启服务，这个地方也需要小心，避免配置错误，把自己关在外面</span><br>systemctl restart sshd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">检查端口监听，默认是监听在所有ip，和ipv6同时开放，可以根据需要进行调整。</span><br>[root@localhost ~]# netstat -lnp |grep sshd<br>tcp        0      0 0.0.0.0:9508            0.0.0.0:*               LISTEN      1086/sshd           <br>tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1086/sshd           <br>tcp6       0      0 :::9508                 :::*                    LISTEN      1086/sshd           <br>tcp6       0      0 :::22                   :::*                    LISTEN      1086/sshd<br></code></pre></td></tr></table></figure><p>禁止root登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/ssh/sshd_config<br><span class="hljs-meta prompt_">#</span><span class="language-bash">默认这个参数也是注释的，需要改成下面这样</span><br>PermitRootLogin no<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">保存以后，重启服务，这个地方也需要小心，避免配置错误，把自己关在外面</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生产环境先配置一个可登录的普通账号</span><br>systemctl restart sshd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">验证root登录失败</span><br>root@192.168.179.111&#x27;s password: <br>Permission denied, please try again.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">普通用户登录成功</span><br>[root@localhost ~]# ssh user01@192.168.179.111<br>user01@192.168.179.111&#x27;s password: <br>[user01@localhost ~]$<br></code></pre></td></tr></table></figure><p>禁止密码登录，只允许密钥登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/ssh/sshd_config<br>PermitEmptyPasswords no<br>PasswordAuthentication no<br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置成下面这样</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">保存以后，重启服务，这个地方也需要小心，避免配置错误，把自己关在外面</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生产环境需要先确认可以密钥登录</span><br>systemctl restart sshd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">没有输入密码的机会</span><br>[root@localhost ~]# ssh user01@192.168.179.111<br>Permission denied (publickey,gssapi-keyex,gssapi-with-mic).<br>[root@localhost ~]# ssh root@192.168.179.111<br>Permission denied (publickey,gssapi-keyex,gssapi-with-mic).<br></code></pre></td></tr></table></figure><p>总结</p><ol><li>修改端口，禁止root登录，只允许使用密钥，在实际运维中，可以根据自己需要进行选择一种或者多种组合。</li><li>当然实际情况下sshd的能够支持的配置还有很多，比如限制ip，或者只允许特定的用户或者组登录。</li><li>还有一个经常修改的参数是 UseDNS ，把它修改成no 可以加速ssh登录行为(这个里面涉及到一个dns概念，反向解析)。</li><li>ssh在Linux服务器里面一般涉及到2个操作：一个是作为sshd的服务端，也可以是ssh作为连接其他人的客户端命令。</li></ol><h4 id="主机名与hosts"><a href="#主机名与hosts" class="headerlink" title="主机名与hosts"></a>主机名与hosts</h4><p>Linux系统中的主机名通常是指在网络中标识一个特定主机的名称。主机名在Linux中有几个不同的用途和设置方式：</p><p>主机名的作用：</p><ul><li>网络标识： 主机名是在网络中唯一标识你的Linux服务器或计算机的名称。它可以用来让其他设备和服务器识别和访问你的机器。</li><li>系统配置：主机名通常用于配置文件中，例如 &#x2F;etc&#x2F;hostname 文件保存系统当前的主机名。</li><li>命令行显示：当你登录到Linux系统的命令行终端时，主机名通常会显示在提示符中，以便你知道当前所在的主机，如果在部署的时候，没有配置，默认的主机名则是localhost</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cat /etc/hostname <br>localhost.localdomain<br>[root@localhost ~]#<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置主机名</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">临时设置</span><br>hostname newhostname<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">永久设置</span><br>[root@localhost ~]# hostnamectl set-hostname newhostname1<br>[root@localhost ~]# cat /etc/hostname <br>newhostname1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">无论临时设置，还是永久设置，设置完都是看不到主机变化的</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">执行bash命令就可以立即看到，永久设置也可以重新登录以后看到</span><br></code></pre></td></tr></table></figure><p><strong>HOSTS</strong> 在计算机网络中，hosts 是一个重要的文件，它用于将主机名与IP地址进行映射，从而实现域名解析的功能。具体来说，hosts<br>文件通常位于操作系统中的一个特定位置（在大多数Unix-like系统中是<br>&#x2F;etc&#x2F;hosts），用于存储静态的IP地址和主机名映射关系。windows系统也有一样的文件，他的位置是：C:<br>\Windows\System32\drivers\etc\hosts。</p><p>hosts 文件的作用：</p><ul><li>域名解析：hosts 文件最主要的作用是将主机名（例如 example.com）映射到相应的IP地址（例如<br>192.0.2.1）。这种映射允许计算机通过主机名快速找到相应的IP地址，以便建立网络连接。</li><li>本地主机名解析：hosts 文件中可以包含本地主机的名称映射，比如将 localhost 映射到<br>127.0.0.1。这样做可以确保系统在没有DNS服务器或者在DNS服务不可用时，仍能够访问本地主机。</li><li>加速访问：使用 hosts 文件可以加速对经常访问的域名的解析，因为系统会首先检查 hosts 文件中的记录，避免了每次都向DNS服务器查询。</li></ul><p><strong>总结</strong></p><ol><li>一般情况下主机名可用于标注主机信息，让我们看到主机名字，就知道它是哪台机器，避免因为主机名字都相同而出现执行错误的指令(<br>不同的主机主机名是可以可以一样的，只要他们之间不使用主机名通信即可，比如默认所有机器主机都是localhost)。</li><li>hosts 可以用于模拟真实的域名解析，用于测试验证部分网络情况。比如在测试环境使用和真实环境使用一样的域名，来测试业务，就可以通过配置hosts来实现。</li><li>有一些集群软件，比如MQ,HDFS他们之间的通信是基于域名或者说主机名来通信的，这个时候我们需要配合主机名和HOSTS的合理配置，才能正常搭建这些软件。</li><li>主机可以可用来标识业务名字，也可以用来标识IP地址，具体根据需求灵活掌握即可。</li></ol><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>在Linux系统中，环境变量扮演着非常重要的角色，用于配置系统和应用程序的运行环境。Linux环境变量可以影响命令行会话、运行的程序以及整个系统的行为。以下是一些常见的Linux环境变量及其作用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@newhostname1 network-scripts]# env<br>XDG_SESSION_ID=2<br>HOSTNAME=newhostname1<br>SELINUX_ROLE_REQUESTED=<br>TERM=xterm<br>SHELL=/bin/bash<br>HISTSIZE=1000<br>SSH_CLIENT=192.168.179.1 58431 22<br>SELINUX_USE_CURRENT_RANGE=<br>SSH_TTY=/dev/pts/0<br>USER=root<br>MAIL=/var/spool/mail/root<br>PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin<br>PWD=/etc/sysconfig/network-scripts<br>LANG=zh_CN.UTF-8<br>SELINUX_LEVEL_REQUESTED=<br>HISTCONTROL=ignoredups<br>SHLVL=1<br>HOME=/root<br>LOGNAME=root<br>SSH_CONNECTION=192.168.179.1 58431 192.168.179.111 22<br>LESSOPEN=||/usr/bin/lesspipe.sh %s<br>XDG_RUNTIME_DIR=/run/user/0<br>_=/usr/bin/env<br>OLDPWD=/root<br></code></pre></td></tr></table></figure><p>常见的Linux环境变量</p><ul><li>PATH：作用：定义了系统在哪些目录中搜索可执行文件。</li><li>HOME：作用：指定当前用户的主目录路径。</li><li>LANG 和 *LC_：作用：定义了系统的语言和区域设置。</li><li>TMP 和 TEMP：作用：指定临时文件的存储路径。</li><li>PS1：作用：定义命令行提示符的格式。</li><li>JAVA_HOME：作用：指定Java开发工具的安装路径。</li><li>LD_LIBRARY_PATH： 作用：指定动态链接库（shared library）的搜索路径。</li><li>HISTSIZE： 作用：定义histsize的保存上限数量。</li></ul><p>设置和使用环境变量</p><p>在Linux系统中，可以通过以下方式设置和使用环境变量：</p><ul><li>查看环境变量：使用 echo 命令可以查看当前Shell中定义的环境变量，如 echo $PATH 可以显示 PATH 的值。<ul><li>在Shell中临时设置：可以直接在Shell中使用 export 命令来设置环境变量，例如： <code>export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64</code> 这样设置的环境变量仅在当前Shell会话中有效，关闭Shell后失效。</li></ul></li><li>查看环境变量：使用 echo 命令可以查看当前Shell中定义的环境变量，如 echo $PATH 可以显示 PATH 的值。</li><li>永久设置<ul><li>永久设置的方式是设置到文件里面，主要涉及到下面几个文件</li><li>用户级别：~&#x2F;.bash_profile 或 ~&#x2F;.profile 文件用于每次打开新的Shell会话时加载的配置。这里定义的环境变量通常也只对当前用户有效。</li><li>系统级别：&#x2F;etc&#x2F;profile 或 &#x2F;etc&#x2F;environment 文件用于设置系统全局的环境变量，这些变量对系统中所有用户和进程都有效。</li><li>设置以后，都要重新登录才会生效，如果要在当前shell生效，则要执行: <code>source /etc/profile</code></li></ul></li></ul><p>总结</p><ol><li>env可以查看当前环境有哪些环境变量</li><li>~代表是家目录，比如root的家目录是&#x2F;root，如果是user1的家目录则是&#x2F;home&#x2F;user1</li><li>在Linux里面以点”.”开头的文件或者目录就是隐藏文件，常规的ll或者ls都是看不到文件的，需要使用ls -a才可以看到。</li><li>在前面用户我们讲su命令的时候说过，su -l 或者su - 的时候会加载用户环境变量，加载的就是这里的的用户级别配置文件下的内容。</li><li>二进制软件包，可以通过添加环境变量的方式来直接访问，也可以直接放置到PATH对应的目录。比如最常见的JDK，一般都是通过把路径添加到环境变量里面然后访问。</li><li>环境变量的优先级确实是按照命令行设置 &gt; 系统级别 &gt; 用户级别的顺序。这意味着通过命令行直接设置的环境变量会优先于系统级别和用户级别的配置文件中的定义。</li><li>实际上以上那么多环境变量相关的配置文件，如果临时用，我就在命令行里面添加，要永久使用的，我都是写到&#x2F;etc&#x2F;profile这个文件里面。</li></ol><h4 id="Linux定时任务"><a href="#Linux定时任务" class="headerlink" title="Linux定时任务"></a>Linux定时任务</h4><p>在Linux中，可以使用crontab来设置和管理任务计划。crontab是一个用于定期执行命令或脚本的工具，可以按照指定的时间间隔自动运行任务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看现有的crontab任务：使用以下命令可以查看当前用户的crontab任务列表：</span><br>crontab -l<br><span class="hljs-meta prompt_"># </span><span class="language-bash">编辑或创建新的crontab任务：使用以下命令可以编辑或创建一个新的crontab任务：</span><br>crontab -e<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在打开的编辑器中，每行代表一个任务计划，格式如下：</span><br>* * * * * command<br><span class="hljs-meta prompt_"># </span><span class="language-bash">例如，如果要在每天的早上8点运行一个脚本，可以使用以下行：</span><br>0 8 * * * /path/to/script.sh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">编辑完成后，保存并关闭编辑器，这里的操作方式和用vi编辑文件是一样的效果。</span><br><br>第一个星号表示分钟（0-59）<br>第二个星号表示小时（0-23）<br>第三个星号表示日期（1-31）<br>第四个星号表示月份（1-12）<br>第五个星号表示星期几（0-7，其中0和7都表示星期日）<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除crontab任务：如果要删除当前用户的所有crontab任务，可以使用以下命令：</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">一般用的比较少，常用的是删除或者注释任务</span><br>crontab -r # 这将删除当前用户的所有crontab任务，请谨慎使用。<br></code></pre></td></tr></table></figure><p>优先级说明</p><p>这五个时间单位的优先级从左到右依次降低。根据这五个时间单位的取值，可以设置不同的定时任务。例如：</p><ul><li>如果在分钟、小时、日期、月份和星期几的位置上都使用了星号（*），表示任务将在每分钟都执行。</li><li>如果在分钟位置上使用了特定的数字，而其他位置上使用了星号（*），表示任务将在每小时的特定分钟执行。</li><li>如果在小时位置上使用了特定的数字，而其他位置上使用了星号（*），表示任务将在每天的特定小时执行。</li><li>如果在日期位置上使用了特定的数字，而其他位置上使用了星号（*），表示任务将在每月的特定日期执行。</li><li>如果在月份位置上使用了特定的数字，而其他位置上使用了星号（*），表示任务将在每年的特定月份执行。</li><li>如果在星期几位置上使用了特定的数字，而其他位置上使用了星号（*），表示任务将在每周的特定星期几执行。</li></ul><p>请注意，星号（*）表示通配符，意味着该时间单位的所有取值都适用。而特定的数字表示具体的取值，例如1代表1号，2代表2点等。</p><p>根据具体需求，可以根据时间单位的优先级来设置crontab任务的时间间隔。请确保设置正确的时间间隔，以确保任务按预期执行。</p><p>每分钟，用 *</p><p>每2分钟，则用*&#x2F;2</p><p>每5分钟，则用*&#x2F;5</p><p>其他依次类推，绝大部分任务都是在分钟和小时2个参数进行调整。</p><p><strong>主要用途</strong></p><ul><li>定时切割日志，删除文件</li><li>检查进程存活</li><li>定期备份</li></ul><p>总结</p><ol><li>Linux任务计划的规则其实很简单，只要理解到规则就可以根据自己的需要编写对应的规则。对应的规则可以直接是命令，也可以是脚本。</li><li>Linux任务计划是分用户的，尤其是多用户运维的服务器。</li><li>Linux任务计划最小粒度是分钟，如果需要更精细的角度来执行，可以通过把命令放置到脚本里面，然后通过脚本来实现秒级的粒度的控制。</li><li>在前面讲文件搜索的时候，我们讲过Linux有自带的几个目录，里面放置的就是根据单词提示的执行任务。这里的任务，通过<code>crontab -l</code><br>命令都是看不到的。如果有任务计划未按照预期执行，可以检查cron.deny 。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# ls /etc/|grep cron<br>cron.d/       //系统部分自带会将任务放置在里面<br>cron.daily/   //每天执行<br>cron.deny     //不允许执行任务计划的用户<br>cron.hourly/  //每小时执行<br>cron.monthly/ //每月执行<br>crontab       //直接编辑就可以执行<br>cron.weekly/  //每周执行<br></code></pre></td></tr></table></figure><h4 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h4><p>很多命令，默认最小安装的情况下，都是不自带的，都需要额外安装，那我们应该如何安装这些软件呢？</p><ul><li>yum安装<ul><li>yum命令安装的软件仅仅局限于红帽系列，主要包括以下几类操作发行版：RHEL，Fedora，CentOS，Rocky等。</li><li>安装：打开终端，输入yum install packagename ，其中 packagename 是你想要安装的软件包的名称。比如，如果你想安装<br>wget，那么命令就是 yum install wget。 不过很多时候会加上-y参数来替代确认的动作。yum -y install wget。</li><li>卸载：输入yum remove packagename，其中 packagename 是你想要卸载的软件包的名称。比如，如果你想卸载 wget，那么命令就是yum<br>remove wget。一般卸载用的基本不用，因为它会卸载一些依赖软件，可能导致其他软件不能正常使用。</li><li>升级：输入yum update packagename，其中 packagename 是你想要升级的软件包的名称。如果你想更新所有的软件包，只要输入 yum<br>update即可。</li><li>无论是安装，升级，都必须是基于服务器仓库里面有这个软件才可以的，如果没有则无法安装或升级的。</li></ul></li><li>RPM安装软件<ul><li>其实前面yum安装的软件格式都是rpm格式的，只是yum是从网上下载的包来安装，而部分包是在网上的仓库里面是没有的，或者没有网络环境就可以使用rpm包进行安装。</li><li>安装：输入 rpm -i packagefile.rpm，其中 packagefile.rpm 是你的 RPM 包的文件名。个人习惯是rpm -ivh<br>xxx.rpm,用于显示过程。vh参数也适合卸载和升级。</li><li>卸载：输入 rpm -e packagefile.rpm，其中 packagefile.rpm 是你的 RPM 包的文件名。</li><li>升级：输入 rpm -U packagefile.rpm，其中 packagefile.rpm 是你的 RPM 包的文件名。</li></ul></li><li>编译安装<ul><li>编译安装适用于源码包，它不仅适合红帽系列，也适合其他Linux操作系统。以下是基本的编译安装步骤：</li><li>解压源码包，一般使用 tar -xvf packagefile.tar.gz 命令。</li><li>进入解压后的目录，一般使用 cd directoryname 命令。</li><li>配置，一般使用 .&#x2F;configure 命令。你可以添加参数来定制你的安装，比如指定安装目录 –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;xxx。</li><li>编译，使用 make 命令。</li><li>安装，使用 make install 命令。</li><li>以上步骤可能会因软件不同而有所改变，应根据具体的 README 或 INSTALL 文件进行操作。</li></ul></li></ul><p>编译安装最难的问题是依赖问题，比如我要编译安装软件A，但是它依赖B，C，D等，但是它一次只显示一个错误。而且B，C，D还有依赖，甚至出现循环依赖A依赖B，B依赖A的情况。</p><p>所以编译安装每完成一步，请通过echo   $? 打印出来上一条命令的执行结果，必须是”0”才进行下一步。</p><p>总结</p><ol><li>在实际运维过程中，一般用yum最多，rpm次之，编译安装目前已经使用很少了。这里实际上还衍生出来另外2个问题，我怎么知道我去哪里下载包（本地配置xxx.repo配置），服务器里面有些啥（yum源）。</li><li>在centos里面，yum update 会升级centos的版本，举个例子:如果我当前的版本是centos 7.5 ，但是最新的centos的版本是centos7.9，当我执行yum<br>update以后就会把整个系统的版本升级到centos7.9。所以这个命令一般是在安装完成系统的时候进行系统初始化的时候就需要完成的，一般情况下，如果业务已经部署上去了，一般就不建议再执行该命令。</li><li>编译安装技能属于很有用，但是平时很少用到的技能，比如最近的OpenSSH严重的CVE-2024-6387漏洞，虽然OpenSSH早就发布了修复漏洞版本，但是他们发布的都是源码包，如果没有直接可用的安装包，就需要自己进行编译安装。</li><li>可以利用yum只下载不安装的特性，把下载的rpm包传递到需要安装的环境里面使用rpm包进行安装。</li></ol><h5 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h5><p><strong>YUM源配置</strong></p><p>在Linux有一个目录，&#x2F;etc&#x2F;yum.repos.d&#x2F;这里的配置文件指定了yum命令去那个仓库下载文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[root@localhost]# </span><span class="language-bash">ll /etc/yum.repos.d/</span><br>总用量 40<br>-rw-r--r--. 1 root root 2523 8月   4 2022 CentOS-Base.repo<br>-rw-r--r--. 1 root root 1309 9月   5 2019 CentOS-CR.repo<br>-rw-r--r--. 1 root root  649 9月   5 2019 CentOS-Debuginfo.repo<br>-rw-r--r--. 1 root root  314 9月   5 2019 CentOS-fasttrack.repo<br>-rw-r--r--. 1 root root  630 9月   5 2019 CentOS-Media.repo<br>-rw-r--r--. 1 root root 1331 9月   5 2019 CentOS-Sources.repo<br>-rw-r--r--. 1 root root 6639 9月   5 2019 CentOS-Vault.repo<br>-rw-r--r--. 1 root root  951 10月  3 2017 epel.repo<br>-rw-r--r--. 1 root root 1050 10月  3 2017 epel-testing.repo<br><span class="hljs-meta prompt_"># </span><span class="language-bash">但是这里要多提一句，由于centos7已经过了最后支持时间，所以centos关闭了域名解析，所以我们只能更换其他源。这里更换的是阿里源，当然也可以更换成其他源。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">备份当前配置</span><br>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<br><span class="hljs-meta prompt_">#</span><span class="language-bash">下载阿里云的源</span><br>wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">一般更换源以后都需要清理更新下本地缓存，这个缓存其实就是记录了软件的索引，和版本之间的依赖关系。加速yum命令的使用。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">清理缓存</span><br>yum clean all<br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成缓存</span><br>yum makecache<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置其他源</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">刚才配置的源，实际上是替代官方源，因为无论是阿里还是其他源，最终都是同步官方源，目前只是官方源关闭了，阿里云未关闭而已。但是这些源里面的软件包并不是最全的，版本也不是最新的。在这里使用最广泛的源叫epel源。上面epel.repo文件就是下面名字安装以后才会生成的文件。</span><br>yum -y install epel-release<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装特定源</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">刚才无论是配置的阿里源还是epel源都属于公共源，虽然里面有些软件源里面都有，但是它们的版本都是比较低的，这里举2个最简单的例子。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Docker，在默认源里面的版本是1.13.1，但是这个版本已经非常老，甚至新版本的Docker的名字都发生了改变，改成了docker-ce。如果我们要安装比较新的版本就可以使用下面的方法。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">本应该使用官方源，但是由于docker仓库源被屏蔽的原因，原理是一样的</span><br>wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">这个安装了指定源以后，就可以安装最新版本Docker</span><br>yum install -y docker-ce<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Mysql，在centos7默认的源里面，甚至都找不到这个包，因为在centos7的源没有Mysql，只有Mariadb，至于他们的关系，又是另外一个故事，这里就不展开。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">下载源repo文件</span><br>wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装源</span><br>rpm -ivh mysql57-community-release-el7-11.noarch.rpm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装数据库</span><br>yum install -y mysql-community-server<br></code></pre></td></tr></table></figure><p><strong>本地源</strong></p><p>下面是在CentOS等基于RPM的Linux发行版中配置本地Yum源的步骤：</p><ol><li>挂载安装介质：首先，你需要将你的CentOS安装光盘（或ISO文件）挂载到某个目录，比如&#x2F;mnt&#x2F;cdrom。你可以使用以下命令来挂载：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">目前基本没有光盘了</span><br>mount /dev/cdrom /mnt/cdrom<br><span class="hljs-meta prompt_"># </span><span class="language-bash">选择本地iso，如果要选最全面的包，就要选最大的包，这里我只选了个折中的包，最大的包有差不多10G。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">挂载本地iso，提前准备好了目录和iso文件。</span><br>[root@localhost mnt]# mount -o loop /mnt/CentOS-7-x86_64-DVD-2009.iso /mnt/cdrom<br>mount: /dev/loop0 写保护，将以只读方式挂载<br>[root@localhost mnt]# df -h |grep cdrom<br>/dev/loop0      4.4G  4.4G     0  100% /mnt/cdrom<br></code></pre></td></tr></table></figure><ol start="2"><li>创建<code>.repo</code><br>文件：接下来，你需要在&#x2F;etc&#x2F;yum.repos.d&#x2F;目录下创建一个新的.repo文件，比如myrepo.repo。你可以使用文本编辑器来创建和编辑这个文件。在这个文件中，你需要指定你的本地Yum源的名称、描述、路径等信息。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[myrepo]<br>name=My Repository<br>baseurl=file:///mnt/cdrom // 需要和上面挂载的路径一致<br>enabled=1<br>gpgcheck=0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这个为了方便验证要成功，最好把网络关掉，然后把其他repo文件都移走，才能避免干扰。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在这里，baseurl指定了你的本地Yum源的路径（即你的安装介质的挂载点）。enabled=1表示这个Yum源是启用的。gpgcheck=0表示不进行GPG签名检查。</span><br></code></pre></td></tr></table></figure><ol start="3"><li>清除Yum缓存</li><li>测试本地Yum源</li></ol><p><strong>局域网源</strong></p><ol><li>准备一台服务器：首先，你需要准备一台可以作为Yum服务器的机器，它需要有一定的硬盘空间来存放软件包，同时需要安装HTTP或FTP服务器软件，用于提供网络访问。</li><li>挂载并复制软件包：然后，把CentOS的安装光盘挂载到这台服务器上，我们就借用上小节的&#x2F;mnt&#x2F;cdrom目录。把所有文件复制到一个目录下，例如&#x2F;mnt&#x2F;centos7。<ul><li>因为iso或者光盘是只读的，而配置源会产生文件，所以需要复制出来单独的目录，而不能复用原来的只读目录。</li></ul></li><li>安装createrepo：接下来，安装createrepo工具，这个工具可以创建Yum源需要的元数据信息： <code>yum install -y createrepo</code></li><li>创建Yum源元数据：然后在存放软件包的目录下创建Yum源的元数据： <code>createrepo /mnt/centos7</code></li><li>配置HTTP或FTP服务器：根据你的实际情况，配置HTTP或FTP服务器，使其可以提供对&#x2F;mnt&#x2F;centos7目录的访问。由于这里还没有讲web服务器，所以过程就略过。</li><li>在客户端配置Yum源：最后，在局域网内的其他机器上，你需要修改&#x2F;etc&#x2F;yum.repos.d&#x2F;目录下的.repo文件，将baseurl设置为你的Yum服务器的地址，为了避免干扰，需要把其他repo文件移走。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[mylocal]<br>name=My Repository<br>baseurl=http://192.168.31.100/<br>enabled=1<br>gpgcheck=0<br></code></pre></td></tr></table></figure><ol start="7"><li>运行yum clean all和yum list命令：如果能列出软件包，说明Yum源已经配置成功。</li></ol><p>总结</p><ol><li>我们需要掌握的就是如何更换源，知道有些什么源可以更换，其实在实际运维中，不仅只有centos系需要源，其他系统也需要，甚至某些软件也需要更换源，比如pip，nodejs。</li><li>掌握对于某些特殊软件，比如Docker，Mysql等软件源的更换方法。</li><li><code>/etc/yum.repos.d/</code>目录下哪些文件，和仓库的也是对应关系的，有兴趣的可以下去了解下。</li><li>我们可以搭建本地iso源或者局域网源来满足yum命令的使用。</li><li>前面2个源，我们依赖的都是iso文件，但是这里的iso文件都是比较老的，我们可以通过去同步公网源来保持数据的及时性。</li><li>这里搭建的都是centos7的iso，那么能否搭建支持多个源的服务器呢？当然是可以的，这里需要稍微调整下目录即可。</li><li>如果yum源对应的服务器，不能上网，我们又该怎么办呢？</li><li>我们如何才能把服务器的源同步下来呢？总不能一个一个的下载把，这里其实有个rsync协议可以直接源里面指定的目录文件都下载下来，这个后期会单独讲这个命令。</li></ol><h4 id="时钟同步"><a href="#时钟同步" class="headerlink" title="时钟同步"></a>时钟同步</h4><h5 id="ntp"><a href="#ntp" class="headerlink" title="ntp"></a>ntp</h5><p>任何一台电脑都会有一个本地时间的，由于CPU物理特性，它会越走越慢，如果我们管理着很多的服务器，但是他们的服务器时间不一样，这样会给我们业务带来问题的，现在很多业务对时间都非常敏感，所以我们必须保证我们的服务器的时间是一致的。</p><p>NTP，全称是Network Time<br>Protocol，即网络时间协议。它是用来同步网络中各个计算机的时钟的协议，使得网络中的计算机可以有一个一致的时间。它能够提供精确到亚秒级的时间同步，并且可以在计算机之间自动进行时间校对，以消除时钟漂移。</p><p>NTP常用于银行、股票交易、航空、电信等需要精确时间的领域，也是网络服务如email、数据库等应用的重要组成部分。</p><p>进行NTP配置是为了保证网络中的所有设备能够同步到准确的时间，这对于许多应用和服务来说是非常重要的。</p><ul><li>数据一致性：许多系统和应用依赖时间戳来跟踪事件或数据的更改。如果时间不一致，可能会导致数据错误或冲突。</li><li>日志分析和故障排查：如果网络中的设备时间不一致，分析日志和故障排查会变得复杂和困难，因为无法准确知道事件发生的顺序。</li><li>安全性：许多安全协议和技术（如Kerberos或SSL）都依赖于准确的时间。如果时间不准确，可能会引发安全问题，或者导致服务无法正常运行。</li><li>高精度应用：一些高精度应用（如科学研究、金融交易等）需要非常准确的时间同步。</li><li>法规合规：某些行业（如医疗、金融等）有法规要求对事件的时间进行精确记录。</li></ul><p><strong>配置NTP</strong></p><ol><li>安装ntp软件 <code>yum -y install ntp</code></li><li>配置ntp <code>  #默认是centos官方的ntp服务器，可以根据需要更换  vi /etc/ntp.conf  #启动ntp  systemctl start ntpd  systemctl enable ntpd</code></li><li>检查ntp同步状态 <code>ntpq -pn</code></li></ol><p><strong>NTP说明</strong></p><p>在没有安装ntp软件包的时候，我们如果要修改时间，只能通过date命令，直接来设置时间，但是这个时间设置随意性太强，不是很严谨。</p><p>通过yum安装ntp包以后，会安装出来2个命令，一个就是上图用到的ntpq，主要用于ntpd状态查询；另外一个就是ntpdate，它可以用户同步其他ntp服务器的时间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# ntpdate ntp.aliyun.com<br>29 Jul 23:12:25 ntpdate[1202]: adjust time server 203.107.6.88 offset 0.008099 sec<br></code></pre></td></tr></table></figure><p>总结下来，安装ntp软件包以后，我们有2种方式可以去同步时间，一个是使用ntpdate命令去同步，一个是通过ntpd服务方式去同步。</p><p>如果是使用ntpdate去同步，则需要配合我们前面讲到的任务计划(crontab),因为ntpdate执行同步，执行的是一次性任务。而使用的ntpd是以服务方式，是自动同步的。</p><p><strong>NTP服务端</strong></p><p>上面我们讲的ntpd也好，还是ntpdate也好，实际上都是作为ntp客户端的，但是我们有很多服务器，都处于内网，并且是不能上网的，他们是无法连接到公网的，所以我们就需要给这些内网的服务器搭建一个内网的ntp服务器，作为服务端给下游其他机器提供ntp服务。</p><p>如果我们选择作为ntp服务器的服务器，是可以通公网的，那么他只要按照服务方式启动ntp服务就可以作为ntp服务器，ntp服务是一个特殊服务，他既可作为服务端，也可以作为客户端。其他ntp客户端机器只要把ntp.conf里面的ntp服务器地址换成我们选定的服务器就可以。</p><p>如果我们选择的ntp服务器是没有上网能力，就只能以自己的时间作为标准，向下游提供服务。</p><ol><li>修改配置文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">server 127.127.1.0 iburst<br><span class="hljs-meta prompt_">#</span><span class="language-bash">注释其他server，添加上面这样，重启服务</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">这个配置就是以自己为标准时间</span><br></code></pre></td></tr></table></figure><ol start="2"><li>服务端检查ntp服务状态</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# ntpq -pn<br>remote refid st t when poll reach delay offset jitter<br>==============================================================================<br>*127.127.1.0 .LOCL. 5 l 2 64 1 0.000 0.000 0.000<br></code></pre></td></tr></table></figure><ol start="3"><li>客户端检查ntp服务状态</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# ntpq -pn<br>     remote           refid      st t when poll reach   delay   offset  jitter<br>==============================================================================<br>*192.168.31.104  LOCAL(0)         6 u    2   64    1    0.275   -4.114   0.018<br></code></pre></td></tr></table></figure><p>总结</p><ul><li>ntp使用很简单，但是在超大规模的情况下要想保证整个环境的稳定和可靠还是有很多事情需要做的。</li><li>上面的配置只考虑验证基本功能，并没有考虑到时间误差过大会发生什么，ntp并没有高可用等问题。</li><li>另外ntpq -pn 下面的很多参数也没有讲解是啥意思，有兴趣可以自己去查下。</li><li>我本人也有多年维护某大厂私有云平台ntp服务的经验，如果有兴趣可以和我交流。</li><li>ntp服务是不怕故障的，ntp怕的是时间跳变。</li></ul><h5 id="chrony"><a href="#chrony" class="headerlink" title="chrony"></a>chrony</h5><p>其实在NTP时间同步协议里面常用的软件有2个，一个就是上小节讲的软件ntp，另外一个就是本小节要讲的另外一个软件chrony，这2个软件都有类似的功能，目前国内的公有云厂商，有的厂商给用户提供的ntp，有的给用户的提供的chrony。</p><p>这2个软件，在默认情况下是互斥的，也就是只能同时启动一个，后启动的会把先启动的服务给停止掉。甚至默认情况下ntpdate命令和ntpd服务都是互斥的就算他们是一个软件包安装出来的，也就是ntpd服务在运行的时候，ntpdate命令我是无法执行的。</p><p>chrony在最小化安装的centos7系统里面都是自带的，如果不配置就和ntp一样，都是使用官方默认的源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# chronyc sources<br>210 Number of sources = 7<br>MS Name/IP address         Stratum Poll Reach LastRx Last sample               <br>===============================================================================<br>^* 100.100.61.88                 1  10   377   655  -1634us[-1629us] +/-   29ms<br>^+ 100.100.3.1                   2  10   377   313    +18us[  +18us] +/-   20ms<br>^+ 100.100.3.2                   2  10   377   695  +6110us[+6115us] +/-   25ms<br>^+ 100.100.3.3                   2  10   227   33m  +3569us[+3521us] +/-   26ms<br>^+ 100.100.5.1                   2  10   377   980    +24us[  +29us] +/-   20ms<br>^+ 100.100.5.2                   2  10   377   464   +931us[ +931us] +/-   21ms<br>^+ 100.100.5.3                   2  10   377  1008    -54us[  -48us] +/-   20ms<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">MS Name/IP address：  当前chrony客户端的上游服务器，其中<span class="hljs-string">&quot;*&quot;</span>代表当前上级源，<span class="hljs-string">&quot;+&quot;</span>代表参考，<span class="hljs-string">&quot;*&quot;</span>只能有一个，<span class="hljs-string">&quot;+&quot;</span>可以有多个。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Stratum： 数字越小，代表级别越高。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Poll：  代表同步时间间隔，这个10是最大，也就是1024秒同步一次，这个服务启动的时间一般都比较小，当同步越稳定就是同步的间隔就越低。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Reach： 代表最近8次同步状态，其中377代表8次都成功，如果有一次不成功则不是377。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">LastRx： 最近一次同步过去了多少时间，这个和前面的Poll对应，Poll越大，LastRx的值才可能越大。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Last sample: 代表和上游服务器的误差，有正，也有负数，正常的可以接受的大小大概是几十毫秒或者更低的微秒。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">上面的参数和ntpd -pn 显示参数基本上是一样的。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">chronyd默认是监听127.0.0.1，也就是他默认只能当作客户端，不能作为服务端。</span><br></code></pre></td></tr></table></figure><p>总结</p><ol><li>无论是ntp还是chrony，他们使用的协议都是udp，而不是一般常用的tcp协议，这个需要注意。</li><li>作为服务端，我要考虑他怎么给客户端提供稳定可靠的服务（高可用，防止跳变）。</li><li>作为客户端，我需要考虑的就是如果服务端故障(chrony其实不怕故障)，或者说服务端时间发生跳变，我怎么来降低他对我的影响。</li></ol><h4 id="DNS服务"><a href="#DNS服务" class="headerlink" title="DNS服务"></a>DNS服务</h4><p>通过hosts是可以跳过dns解析的，那什么是dns，为什么要有dns呢？</p><p>DNS，全称是“Domain Name System”或者叫“域名系统”，是互联网的一种服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP数串。</p><p>在互联网上，每个接入网络的设备都会被分配一个唯一的IP地址，你可以把它理解为互联网上的电话号码。当你想访问一个网站时，你的电脑实际上是向该网站服务器的IP地址发送请求。然而，IP地址是一串数字，对人类来说记忆起来相对困难。这时候，DNS就派上了用场，它的作用就是将这串数字的IP地址转换成更易于记忆的域名，比如Linux自带的默认情况下localhost就代表本机IP地址。</p><p>例如，当你在浏览器中输入<a href="http://www.qq.com时,你的计算机会首先询问dns服务器www.qq.com的ip地址,然后dns服务器会返回对应的ip地址给你的计算机,之后你的计算机才能通过该ip地址去访问qq.com服务器.这个过程被称为dns解析./">www.qq.com时，你的计算机会首先询问DNS服务器www.qq.com的IP地址，然后DNS服务器会返回对应的IP地址给你的计算机，之后你的计算机才能通过该IP地址去访问qq.com服务器。这个过程被称为DNS解析。</a></p><p><strong>Linux解析流程</strong></p><ol><li>用户请求:用户在应用程序（比如浏览器、命令行等）中输入域名，例如 <a href="http://www.example.com./">www.example.com。</a></li><li>查找本地缓存：但是这个缓存，默认情况下是看不到的。我通过抓包测试连续两次dns查询，也都是需要向dns发出请求的。所以我对这个缓存其实一直都是存疑的，但是实际运维中也确实遇到过解析异常的情况。</li><li>查询&#x2F;etc&#x2F;hosts文件：如果在本地缓存中找不到对应的IP地址，系统会检查 &#x2F;etc&#x2F;hosts<br>文件，这个文件可以手动配置域名和IP地址的映射关系。如果在这里找到了，也会直接返回IP地址给应用程序。</li><li>向DNS解析器发起查询：如果本地缓存和 &#x2F;etc&#x2F;hosts 文件中都没有找到对应的IP地址，系统会向预先配置的DNS解析器发起查询请求。DNS解析器通常在<br>&#x2F;etc&#x2F;resolv.conf 文件中指定，例如：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">nameserver 223.5.5.5<br>nameserver 114.144.144.114<br>这里的233.5.5.5 和114.114.114.114 则是国内提供的公共dns，可以替换为其他DNS服务器的IP地址。<br></code></pre></td></tr></table></figure><ol start="5"><li><h2 id="DNS解析器查询过程：-这里的dns服务器可以分为迭代和递归两种："><a href="#DNS解析器查询过程：-这里的dns服务器可以分为迭代和递归两种：" class="headerlink" title="DNS解析器查询过程： - 这里的dns服务器可以分为迭代和递归两种："></a>DNS解析器查询过程：<br> - 这里的dns服务器可以分为迭代和递归两种：</h2>迭代查询：在迭代查询中，当客户端向DNS服务器查询时，如果该服务器没有存储查询的信息，它会将能够提供信息的其他服务器的地址返回给客户端，让客户端去那个服务器查找。也就是说，DNS服务器不会自己去查询，而是告诉客户端应该去哪里查找。<ul><li>递归查询：在递归查询中，当客户端向DNS服务器查询时，如果该服务器没有存储查询的信息，它会代表客户端去其他服务器查询，直到找到答案才返回给客户端。在这个过程中，客户端只需要等待最终结果，所有的查询工作都由DNS服务器完成。</li><li>总结下来其实很简单，迭代自己没有答案，但是他会告诉你哪里有答案。递归他帮你去找到答案，然后告诉你答案。目前大部分dns都是递归。</li></ul></li><li>解析结果返回： DNS解析器将获取到的IP地址返回给系统的resolver，并且缓存这个结果。同时，将IP地址返回给应用程序，应用程序可以继续向该IP地址发送网络请求。</li><li>应用程序通信： 应用程序拿到IP地址后，可以与目标服务器建立通信，发送HTTP请求等操作。</li></ol><p><strong>Linux的dns配置文件</strong></p><p>前面讲过linux的dns配置文件是&#x2F;etc&#x2F;resolv.conf，他除了配置了dns服务器，还有其他配置，分别是什么意思，如果遇到解析失败他怎么办？</p><ul><li>nameserver :就是dns服务器地址，最多可以写3个。</li><li>search：搜索域，一般环境用不到，但是在k8s里面会搜索svc的时候会用到这个特性。大概意思就是你查询一个域名，如果没查到解析，他再给你添加个后缀，再进行查询。</li><li>options：<ul><li>timeout 如果在设定时间未返回数据，则他会请求下一个dns服务器查询。</li><li>attempts: 如果所有dns都查询了都失败了，他在重复这个操作的次数。</li><li>如果你的dns解析很慢，可以注意看这2个参数。</li></ul></li></ul><p>总结</p><ol><li>Linux的dns是一个很核心的基础服务，几乎所有的业务请求都是通过域名来实现，这样所有的请求都会通过dns才能正常使用。</li><li>有的程序并不会使用系统dns逻辑，而是程序自带的dns逻辑，这样就可能导致业务和实际预期不一样的情况。</li></ol><h5 id="搭建私有dns服务器"><a href="#搭建私有dns服务器" class="headerlink" title="搭建私有dns服务器"></a>搭建私有dns服务器</h5><p>基本命令</p><ul><li>ping：最简单的使用方式，也是使用最多的方式。</li><li>nslookup：比ping有更多的功能。</li><li>dig：比nslookup更新的支持更广泛的命令</li><li>dig命令和nslookup命令在最小化安装的系统里面都是默认不自带的，需要安装包bind-utils才有这2个命令</li></ul><p>在内部环境，有些会使用一些自定义的域名，用户指向某些内部服务，在各个公有云基本都有内网dns这个产品，道理其实是一样的。然后如果其他域名，他无法解析，他则可以通过递归的方式去请求上游dns服务器，然后返回给用户。这里就涉及2个配置：一个是递归到上游服务器，另外一个提供内部dns解析服务。</p><ol><li>安装dns软件：dns软件其实也有很多，我们这里以unbound来举例。 <code>yum -y install unbound</code></li><li>配置dns转发</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/unbound/unbound.conf <br><br>server:<br>    interface: 0.0.0.0    # 监听所有网卡接口上的请求<br>    access-control: 0.0.0.0/0 allow  # 允许所有IP地址访问<br><br>    forward-zone:<br>        name: &quot;.&quot; #代表所有域名<br>        forward-addr: 61.139.2.69 #可以替换自己的dns<br>        <br><span class="hljs-meta prompt_">#</span><span class="language-bash">这里的name可以匹配一个类型的域名，比如.com</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">通过这样可以控制内网用户对外请求，或者不同的域名指向不同的dns服务器</span><br></code></pre></td></tr></table></figure><ol start="3"><li>配置私有域名</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">名字可以自己自己定义</span><br>vi /etc/unbound/local.d/yunwei.conf<br><br>    # 私有域名<br>    #iprivate-domain: &quot;yumwei.com&quot;<br>    local-zone: &quot;yumwei.com.&quot; static<br><br>    # 私有域名的A记录<br>    local-data: &quot;server1.yunwei.com. IN A 192.168.1.1&quot;<br>    local-data: &quot;server2.yunwei.com. IN A 192.168.1.2&quot;<br></code></pre></td></tr></table></figure><ol start="4"><li>配置服务端</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cat /etc/unbound/unbound.conf <br>server:<br>    interface: 0.0.0.0<br>    port: 53<br>    access-control: 0.0.0.0/0 allow<br><br><br>    # 私有域名<br>    #iprivate-domain: &quot;yumwei.com&quot;<br>    local-zone: &quot;yumwei.com.&quot; static<br><br>    # 私有域名的A记录<br>    local-data: &quot;server1.yunwei.com. IN A 192.168.1.1&quot;<br>    local-data: &quot;server2.yunwei.com. IN A 192.168.1.2&quot;<br><br>    # 配置前向区域<br>    forward-zone:<br>        name: &quot;.&quot;<br>        forward-addr: 223.5.5.5<br><span class="hljs-meta prompt_">#</span><span class="language-bash">合并到一起的代码，重启dns生效</span><br>systemctl restart unbound<br></code></pre></td></tr></table></figure><p>总结</p><ol><li>这里的配置实现了unbound的两大核心功能，内部域名和递归转发。</li><li>核心功能还有很多，比如缓存，比如用户请求了qq.cm，dns可以把结果缓存到自己内部，如果有人再次来请求他，就直接返回给他，而不用在向上递归查询。</li><li>实际运维可以经常更新的内部域名放到&#x2F;etc&#x2F;unbound&#x2F;local.d&#x2F;目录下，运维起来会更轻松。</li></ol><h4 id="NFS服务"><a href="#NFS服务" class="headerlink" title="NFS服务"></a>NFS服务</h4><p>NFS（Network File System）是一种分布式文件系统协议，用于在网络上共享文件和目录。它允许多个计算机系统通过网络访问和共享存储在远程文件服务器上的文件。</p><h5 id="搭建nfs"><a href="#搭建nfs" class="headerlink" title="搭建nfs"></a>搭建nfs</h5><p>nfs服务分服务端和客户端，在公有云里面，厂商负责提供服务端，客户端(虚拟机)只要有对应的命令就可以正常挂载使用。</p><p><strong>服务端搭建</strong></p><ol><li>安装nfs软件 <code>yum install nfs-utils -y</code></li><li>配置nfs</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">编辑文件</span><br>vi /etc/exports<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">根据需要配置需要共享的目录，保存退出</span><br>/home *(rw,sync,no_root_squash)<br></code></pre></td></tr></table></figure><ol start="3"><li>更新配置 <code>exportfs -r</code></li><li>启动nfs</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start nfs-server<br>systemctl enable nfs-server<br><span class="hljs-meta prompt_">#</span><span class="language-bash">其实启动nfs服务的时候还会启动一个rpcbind的服务</span><br></code></pre></td></tr></table></figure><p><strong>客户端部署</strong></p><ol><li>部署nfs软件 <code>yum install nfs-utils -y</code><ul><li>#服务端和客户端其实需要安装的软件是一样的</li><li>#只是服务端需要配置如何提供服务，而客户端不需要，和ntpd其实比较类似</li></ul></li><li>创建测试目录 <code>mkdir /test</code></li><li>测试挂载<ul><li>#具体ip和路径以实际配置为准 <code> mount -t nfs 192.168.0.239:/home /test</code></li></ul></li></ol><p><strong>NFS配置参数</strong></p><p>在NFS配置中，有一些常见的参数需要设置。以下是一些常用的NFS配置参数：</p><ul><li>导出目录（Export Directory）：指定要在NFS服务器上共享的目录路径。例如，&#x2F;home&#x2F;nfs_share。</li><li>允许访问的客户端（Allowed<br>Clients）：指定可以访问NFS共享的客户端地址。可以使用单个IP地址、子网掩码或者通配符来指定客户端。例如，192.168.1.0&#x2F;24表示允许所有在192.168.1.0&#x2F;24子网中的客户端访问。</li><li>访问权限（Access Permissions）：指定对共享文件的访问权限。可以设置读取、写入和执行权限。例如，rw表示读写权限，ro表示只读权限。</li><li>同步选项（Sync Option）：指定NFS服务器的同步选项，即文件写入的同步方式。可以设置为sync（同步写入）或async（异步写入）。同步写入会导致写入操作变慢但较安全，而异步写入会提高性能但可能会有数据丢失的风险。</li><li>导出选项（Export Options）：提供其他选项来控制NFS共享的行为。例如，no_root_squash用于禁止将root用户映射到匿名用户，no_subtree_check用于禁用子树检查等</li></ul><p>总结</p><ul><li>nfs的服务端会监听很多端口，如果有防火墙的时候要注意端口策略。</li><li>nfs客户端如果是自动挂载，要考虑nfs服务端异常可能导致机器无法启动。</li><li>如果在运行中，nfs服务端异常，则客户端机器也会跟着异常。</li><li>客户端异常表现是负载很高，df命令会卡住。</li><li>在客户端使用之前，可以使用命令确认服务端是否正常。 <code>showmount -e 192.168.31.107</code></li></ul><h4 id="LVM"><a href="#LVM" class="headerlink" title="LVM"></a>LVM</h4><p>LVM（Logical Volume Manager，逻辑卷管理器）是一种在 Linux 系统上管理磁盘存储的高级工具。它允许用户管理和控制存储设备，通过创建逻辑卷（Logical<br>Volumes，LVs）和卷组（Volume Groups，VGs），来更灵活地管理存储空间的分配和使用。</p><ul><li>物理卷（Physical Volume，PV）：物理卷是 LVM 管理的基本单元，通常是一个磁盘分区或整个物理磁盘。物理卷必须先初始化为 LVM 格式才能被<br>LVM 管理。</li><li>卷组（Volume Group，VG）：卷组是由一个或多个物理卷组成的逻辑集合。卷组提供了一个抽象层，使得多个物理卷能够被统一管理和分配。</li><li>逻辑卷（Logical Volume，LV）：逻辑卷是卷组内的虚拟分区，它们可以被格式化成文件系统，并像物理磁盘上的分区一样使用。逻辑卷的大小和数量可以根据需要动态调整。</li><li>简单来说就是pv就是原始硬盘，vg就是把几个原始硬盘组合到一起，lv就是把组合到一起硬盘划分出来使用。</li></ul><p><strong>创建lvm</strong></p><ol><li>安装lvm命令 <code>yum install lvm2</code></li><li>准备磁盘</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">准备了一个裸盘，一个分区</span><br>[root@localhost ~]# fdisk -l<br>磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区<br>Units = 扇区 of 1 * 512 = 512 bytes<br>扇区大小(逻辑/物理)：512 字节 / 512 字节<br>I/O 大小(最小/最佳)：512 字节 / 512 字节<br>磁盘标签类型：dos<br>磁盘标识符：0x67aa216a<br><br>   设备 Boot      Start         End      Blocks   Id  System<br>/dev/sdb1            2048    41943039    20970496   83  Linux<br><br>磁盘 /dev/sdc：21.5 GB, 21474836480 字节，41943040 个扇区<br>Units = 扇区 of 1 * 512 = 512 bytes<br>扇区大小(逻辑/物理)：512 字节 / 512 字节<br>I/O 大小(最小/最佳)：512 字节 / 512 字节<br></code></pre></td></tr></table></figure><ol start="3"><li>创建pv</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">由于sdb1是分区，所以提示需要擦除。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">所以这里用裸盘比较合适</span><br>[root@localhost ~]# pvcreate /dev/sdb1<br>WARNING: ext4 signature detected on /dev/sdb1 at offset 1080. Wipe it? [y/n]: y<br>  Wiping ext4 signature on /dev/sdb1.<br>  Physical volume &quot;/dev/sdb1&quot; successfully created.<br>[root@localhost ~]# pvcreate /dev/sdc<br>  Physical volume &quot;/dev/sdc&quot; successfully created.<br></code></pre></td></tr></table></figure><ol start="4"><li>创建vg</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# vgcreate myvg /dev/sdb1<br>  Volume group &quot;myvg&quot; successfully created<br>[root@localhost ~]# vgextend myvg /dev/sdc<br>  Volume group &quot;myvg&quot; successfully extended<br><span class="hljs-meta prompt_">#</span><span class="language-bash">先创建vg，然后往vg里面加pv或者说磁盘</span><br></code></pre></td></tr></table></figure><ol start="5"><li>创建lv</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# lvcreate -L 10G -n mylv myvg<br>  Logical volume &quot;mylv&quot; created.<br></code></pre></td></tr></table></figure><ol start="6"><li>格式化&amp;挂载</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkfs.ext4 /dev/myvg/mylv<br>mkdir /test<br>mount /dev/myvg/mylv /test<br></code></pre></td></tr></table></figure><ol start="7"><li>扩容&amp;缩容</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">　注意：这里扩容只是增加lv大小，实际到文件系统还需要再进行操作。另外就是ext4和xfs可以扩容，但是xfs还可以缩容。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">无论是缩容lvm还是磁盘需要慎重。</span><br><br><br>[root@localhost ~]# lvextend -L +2G /dev/myvg/mylv<br>Size of logical volume myvg/mylv changed from 10.00 GiB (2560 extents) to 12.00 GiB (3072 extents).<br>Logical volume myvg/mylv successfully resized.<br><br><br>[root@localhost ~]# lvextend -L +2G /dev/myvg/mylv<br>Size of logical volume myvg/mylv changed from 10.00 GiB (2560 extents) to 12.00 GiB (3072 extents).<br>Logical volume myvg/mylv successfully resized.<br></code></pre></td></tr></table></figure><p>总结</p><ol><li>无论是分区还是磁盘都可以作为lv加入到lvm里面使用，但是原始里面的是数据会丢失。</li><li>lvm一句话概括就是创建pv，组成vg，然后再分成lv使用。</li><li>这里只简单写了lvm的基本创建和使用功能，里面还有很多命令并没有讲。</li><li>在centos7安装过程中，在磁盘分区的时候，如果不对磁盘做任何操作，默认就是以lvm格式安装操作系统。</li><li>有些分布式系统，对文件系统是有一定要求的，lvm是不满足要求的。</li></ol><h4 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h4><p>SELinux（Security-Enhanced Linux）是一种安全增强型的Linux安全子系统，由美国国家安全局（NSA）开发，旨在增强Linux系统的安全性。它通过实施强制访问控制（MAC）来提供高级的安全保护机制。</p><p>具体来说，SELinux引入了一种额外的安全层，不同于传统的自由访问控制（DAC）。在DAC中，每个文件、进程或用户可以自行设定权限，并且用户可以超越其他用户拥有更高权限。这可能导致安全漏洞，因为任何一个受损的进程都可以访问系统上的任何资源。</p><p>虽然SElinux很安全，但是在实际运维中，除了特殊要求，一般都会关闭selinux。因为如果要使用Selinux，软件或者应用程序需要很复杂的配置才可以。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">临时关闭，重启失效</span><br>setenforce 0<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置文件，重启以后生效</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">也可以通过vi进行修改</span><br>sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config<br></code></pre></td></tr></table></figure><p>库文件<br>我们在介绍如何让Docker镜像最小化的时候，有提过以下这个库文件，在平时使用也是不容易感知到这个库文件的。在Linux基本目录介绍的时候，也说过有2个目录：&#x2F;lib<br>&#x2F;lib64是库文件目录，存放系统动态链接库和内核模块。</p><p>在Linux的哲学里面一切皆文件里面，我们对Linux的操作实际上就是对文件进行增删查改，这些基础功能底层逻辑就是各种函数，相当于系统把这些功能封装在各种函数里面，供应用程序去调用。</p><ul><li>文件读写函数：如 fopen、fclose、fread、fwrite 等，用于打开、关闭、读取和写入文件。</li><li>终端输入输出函数：如 printf、scanf、fgets、fputs 等，用于从终端读取输入和输出结果。</li><li>系统调用函数：如 read、write 等，用于直接与文件描述符进行交互，提供更底层的文件操作能力。</li></ul><p>这些上面的函数都集成在系统的库文件里面如果我们自己开发的程序能力，就需要使用到这些库文件，这就是动态库，供操作系统的程序调用。和动态库对应的就是静态库。所以静态库，就不只依赖自己，完全不依赖系统自带的库文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">动态库</span><br>[root@localhost ~]# ldd /usr/bin/python<br>  linux-vdso.so.1 =&gt;  (0x00007ffd632ce000)<br>  libpython2.7.so.1.0 =&gt; /lib64/libpython2.7.so.1.0 (0x00007f96125a0000)<br>  libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007f9612384000)<br>  libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007f9612180000)<br>  libutil.so.1 =&gt; /lib64/libutil.so.1 (0x00007f9611f7d000)<br>  libm.so.6 =&gt; /lib64/libm.so.6 (0x00007f9611c7b000)<br>  libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f96118ad000)<br>  /lib64/ld-linux-x86-64.so.2 (0x00007f961296c000)<br><span class="hljs-meta prompt_">  </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">静态库</span><br>[root@localhost ~]# ldd /usr/bin/cd<br>  不是动态可执行文件  <br></code></pre></td></tr></table></figure><p><strong>总结</strong></p><ol><li>selinux如果不使用，一般都需要在系统进行初始化或者制作通用模板的时候就把永久关闭掉。</li><li>库文件一般只有在进行某些软件的编译安装的时候会涉及到库文件因为版本不对导致异常的清空。</li></ol><h4 id="SWAP"><a href="#SWAP" class="headerlink" title="SWAP"></a>SWAP</h4><p>Swap是计算机系统中用于暂时存放内存数据的一种技术。它通常指的是交换空间（swap<br>space），是一种虚拟内存的扩展，用于在物理内存不足时将不活动的内存页从RAM（随机存取存储器）移动到硬盘上的一部分空间。这样，RAM中可以腾出空间来加载当前需要的数据和程序。</p><p>目前来说，对于动辄几百G,甚至上T的内存面前，swap已经基本没有使用的必要了，但是在互联网早期，内存都很低的情况，swap是提高系统性能的一种重要方法。而且在centos7安装的时候无论默认的lvm还是标准分区，都会单独拿一块分区出来用作swap。只是随着内存的提高，就算开启了swap也会关闭swap功能，而且k8s这个软件在某些版本里面默认情况下，如果有swap还无法启动成功。</p><ul><li>关闭swap <code>swapoff -a</code></li><li>开启swap</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建一个文件，大小，路径，名字都可以自定义</span><br>dd if=/dev/zero of=/swapfile bs=1M count=1024<br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置权限，保证安全</span><br>chmod 600 /swapfile<br><span class="hljs-meta prompt_">#</span><span class="language-bash">标记为swap文件</span><br>mkswap /swapfile<br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动swap</span><br>swapon /swapfile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果要永久启用，需配置fstab</span><br>/swapfile   none    swap    sw    0   0<br></code></pre></td></tr></table></figure><p><strong>总结</strong></p><ol><li><code>swap</code><br>，如果没开则不需要管，如果开启了，也可以在初始化的时候进行关闭，看swap是否正常，其实主要看他的动态变化，如果变化大，说明内存和磁盘在进行大量数据交换，会影响性能。如果变化很小或者几乎没有变化，则说明使用不频繁则不会有啥问题。</li><li>在内核里面还有个参数，可用于swap的介入程度，数字越小，就是让swap介入越低。</li></ol><h3 id="Linux日志"><a href="#Linux日志" class="headerlink" title="Linux日志"></a>Linux日志</h3><h4 id="message日志"><a href="#message日志" class="headerlink" title="message日志"></a>message日志</h4><p>在Linux系统中，message 日志通常指的是系统日志（system<br>logs）中的一部分，这些日志记录了系统和应用程序的各种信息、警告和错误。message日志也是我们在日常运维中查看使用最最频繁的日志，没有之一。是属于文本格式的日志，可以直接用Linux操作普通文件的命令来分析。主要记录以下日志</p><ul><li>系统启动和关机信息：记录系统何时启动和关机，以及相关的详细信息。</li><li>服务启动和停止信息：记录各种系统服务（如网络服务、数据库服务等）的启动、停止或重启的信息。</li><li>内核消息：包括关于硬件、驱动程序和内核的运行时消息。</li><li>一般的系统运行消息：例如系统运行时的一般信息、警告和调试信息。</li></ul><p>日志基本信息</p><ul><li>日志路径：&#x2F;var&#x2F;log&#x2F;message<ul><li>日志格式: 文本格式</li><li>查看方法：普通查看文件命令，tail cat vi 等命令</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">手工修改日志</span><br>[root@iZ2vci40gfjzarlead7vliZ ~]# date -s 15:49:00<br>Tue Jul  2 15:49:00 CST 2024<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">日志记录</span><br>cat  /var/log/messages|grep &quot;Time has&quot;<br>Jul  2 15:49:00 iZ2vci40gfjzarlead7vliZ systemd: Time has been changed<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">是看不出来为什么启动失败的</span><br>[root@iZ2vci40gfjzarlead7vliZ ~]# systemctl restart docker<br>Job for docker.service failed because the control process exited with error code. See &quot;systemctl status docker.service&quot; and &quot;journalctl -xe&quot; for details.<br>[root@iZ2vci40gfjzarlead7vliZ ~]# systemctl status docker.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">日志内容略 分析日志确定原因</span><br></code></pre></td></tr></table></figure><p>总结</p><ul><li>message日志是最重要的分析系统情况的日志，没有之一。</li><li>message日志记录的字段里面记录，时间，主机名，用户（用这个用户可以更明显的确认日志来源）</li><li>这个用户有kernel，systemd，journal，应用程序（docker，nginx这些）</li><li>分析系统崩溃，程序启动失败等都会用到他</li><li>甚至在根分区磁盘不够的情况下，首先要删除的也是message日志</li><li>参与logrotate的日志轮转进行更新，避免把磁盘打满。</li></ul><h4 id="secure日志"><a href="#secure日志" class="headerlink" title="secure日志"></a>secure日志</h4><p>在Linux系统中，secure 日志是系统日志的一部分，主要用于记录与系统安全相关的活动和事件。一般情况下，我们没有安全相关的需求是不会分析这个日志的，这个日志主要记录一下几个方面的内容。</p><ul><li>用户登录和认证：<ul><li>记录用户登录系统的事件，包括成功和失败的登录尝试。</li><li>记录用户使用的认证方法，如密码、SSH密钥等。</li></ul></li><li>sudo 使用记录：<ul><li>记录使用 sudo 命令进行特权操作的用户和时间。</li><li>记录特权操作的成功和失败情况。</li></ul></li><li>安全策略变更：<ul><li>记录安全策略的修改，如用户权限的变更、密码策略的更新等。</li></ul></li><li>系统服务启动和停止：<ul><li>记录系统服务的启动、停止或重启的信息，这些操作可能会涉及到特权操作或安全相关的服务。</li></ul></li><li>防火墙和安全组规则：<ul><li>记录防火墙（如iptables）或安全组（如ufw）规则的变更或拒绝的尝试。</li></ul></li><li>系统安全事件：<ul><li>记录系统可能遭受到的攻击或异常行为，如登录失败的暴力攻击尝试、拒绝服务攻击的迹象等。</li></ul></li></ul><p>日志基本信息</p><ul><li>日志路径：&#x2F;var&#x2F;log&#x2F;secure</li><li>日志格式: 文本格式</li><li>查看方法：普通查看文件方法：tail cat vi 等命令</li></ul><p>总结</p><ol><li>该日志主要主要是和安全登录相关，只要暴露了攻击面，就会被暴力破解。</li><li>当然只要没有人恶意连续大量的连接，一般情况下倒是可以忽略不计的。</li><li>当然从安全的角度来说，我们需要减少暴露面，强密码来保证服务器的安全。</li></ol><h4 id="btmp日志"><a href="#btmp日志" class="headerlink" title="btmp日志"></a>btmp日志</h4><p>在Linux系统中，btmp 日志是系统日志的一部分，它记录了所有登录失败的尝试，包括失败的登录用户名、登录失败的时间以及登录失败的来源<br>IP 地址。</p><ul><li>记录失败登录时间：准确记录每次错误登录发生的时间，精确到秒甚至更小的时间单位。这对于分析在特定时间段内是否存在异常的登录活动非常重要。例如，如果在凌晨时分出现了大量不正常的登录尝试，可能意味着存在潜在的安全威胁，如黑客试图暴力破解密码。</li><li>登录用户信息：记录尝试登录的用户名。通过分析频繁被尝试登录的用户名，可以确定哪些账户可能成为攻击目标。如果某些具有管理员权限的用户名被频繁尝试登录，就需要特别关注并加强相关账户的安全措施。</li><li>登录来源信息：在某些情况下，还可能记录登录尝试的来源 IP 地址。这对于追踪可能的恶意攻击者的位置或识别来自特定网络区域的异常活动很有帮助。如果发现某个<br>IP 地址不断尝试错误登录多个账户，就可以将该 IP 地址列入黑名单或采取其他相应的安全措施。</li></ul><p>日志基本信息</p><ul><li>日志路径：&#x2F;var&#x2F;log&#x2F;btmp</li><li>日志格式:  二级制格式</li><li>查看方法：使用专用命令lastb</li></ul><p>总结</p><ol><li>这个日志也是属于平时关注比较少的日志，如果未开放到公网或者限制比较严格，这里应该只有很少记录。</li><li>如果没有暴露面，也确实不用怎么关注他。</li><li>如果暴露到公网，我们可以根据上面的情况做一些针对性的限制（比如错误达到几次就自动屏蔽）。</li></ol><h4 id="wtmp日志"><a href="#wtmp日志" class="headerlink" title="wtmp日志"></a>wtmp日志</h4><p>在Linux系统中，wtmp 日志是系统日志的一部分，它主要用于记录系统的登录和注销等相关信息。这个刚好和btmp相对应，一个记录失败，一个记录成功。</p><ul><li>记录登录和注销时间：它准确地记录了用户登录到系统的时间以及注销的时间。这对于跟踪用户的活动时间以及系统的使用情况非常重要。例如，管理员可以通过查看<br>wtmp 日志来确定某个用户在特定时间段内的登录时长，从而了解用户对系统资源的使用情况。</li><li>记录用户身份信息：wtmp 日志会记录登录用户的用户名等身份信息。这有助于管理员识别哪些用户在何时访问了系统。在多用户环境中，如果出现了系统问题或安全事件，通过查看<br>wtmp 日志可以快速确定当时登录的用户，以便进一步调查相关情况。</li><li>记录登录终端和来源信息：它还可能记录用户登录的终端设备（如本地终端、远程登录的终端类型等）以及登录的来源 IP<br>地址（如果是远程登录）。这对于了解用户的登录方式和位置很有帮助。例如，如果发现某个用户经常从不同的 IP<br>地址登录，可能需要进一步核实该用户的身份和活动是否正常。</li></ul><p>日志基本信息</p><ul><li>日志路径：&#x2F;var&#x2F;log&#x2F;wtmp</li><li>日志格式:  二进制格式</li><li>查看方法：使用专用命令last</li></ul><p>总结</p><ol><li>该日志主要记录成功的日志，如果服务器运行的时间越长，他记录的信息越多。</li><li>当日常运维中需要查询某个命令是谁执行的就可以通过history和该记录进行综合分析。</li><li>该日志记录的用户，来源ip，登录时间，登出时间。</li></ol><h4 id="lastlog日志"><a href="#lastlog日志" class="headerlink" title="lastlog日志"></a>lastlog日志</h4><p>在Linux系统中，lastlog日志是系统日志的一部分，主要用于记录每个用户最后一次登录时间的日志文件。</p><ul><li>跟踪用户登录情况：<ul><li>它记录了每个系统用户最后一次成功登录系统的时间。这对于管理员了解用户对系统的使用频率和最近的活动情况非常有帮助。例如，如果某个用户长时间没有登录，管理员可以检查该用户是否仍然需要该账户，或者是否存在账户闲置浪费系统资源的情况。</li><li>通过对比不同时间点的 lastlog 记录，可以发现用户登录行为的变化。比如某个用户原本每周都会登录，突然连续几周没有登录记录，可能意味着该用户的工作职责或使用需求发生了改变。</li></ul></li><li>安全监测：<ul><li>在安全方面，lastlog 日志可以作为一种监测手段。如果发现某个用户的最后登录时间与预期不符，比如用户声称自己没有登录过，但<br>lastlog 显示有近期的登录记录，这可能表明该用户账户存在安全风险，可能被他人盗用。</li><li>对于新创建的用户，lastlog 初始时是没有记录的。当该用户首次登录后，lastlog 会记录下登录时间。这样管理员可以通过查看<br>lastlog 来确定新用户是否已经开始正常使用系统，以及是否存在异常的首次登录情况（如在不应该的时间或地点登录）</li></ul></li></ul><p>日志基本信息</p><ul><li>日志路径：&#x2F;var&#x2F;log&#x2F;lastlog</li><li>日志格式:  二进制格式</li><li>查看方法：使用专用命令lastlog</li></ul><p>总结</p><ol><li>他会统计linux所有的用户(&#x2F;etc&#x2F;passwd)里面的所有用户，无论他们是否有登录权限</li><li>有些服务，比如nginx，默认是不允许交互登录的，如果你尝试使用了su命令去切换登录，这里也会记录你登录。</li><li>btmp，wtmp，lastlog这3个命令都是二进制格式，都是记录Linux登录相关的日志。</li></ol><h4 id="cron日志"><a href="#cron日志" class="headerlink" title="cron日志"></a>cron日志</h4><p>cron日志</p><ul><li>任务的执行时间：可以确切知道定时任务在何时被触发执行。</li><li>任务执行结果：判断任务是否成功完成。如果任务失败，日志中可能会包含相关的错误信息，帮助你定位问题。例如，如果是脚本执行错误，可能会显示脚本的具体错误输出。</li><li>资源使用情况（某些情况下）：有些更详细的日志可能会包含任务执行时的资源使用情况，如 CPU 占用、内存使用等，但这通常需要更高级的日志配置或特定的工具来分析。</li></ul><p>日志基本信息</p><ul><li>日志路径：&#x2F;var&#x2F;log&#x2F;cron</li><li>日志格式: 文本格式</li><li>查看方法：普通查看文件方法：tail cat vi 等命令</li></ul><p>总结</p><ul><li>这个日志就是查看任务计划的执行情况。</li><li>如果你的设置了任务计划，未按照你的预期执行，你可以来查看该日志，确认任务计划是否执行过(是否执行成功是另外一回事)。</li></ul><h4 id="sar日志"><a href="#sar日志" class="headerlink" title="sar日志"></a>sar日志</h4><p>可能从严格意义来说，sar并不能算linux日志，他应该属于linux监控工具。</p><p>sar (System Activity Reporter) 是 Linux 操作系统中的一个实用工具，用于收集、报告和保存系统活动信息。sar 是 sysstat<br>套件的一部分，能够监控和报告各种系统性能指标，包括 CPU、内存、磁盘 I&#x2F;O、网络等。</p><p>前面几个日志由于记录的内容相比较单一(message除外，但是查看很简单)由于sar记录了非常的多的内容，而且sar只是一个命令，他就会很多的参数来查看不同类型的监控指标。</p><p>日志基本信息</p><ul><li>日志路径：&#x2F;var&#x2F;log&#x2F;sa(目录)</li><li>日志格式:  二进制格式</li><li>查看方法：使用专用命令sar</li><li>安装方法：yum -y install sysstat</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看cpu信息</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">默认是查看cpu信息，前面显示的，是24小时前的，最近的在最下面</span><br>[root@localhost sa]# sar<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看磁盘io信息</span><br>[root@localhost sa]# sar -b<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看内存信息</span><br>[root@localhost sa]# sar -r<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看网络信息</span><br>[root@localhost sa]# sar -n DEV<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看历史信息</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">保留最近一个月的数据，可以和上面的其他指标组合查询</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">不同的数字代表本月或者上月的某一天</span><br>sar -f /var/log/sa/sa25<br></code></pre></td></tr></table></figure><p>总结</p><ul><li>默认最小化安装是没有这个命令的，可以安装这个命令来替代部分监控的作用。</li><li>在历史业务异常的时候，也可以通过查看历史监控信息来分析可能存在的问题。</li></ul><h4 id="journal日志"><a href="#journal日志" class="headerlink" title="journal日志"></a>journal日志</h4><p>journal 是 Linux 系统中的系统日志管理工具，它是 systemd 的一部分，提供了一个集中的方式来收集、管理和查看系统日志。journal<br>相比传统的 syslogd 和 rsyslogd 等日志系统，具有更强的功能和灵活性。</p><p>所以，简单来说：journal并不是日志，而是日志管理工具。</p><ul><li>统一的日志存储：<ul><li>它将来自不同来源的日志信息集中存储在一个统一的日志系统中。这包括内核日志、系统服务日志、应用程序日志等。不再像传统的<br>Linux 日志系统那样分散在多个不同的文件中（如&#x2F;var&#x2F;log&#x2F;messages、&#x2F;var&#x2F;log&#x2F;syslog<br>等）。例如，当系统启动时，内核的初始化信息、各个服务的启动过程以及应用程序的相关事件都可以在 Journal 中连贯地记录下来。</li><li>这种统一存储使得查找和分析日志更加方便。你不需要在多个不同的文件中切换查找相关信息，只需要在 Journal 日志中进行搜索即可。</li></ul></li><li>高效的存储和访问方式：<ul><li>Journal 采用了基于数据库的存储方式，能够快速地写入和检索日志信息。它使用了索引和优化的数据结构，相比传统的基于文本文件的日志系统，在处理大量日志数据时具有更高的性能。</li><li>当你需要查询某个特定时间段内的日志或者搜索特定关键词时，Journal<br>能够快速地定位并返回结果。例如，在排查一个在特定时间点发生的系统故障时，可以迅速找到该时间附近的相关日志记录。</li></ul></li><li>支持多种日志格式：<ul><li>Journal 可以处理不同格式的日志信息，包括文本格式和结构化数据格式。对于一些现代的应用程序和服务，它们可以将更丰富的结构化数据写入<br>Journal，这样在分析日志时可以获取更多的细节信息。</li><li>比如，一个网络服务可以将连接的 IP 地址、端口号、请求的时间等结构化信息作为日志记录在 Journal 中，方便管理员进行更精确的分析和监控。</li></ul></li></ul><p>日志基本信息</p><ul><li>日志路径：&#x2F;var&#x2F;log&#x2F;journal(目录)</li><li>日志格式:  二进制格式</li><li>查看方法：使用专用命令journalctl</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">从头显示日志</span><br>[root@lcoalhost journal]# journalctl <br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看最新的日志</span><br>[root@localhost journal]# journalctl -f<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看指定时间的日志</span><br>[root@localhost journal]# journalctl --since &quot;2024-08-08 10:00:00&quot; --until &quot;2024-08-09 12:00:00&quot; -- Logs begin at Mon 2024-05-13 09:03:04 CST, end at Fri 2024-08-09 23:53:01 CST. --<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看指定服务的日志</span><br>[root@localhost journal]# journalctl -u docker -- Logs begin at Mon 2024-05-13 09:03:04 CST, end at Fri 2024-08-09 23:55:01 CST. --<br></code></pre></td></tr></table></figure><p>总结</p><ul><li>这里只是简单说了下journal的日志使用方法，具体还有很多功能都没说明。</li><li>从前面的日志我们其实可以看到journal和message和cron等日志是有重叠的，其实我一般都很少看这个日志。</li><li>很多服务启动失败，会直接提示你使用journal命令查看。</li></ul><h4 id="dmesg日志"><a href="#dmesg日志" class="headerlink" title="dmesg日志"></a>dmesg日志</h4><p>在 Linux 系统中，dmesg是一个用于查看内核环形缓冲区（kernel ring buffer）内容的命令。它主要记录了系统启动时的内核信息以及内核在运行过程中的一些关键事件和错误等。</p><p>dmesg 的作用</p><ul><li>系统启动信息：<ul><li>dmesg可以显示系统启动过程中的详细信息，包括硬件检测、驱动初始化等。例如，当系统启动时，它会显示关于 CPU<br>型号、内存大小、硬盘识别等信息。这对于了解系统硬件配置和排查启动问题非常有帮助。</li><li>比如，在启动过程中，如果某个硬件设备没有被正确识别，dmesg中可能会有相关的错误提示，帮助你确定问题所在。</li></ul></li><li>内核事件和错误记录：<ul><li>它记录了内核在运行过程中的各种事件，如设备的连接和断开、驱动的加载和卸载等。同时，也会记录内核错误和警告信息。</li><li>例如，如果某个设备驱动出现问题，可能会在dmesg中看到相应的错误代码和描述。这有助于系统管理员和开发者快速定位内核相关的问题。</li></ul></li></ul><p>日志基本信息</p><ul><li>日志路径：&#x2F;var&#x2F;log&#x2F;dmesg</li><li>日志格式:  文本格式</li><li>查看方法：可以使用文本方式，也可以使用dmesg专用命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@ilocalhost log]# dmesg  <br></code></pre></td></tr></table></figure><p>总结</p><ul><li>其实一般没有硬件问题，这个日志是很少用到的。</li><li>如果不加任何参数，则日志记录的时间是从开机启动的时间计算，如果要方便人类识别则加参数。 <code>dmesg -T</code></li></ul><h4 id="kdump日志"><a href="#kdump日志" class="headerlink" title="kdump日志"></a>kdump日志</h4><p>在Linux基础-系统安装的时候，我们曾经在部署介绍说kdump功能，那什么是kdump呢？</p><p>kdump 是一个用于在 Linux 系统中进行内核崩溃转储的工具和机制。它允许系统在发生严重内核问题或崩溃时，捕获并保存内核转储文件（core<br>dump），以便后续分析和故障排除。</p><ul><li>主要功能和用途：<ul><li>捕获内核转储文件：kdump<br>的主要功能是在系统遇到严重的内核问题、panic或崩溃时，能够捕获当前内核的状态并将其保存到预先配置的文件系统中。这些转储文件包含了导致崩溃的内核、内存和进程信息，有助于后续进行故障分析和修复。</li><li>保护关键系统数据：当系统遇到崩溃时，常规的日志和调试工具可能无法正常工作。kdump<br>提供了一种在系统崩溃时仍能获取关键数据的方法，避免了信息丢失和无法复现问题的困难。</li><li>提供可靠的故障诊断工具：使用 kdump，系统管理员可以通过分析生成的转储文件来确定崩溃原因，查找相关的软件缺陷或硬件问题，并采取相应的修复措施。</li><li>集成和配置：kdump 需要事先进行配置才能正常工作。管理员需要为其指定一个用于保存转储文件的合适的文件系统分区，并确保系统在崩溃时能够自动触发kdump<br>的操作。</li></ul></li></ul><p>日志基本信息</p><ul><li>日志路径：&#x2F;var&#x2F;crash(目录)默认为空，因为崩溃了才有</li><li>日志格式:  二进制格式</li><li>查看方法：需要专用命令或者工具才能分析</li></ul><p>总结</p><ul><li>需要确保kdump功能的打开，或者配置正确，在系统崩溃的时候才会记录日志。</li><li>kdump需要专门的内存，在系统安装的时候可以选。</li><li>kdump文件一般比较大，需要预留足够的空间，避免空间不够大，导致生成日志失败，我见过都是几十G。</li><li>kdump可以提前测试模拟崩溃，避免配置导致kdump无法生成。</li><li>已知内核bug，或者硬件故障可能会出发系统崩溃而产生kdump日志。</li><li>kdump需要专业工具和专业人员才能分析，至少我是不会分析的。</li><li>手工让系统崩溃 <code>echo  c  &gt; /proc/sysrq-trigger</code></li></ul><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>从功能来区分，主要包括系统日志(message和journal)；登录日志(btmp,wtmp,lastlog)；安装相关(secure);内核相关(dmesg和kdump)<br>；任务计划日志cron；监控日志sar。</p><p>从使用频率来分，message和journal日志属于使用较多，其他日志则相对较少(这个可能和个人习惯有关)。</p><p>从日志格式来分，又分为文本格式和二级制格式。</p><p>从生成方式来分，有的日志只系统运行就有，有的则要系统崩溃才有。</p><p>有的日志是有systemctl方式运行进程的，比如cron，kdump，rsyslog，还有些是某些进程控制的，我们只需要了解即可，并不需要特别搞清楚他们的逻辑关系。</p><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><h2 id="故障"><a href="#故障" class="headerlink" title="故障"></a>故障</h2><h3 id="常见故障"><a href="#常见故障" class="headerlink" title="常见故障"></a>常见故障</h3><ul><li>文件和目录类<ul><li>File exist 文件已经存在</li><li>No such file or directory 没有这个文件或目录(这个东西不存在)</li><li>command not found 命令找不到(没有这个命令)</li><li>invalid option 无效的参数(不可用的参数)</li><li>overwrite 覆盖</li><li>remove regular empty file 是否删除普通文件(空的)?</li><li>is a directory xxx是一个目录</li><li>descend into directory 是否进入目录</li><li>Invalid level 无效的层数,层数必须大于0</li><li>Can’t open file for writing 无法打开这个文件</li><li>No write since last change</li><li>xx column window is too narrow 窗口只有xx列太窄了 无法完全显示</li><li>xxx not a directory 不是一个目录</li><li>查看压缩包的时候报错</li><li>You have mail in &#x2F;var&#x2F;spool&#x2F;mail&#x2F;root</li><li>permission denied</li><li>Warning: Changing a readonly file</li><li>‘readonly’ option is set (add ! to override)</li><li>cp: omitting directory ‘&#x2F;oldboy&#x2F;’</li><li>unexpected end of file 或 Unexpected EOF in archive</li><li>gzip: stdin: not in gzip format 压缩包不是gzip格式或压缩包损坏</li></ul></li><li>网络连接类<ul><li>远程连接错误 Connection Failed 连接失败</li><li>yum安装软件故障提示 Could not resolve host无法解析主机</li><li>yum安装软件提示:Nothing to do (没事做)</li><li>没有找到叫treea的软件包</li><li>Name or service not known 域名无法识别(无法上网）</li><li>No route to host 没有访问主机的路由(此路不通)</li><li>Connection Refused 连接拒绝</li></ul></li><li>修改系统基础配置类<ul><li>重启网卡报错 device not present</li><li>修改主机名过程中,命令行中主机名没有变化</li><li>hostname命令修改主机名（临时 重启服务器之后失效）</li><li>命令行中的主机名部分没有改变？</li></ul></li><li>用户相关错误<ul><li>user ‘oldboy’ already exists</li><li>no such user</li><li>Only root can do that.</li><li>Only root can specify a user name.</li><li>Creating mailbox file: File exists</li><li>warning: the home directory already exists.</li><li>&#x2F;etc&#x2F;sudoers: syntax error near line 105 &lt;&lt;&lt;</li></ul></li><li>脚本及定时任务<ul><li>no crontab for root 没有配置定时任务</li><li>no crontab for root - using an empty one 没有定时任务，创建空的定时任务</li><li>crontab: installing new crontab 更新定时任务配置</li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.bilibili.com/video/BV1rb411n7a8/">物理服务器介绍</a></li><li>鸟哥linux相关书籍<ul><li>linux 基础（然而一点也不基础）</li><li>linux 服务器架设</li><li>鸟哥私房菜（全）</li></ul></li><li>微信公众号运维小路</li><li>老男孩云计算</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>DevOps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式系统概念</title>
    <link href="/2025/03/05/distributed_sys_guide/"/>
    <url>/2025/03/05/distributed_sys_guide/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>分布式系统概念</code>。<br>其中包括了关于我的见解和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。</p><p>通俗的理解，所谓分布式系统，就是一个业务拆分成多个子业务，分布在不同的服务器节点，共同构成的系统称为分布式系统，同一个分布式系统中的服务器节点在空间部署上是可以随意分布的，这些服务器可能放在不同的机柜中，也可能在不同的机房中，甚至分布在不同的城市。</p><p>系统架构</p><ul><li>单体<ul><li>服务器：服务A、服务B、服务C</li></ul></li><li>集群<ul><li>服务器1：服务A、服务B、服务C</li><li>服务器2：服务A、服务B、服务C</li></ul></li><li>分布式<ul><li>服务器1：服务A</li><li>服务器2：服务B</li><li>服务器3：服务C</li></ul></li><li>分布式集群<ul><li>服务器1：服务A</li><li>服务器2：服务B、服务C</li><li>服务器3：服务C、服务E、服务D</li><li>服务器4：服务D、服务E、服务B</li><li>服务器5：服务A</li></ul></li></ul><h2 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h2><blockquote><p>分布式系统的特点</p><ul><li>分布性：空间中随机分布。这些计算机可以分布在不同的机房，不同的城市，甚至不同的国家。</li><li>对等性：分布式系统中的计算机没有主&#x2F;从之分，组成分布式系统的所有节点都是对等的。</li><li>并发性：同一个分布式系统的多个节点，可能会并发地操作一些共享的资源，诸如数据库或分布式存储。</li><li>缺乏全局时钟：既然各个计算机之间是依赖于交换信息来进行相互通信，很难定义两件事件的先后顺序，缺乏全局始终控制序列</li><li>故障总会发生：组成分布式的计算机，都有可能在某一时刻突然间崩掉。分的计算机越多，可能崩掉一个的几率就越大。如果再考虑到设计程序时的异常故障，也会加大故障的概率。</li><li>处理单点故障：单点SPoF（Single Point of Failure）：某个角色或者功能只有某一台计算机在支撑，在这台计算机上出现的故障是单点故障。</li></ul></blockquote><p>分布式系统面临的问题</p><ul><li>通信异常</li><li>网络分区</li><li>节点故障</li><li>三态：分布式系统每一次请求与响应存在特有的“三态”概念，即成功、失败和超时。</li><li>重发</li><li>幂等：任意多次执行对资源本身所产生的影响均与一次执行的影响相同<ul><li>update t set age&#x3D;18 where id&#x3D;1 幂等的</li><li>update t set age&#x3D;age+1 where id&#x3D;1 非幂等的</li></ul></li></ul><h3 id="分布式理论"><a href="#分布式理论" class="headerlink" title="分布式理论"></a>分布式理论</h3><h4 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h4><p>数据一致性：分布式数据一致性，指的是数据在多份副本中存储时，各副本中的数据是一致的。</p><p>副本一致性：分布式系统当中，数据往往会有多个副本。多个副本就需要保证数据的一致性。这就带来了同步的问题，因为网络延迟等因素,<br>我们几乎没有办法保证可以同时更新所有机器当中的包括备份所有数据. 就会有数据不一致的情况</p><p>总得来说，我们无法找到一种能够满足分布式系统中数据一致性解决方案。因此，如何既保证数据的一致性，同时又不影响系统运行的性能，是每一个分布式系统都需要重点考虑和权衡的。于是，一致性级别由此诞生。</p><p>一致性分类</p><ul><li>强一致性：这种一致性级别是最符合用户直觉的，它要求系统写入什么，读出来的也会是什么，用户体验好，但实现起来往往对系统的性能影响大。但是强一致性很难实现。</li><li>弱一致性：这种一致性级别约束了系统在写入成功后，不承诺立即可以读到写入的值，也不承诺多久之后数据能够达到一致，但会尽可能地保证到某个时间级别（比如秒级别）后，数据能够达到一致状态。</li><li></li></ul><p>最终一致性：最终一致性也是弱一致性的一种，它无法保证数据更新后，所有后续的访问都能看到最新数值，而是需要一个时间，在这个时间之后可以保证这一点（就是在一段时间后，节点间的数据会最终达到一致状态），而在这个时间内，数据也许是不一致的，这个系统无法保证强一致性的时间片段被称为「不一致窗口」。不一致窗口的时间长短取决于很多因素，比如备份数据的个数、网络传输延迟速度、系统负载等。</p><ul><li>因果一致性：如果进程A通知进程B它已更新了一个数据项，那么进程B的后续访问将返回更新后的值。与进程A无因果关系的进程C的访问遵守一般的最终一致性规则。</li><li>读己之所写一致性：当进程A自己更新一个数据项之后，它总是访问到更新过的值，绝不会看到旧值。这是因果一致性模型的一个特例。</li><li>会话一致性：它把访问存储系统的进程放到会话的上下文中。只要会话还存在，系统就保证“读己之所写”一致性。如果由于某些失败情形令会话终止，就要建立新的会话，而且系统的保证不会延续到新的会话。</li><li>单调读一致性：如果一个进程已经读取到一个特定值，那么该进程不会读取到该值以前的任何值。</li><li>单调写一致性：系统保证对同一个进程的写操作串行化。</li></ul><p>一致性模型图：<br><img src="../images/img_6.png"></p><h4 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h4><p>CAP定理（CAP theorem），又被称作布鲁尔定理（Brewer’s theorem），它指出对于一个分布式计算系统来说，不可能同时满足以下三点</p><ul><li>一致性（Consistency）：所有节点访问时都是同一份最新的数据副本</li><li>可用性（Availability）：每次请求都能获取到非错的响应，但是不保证获取的数据为最新数据</li><li>分区容错性（Partition tolerance）：分布式系统在遇到任何网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务，除非整个网络环境都发生了故障</li></ul><p>一致性（C-Consistency) - <code>强一致性</code>：在写操作完成后开始的任何读操作都必须返回该值，或者后续写操作的结果.<br>也就是说，在一致性系统中，一旦客户端将值写入任何一台服务器并获得响应，那么之后client从其他任何服务器读取的都是刚写入的数据</p><p>可用性（A-Availability)：系统中非故障节点收到的每个请求都必须有响应.<br>在可用系统中，如果我们的客户端向服务器发送请求，并且服务器未崩溃，则服务器必须最终响应客户端，不允许服务器忽略客户的请求</p><p>分区容错性（P-Partition tolerance）：允许网络丢失从一个节点发送到另一个节点的任意多条消息，即不同步.<br>也就是说，G1和G2发送给对方的任何消息都是可以放弃的，也就是说G1和G2可能因为各种意外情况，导致无法成功进行同步，分布式系统要能容忍这种情况。</p><blockquote><p>CAP三者不可能同时满足论证</p></blockquote><ul><li>假设确实存在三者能同时满足的系统</li><li>那么我们要做的第一件事就是分区我们的系统，由于满足分区容错性，也就是说可能因为通信不佳等情况，G1和G2之间是没有同步</li><li>接下来，我们的客户端将v1写入G1，但G1和G2之间是不同步的，所以如下G1是v1数据，G2是v0数据。</li><li>由于要满足可用性，即一定要返回数据，所以G1必须在数据没有同步给G2的前提下返回数据给client</li><li>接下去，client请求的是G2服务器，由于G2服务器的数据是v0，所以client得到的数据是v0</li><li>结论: 很明显，G1返回的是v1数据，G2返回的是v0数据，两者不一致。其余情况也有类似推导，也就是说CAP三者不能同时出现。</li></ul><p>CAP三者如何权衡</p><ul><li>CA (Consistency + Availability)：关注一致性和可用性，它需要非常严格的全体一致的协议。CA<br>系统不能容忍网络错误或节点错误，一旦出现这样的问题，整个系统就会拒绝写请求，因为它并不<br>知道对面的那个结点是否挂掉了，还是只是网络问题。唯一安全的做法就是把自己变成只读的。</li><li>CP (consistency + partition tolerance)：关注一致性和分区容忍性。它关注的是系统里大多数人<br>的一致性协议。这样的系统只需要保证大多数结点数据一致，而少数的结点会在没有同步到最新版<br>本的数据时变成不可用的状态。这样能够提供一部分的可用性。</li><li>AP (availability + partition tolerance)：这样的系统关心可用性和分区容忍性。因此，这样的系统<br>不能达成一致性，需要给出数据冲突，给出数据冲突就需要维护数据版本。</li></ul><p><strong>如何进行三选二</strong></p><blockquote><p>放弃了一致性，满足分区容错，那么节点之间就有可能失去联系，为了高可用，每个节点只能用本<br>地数据提供服务，而这样会容易导致全局数据不一致性。对于互联网应用来说，机器数量庞大，节点分<br>散，网络故障再正常不过了，那么此时就是保障AP，放弃C的场景，而从实际中理解，像网站这种偶尔<br>没有一致性是能接受的，但不能访问问题就非常大了。</p></blockquote><blockquote><p>对于银行来说，就是必须保证强一致性，也就是说C必须存在，那么就只用CA和CP两种情况，当保<br>障强一致性和可用性（CA），那么一旦出现通信故障，系统将完全不可用。另一方面，如果保障了强一<br>致性和分区容错（CP），那么就具备了部分可用性。实际究竟应该选择什么，是需要通过业务场景进行<br>权衡的（并不是所有情况都是CP好于CA，只能查看信息但不能更新信息有时候还不如直接拒绝服务）</p></blockquote><h4 id="BASE-理论"><a href="#BASE-理论" class="headerlink" title="BASE 理论"></a>BASE 理论</h4><p>BASE：全称：Basically Available(基本可用)，Soft state（软状态）,和 Eventually consistent（最终一<br>致性）三个短语的缩写，Base 理论是对 CAP 中一致性和可用性权衡的结果，其来源于对大型互联网分布<br>式实践的总结，是基于 CAP 定理逐步演化而来的。</p><p>其核心思想是： <code>既是无法做到强一致性（Strong consistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consistency）。</code></p><ul><li>Basically Available(基本可用)<ul><li>假设系统，出现了不可预知的故障，但还是能用，相比较正常的系统而言：</li><li>响应时间上的损失：正常情况下的搜索引擎 0.5 秒即返回给用户结果，而基本可用的搜索引擎<br>可以在 1 秒返回结果。</li><li>功能上的损失：在一个电商网站上，正常情况下，用户可以顺利完成每一笔订单，但是到了大<br>促期间，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面</li></ul></li><li>Soft state（软状态）<ul><li>相对于原子性而言，要求多个节点的数据副本都是一致的，这是一种 “硬状态”。</li><li>软状态指的是：允许系统中的数据存在中间状态，并认为该状态不会影响系统的整体可用性，即允<br>许系统在多个不同节点的数据副本存在数据延时。</li></ul></li><li>Eventually consistent（最终一致性）<ul><li>上面说软状态，然后不可能一直是软状态，必须有个时间期限。在期限过后，应当保证所有副本保<br>持数据一致性。从而达到数据的最终一致性。这个时间期限取决于网络延时，系统负载，数据复制<br>方案设计等等因素。</li></ul></li></ul><h3 id="分布式一致性协议"><a href="#分布式一致性协议" class="headerlink" title="分布式一致性协议"></a>分布式一致性协议</h3><blockquote><p>分布式事务: 事务提供一种操作本地数据库的不可分割的一系列操作“要么什么都不做，要么做全套(All or Nothing)<br>”的机制,而分布式事务就是为了操作不同数据库的不可分割的一系列操作“要么什么都不做，要么做全套(Allor Nothing)“的机制</p></blockquote><h4 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h4><p>两阶段提交协议，简称2PC(2 Prepare Commit)<br>，是比较常用的解决分布式事务问题的方式，要么所有参与进程都提交事务，要么都取消事务，即实现ACID中的原子性(A)的常用手段。</p><ul><li><p>准备阶段（Prepare<br>Phase）：协调者（通常是事务的发起者）向所有参与者节点发送准备请求，询问它们是否可以提交事务。如果所有参与者都可以提交事务，它们会返回“准备好”的响应。如果任何一个参与者无法提交，协调者会收到相应的拒绝信息或者超时。</p></li><li><p>提交阶段（Commit Phase）：如果所有参与者都同意提交，协调者会发出提交请求，参与者执行提交操作；如果上一阶段有任何一个参与者拒绝，协调者会发送回滚请求，所有参与者都执行回滚操作，确保事务不会部分完成，避免数据不一致。</p></li></ul><p>2PC的优缺点</p><ul><li>优点<ul><li>简单</li></ul></li><li>缺点<ul><li>同步阻塞</li><li>单点问题，协调者出问题，集体歇菜</li><li>数据不一致，二阶段如果出问题就没办法了</li><li>太过保守</li></ul></li></ul><h4 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h4><p>基于2PC的优化升级。</p><ul><li>can-commit：<ul><li>协调者（Coordinator）向所有参与者发送“CanCommit？”请求，询问它们是否准备好提交事务。</li><li>参与者在收到请求后，会检查是否能够提交事务。如果参与者能够提交事务，它会返回一个Yes响应，表示它准备好了；如果不能提交，它会返回No响应，表示拒绝提交。</li><li>如果所有参与者都返回Yes，则进入下一阶段；如果有任何参与者返回No，则直接进入回滚阶段。</li></ul></li><li>pre-commit：<ul><li>一旦所有参与者都返回Yes，协调者会发出PreCommit请求，通知所有参与者可以进行事务的预提交。</li><li>参与者收到PreCommit请求后，会执行准备提交的操作，但不会最终提交数据。此时，参与者处于预提交状态，等待协调者的最终确认。</li><li>如果在此阶段发生了问题，比如协调者崩溃或失联，参与者仍然保持预提交状态，等待协调者的恢复。</li></ul></li><li>do-commit：<ul><li>如果协调者在预提交阶段没有发生故障，它会向所有参与者发送Commit请求，确认提交事务。</li><li>参与者收到Commit请求后，才会实际提交事务，完成整个事务的操作。</li><li>如果协调者崩溃或失联，在此阶段，所有参与者会等待协调者恢复并决定是否提交。</li></ul></li></ul><p>与2PC相比</p><ul><li>给参与者引入超时机制，2PC仅协调者有超时机制。防止一直阻塞，不提交事务。</li><li>三阶段，多一个阶段，相当于做了缓冲，保证最后数据一致性。</li><li>并没有完全解决数据一致性问题</li></ul><p>3PC的优缺点</p><ul><li>优点<ul><li>通过引入预提交阶段，3PC可以在协调者崩溃或网络分区时避免死锁。</li><li>在预提交阶段，参与者已做出准备，能够在协调者恢复后根据状态决定是否提交或回滚。</li></ul></li><li>缺点<ul><li>3PC协议依然可能因为网络分区导致阻塞，虽然它比2PC更具容错性，但在极端情况下仍可能遇到死锁和一致性问题。</li><li>协调者和参与者之间的消息传递增加了系统的复杂性和开销。</li></ul></li></ul><h4 id="NWR协议"><a href="#NWR协议" class="headerlink" title="NWR协议"></a>NWR协议</h4><p>NWR是一种在分布式存储系统中用于控制一致性级别的一种策略。在亚马逊的云存储系统中，就应用NWR来控制一致性。</p><ul><li>N:在分布式存储系统中，有多少份备份数据</li><li>W:代表一次成功的更新操作要求至少有w份数据写入成功</li><li>R:代表一次成功的读数据操作要求至少有R份数据成功读取</li></ul><p>原理：NWR值的不同组合会产生不同的一致性效果，当W+R&gt;N的时候，整个系统对于客户端来讲能保证强致性。</p><ul><li>以常见的N&#x3D;3、W&#x3D;2、R&#x3D;2为例:</li><li>N&#x3D;3，表示，任何一个对象都必须有三个副本</li><li>W&#x3D;2表示，对数据的修改操作只需要在3个副本中的2个上面完成就返回</li><li>R&#x3D;2表示，从三个对象中要读取到2个数据对象，才能返回</li><li>在分布式系统中，数据的单点是不允许存在的。即线上正常存在的备份数量N设置1的情况是非常危险的，因为一旦这个备份发生错误，就<br>可能发生数据的永久性错误。假如我们把N设置成为2，那么，只要有一个存储节点发生损坏，就会有单点的存在。所以N必须大于2。N越高，系统的维护和整体<br>成本就越高。工业界通常把N设置为3。</li><li>当W是2、R是2的时候，W+R&gt;N，这种情况对于客户端就是强一致性的。</li><li>当R+W&lt;&#x3D;N，无法保证数据的强一致性<ul><li>因为成功写和成功读集合可能不存在交集，这样读操作无法读取到最新的更新数值，也就无法保证数据的强一致性。</li></ul></li></ul><h4 id="Gossip协议"><a href="#Gossip协议" class="headerlink" title="Gossip协议"></a>Gossip协议</h4><p>Gossip 协议也叫 Epidemic 协议(流行病协议)。原本用于分布式数据库中节点同步数据使用后被广泛用于数据库复制、信息扩散、集群成员身份确认、故障探测等。</p><p>从 gossip 单词就可以看到，其中文意思是八卦、流言等意思，我们可以想象下绯闻的传播(或者流行病的传播);gossip<br>协议的工作原理就类似于这个。gossip 协议利用一种随机的方式将信息传播到整个网络中，并在一定时间内使得系统内的所有节点数据一致。Gossip<br>其实是一种去中心化思路的分布式协议，解决状态在集群中的传播和状态一致性的保证两个问题。</p><ul><li>反熵传播<ul><li>是以固定的概率传播所有的数据。所有参与节点只有两种状态:Suspective(病原)、Infective(感染)<br>。过程是种子节点会把所有的数据都跟其他节点共享，以便消除节点之间数据的任何不一致，它可以保证最终、完全的一致。缺点是消息数量非常庞大，且无限制;通常只用于新加入节点的数据初始化。</li></ul></li><li>谣言传播<ul><li>是以固定的概率仅传播新到达的数据。所有参与节点有三种状态:Suspective(病原)、Infective(感染)、Removed(愈除)。过程是消息只包含最新<br>update，谣言消息在某个时间点之后会被标记为 removed，并且不再被传播。缺点是系统有一定的概率会不一致，通常用于节点间数据增量同步。</li></ul></li></ul><p>通信方式</p><ul><li>push：a推送给b</li><li>pull：a把key和version推送给b，b去a拉数据</li><li>push&#x2F;pull：与 Pull 类似，只是多了一步，再将本地比B新的数据推送给 B，B 则更新本地</li></ul><p>Gossip 是一种去中心化的分布式协议，数据通过节点像病毒一样逐个传播。因为是指数级传播，整体传播速度非常快。</p><p>gossip协议的优缺点</p><ul><li>优点<ul><li>扩展性</li><li>容错</li><li>去中心化</li><li>最终一致性</li></ul></li><li>缺点<ul><li>消息延迟</li><li>消息冗余</li></ul></li></ul><p>Gossip 协议由于以上的优缺点，所以适合于 AP 场景的数据一致性处理，常见应用有:P2P 网络通信Redis Cluster、 Consul.</p><h4 id="Paxos协议"><a href="#Paxos协议" class="headerlink" title="Paxos协议"></a>Paxos协议</h4><p>Paxos协议其实说的就是Paxos算法,Paxos算法是基于消息传递且具有高度容错特性的一致性算法，是目前公认的解决分布式一致性问题最有效的算法之一。</p><p>Paxos由 莱斯利·兰伯特(Leslie Lamport)于1998年在《The Part-Time<br>Parliament》论文中首次公开，最初的描述使用希腊的一个小岛Paxos，描述了Paxos小岛中通过决议的流程，并以此命名这个算法，但是这个描述理解起来比较有挑战性。后来在2001年，莱斯利·兰伯特重新发表了朴实的算法描述版本《Paxos<br>Made Simple》</p><p>自Paxos问世以来就持续垄断了分布式一致性算法，Paxos这个名词几乎等同于分布式一致性。Google的很多大型分布式系统都采用了Paxos算法来解决分布式一致性问题，如Chubby、Megastore以及Spanner等。开源的ZooKeeper，以及MySQL5.7推出的用来取代传统的主从复制的MySQL<br>GroupReplication等纷纷采用Paxos算法解决分布式一致性问题。然而，Paxos的最大特点就是难，不仅难以理解，更难以实现。</p><p>Google Chubby的作者Mike Burrows说过这个世界上只有一种一致性算法，那就是Paxos，其它的算法都是残次品。</p><p>在常见的分布式系统中，总会发生诸如机器宕机或网络异常(包括消息的延迟、丢失、重复、乱序，还有网络分区)<br>等情况。Paxos算法需要解决的问题就是如何在一个可能发生上述异常的分布式系统中，快速且正确地在集群内部对某个数据的值达成一致，并且保证不论发生以上任何异常，都不会破坏整个系统的一致性。</p><blockquote><p>注:这里某个数据的值并不只是狭义上的某个数，它可以是一条日志，也可以是一条命令(command)。。。根据应用场景不同，某个数据的值有不同的含义。</p></blockquote><ul><li>在之前讲解2PC和 3PC的时候在一定程度上是可以解决数据一致性问题的.但是并没有完全解决就是协调者宕机的情况.</li><li>如何解决：引入多个协调者</li><li>引入主从：主负责协调，从负责跟随</li><li>这就是一个简单的paxos实现</li></ul><p>Paxos的版本有:BasicPaxos,Multi Paxos，Fast-Paxos,具体落地有Raft 和zk的ZAB协议（均属于multi paxos算法）</p><h5 id="basic-paxos"><a href="#basic-paxos" class="headerlink" title="basic paxos"></a>basic paxos</h5><ul><li>角色<ul><li>client 客户端</li><li>proposer 提案发起者</li><li>acceptor 决策者</li><li>learner 最终决策学习者</li></ul></li><li>流程<ul><li>prepare：Proposer提出一个提案,编号为N,此N大于这个Proposer之前提出所有提出的编号,请求Accpetor的多数人接受这个提案</li><li>promise：如果编号N大于此Accpetor之前接收的任提案编号则接收,否则拒绝</li><li>accept：如果达到多数派,Proposer会发出accept请求,此请求包含提案编号和对应的内容</li><li>accepted：如果此Accpetor在此期间没有接受到任何大于N的提案,则接收此提案内容,否则忽略</li></ul></li></ul><h5 id="multi-paxos"><a href="#multi-paxos" class="headerlink" title="multi paxos"></a>multi paxos</h5><p>相比basic 多一个选举流程</p><h4 id="Raft协议"><a href="#Raft协议" class="headerlink" title="Raft协议"></a>Raft协议</h4><p><a href="https://thesecretlivesofdata.com/raft/">演示</a><br><a href="https://raft.github.io/">github raft</a></p><h4 id="lease机制"><a href="#lease机制" class="headerlink" title="lease机制"></a>lease机制</h4><p>Lease机制，翻译过来即是租约机制，是一种在分布式系统常用的协议，是维护分布式系统数据一致性的一种常用工具。</p><ul><li>Lease是颁发者对一段时间内数据一致性的承诺;</li><li>颁发者发出Lease后，不管是否被接收，只要Lease不过期，颁发者都会按照协议遵守承诺;</li><li>Lease的持有者只能在Lease的有效期内使用承诺，一旦Lease超时，持有者需要放弃执行，重新申请Lease。</li></ul><h3 id="分布式系统设计策略"><a href="#分布式系统设计策略" class="headerlink" title="分布式系统设计策略"></a>分布式系统设计策略</h3><h4 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a>心跳检测</h4><h4 id="高可用HA设计"><a href="#高可用HA设计" class="headerlink" title="高可用HA设计"></a>高可用HA设计</h4><ul><li>主备</li><li>互备</li><li>脑裂问题解决<ul><li>冗余心跳线</li><li>仲裁</li><li>lease机制</li><li>隔离Fencing机制<ul><li>共享存储fencing:确保只有一个Master往共享存储中写数据</li><li>客户端fencing:确保只有一个Master可以响应客户端的请求</li><li>Slave fencing:确保只有一个Master可以向Slave下发命令</li></ul></li></ul></li></ul><h4 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h4><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><h3 id="分布式架构服务调用"><a href="#分布式架构服务调用" class="headerlink" title="分布式架构服务调用"></a>分布式架构服务调用</h3><ul><li>HTTP<ul><li>HttpURLConnection</li><li>Apache Common HttpClient</li><li>OKhttp3</li><li>RestTemplate</li></ul></li><li>RPC<ul><li>Java RMI</li><li>Hessian</li><li>Dubbo</li><li>gRPC</li></ul></li></ul><p>跨域调用解决方案</p><ul><li>jsonp</li><li>httpclient内部转发</li><li>允许跨域</li><li>网关<ul><li>nginx网关</li><li>zuul网关</li><li>gateway网关</li><li>云原生网关</li></ul></li></ul><h3 id="分布式服务治理"><a href="#分布式服务治理" class="headerlink" title="分布式服务治理"></a>分布式服务治理</h3><h4 id="服务协调"><a href="#服务协调" class="headerlink" title="服务协调"></a>服务协调</h4><p>分布式锁</p><ul><li>基于缓存实现</li><li>基于zk实现</li></ul><h4 id="服务削峰"><a href="#服务削峰" class="headerlink" title="服务削峰"></a>服务削峰</h4><ul><li>消息队列</li><li>漏斗层层削峰</li></ul><h4 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h4><p>电商平台在高并发时，可能会关闭某些推荐服务、评论显示等非核心功能，确保用户仍然能够浏览商品、下单等核心功能。</p><p>降级策略</p><ul><li>页面降级 – 可视化界面禁用点击按钮、调整静态页面</li><li>延迟服务 – 如定时任务延迟处理、消息入MQ后延迟处理</li><li>写降级– 直接禁止相关写操作的服务请求</li><li>读降级 – 直接禁止相关读的服务请求</li><li>缓存降级 – 使用缓存方式来降级部分读频繁的服务接口</li></ul><p>分级降级</p><h4 id="服务限流"><a href="#服务限流" class="headerlink" title="服务限流"></a>服务限流</h4><p>多维限流</p><p>限流算法</p><ul><li>固定窗口 计数器</li><li>滑动窗口 细分计数器</li><li>漏桶 FIFO定时取</li><li>令牌桶</li></ul><h4 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h4><p>服务熔断主要是为了防止系统在出现故障时陷入“雪崩效应”，即一个服务的故障可能导致一系列其他服务的故障。</p><table><thead><tr><th>特性</th><th>服务熔断 (Circuit Breaker)</th><th>服务降级 (Service Degradation)</th></tr></thead><tbody><tr><td>目的</td><td>防止故障蔓延，保护系统免受级联故障影响。</td><td>保证核心功能正常运行，减少系统的压力。</td></tr><tr><td>原理</td><td>通过监控错误率，超限时自动停止请求，避免系统过载。</td><td>在负载过高或某服务出现问题时，减少非核心功能，保证核心服务。</td></tr><tr><td>触发机制</td><td>当服务的失败率超过阈值时，熔断器打开，停止请求。</td><td>系统压力过大或某个服务不可用时，主动关闭部分功能。</td></tr><tr><td>影响范围</td><td>降低故障蔓延的影响，避免请求进一步失败。</td><td>降低非核心功能的可用性，保证核心功能不受影响。</td></tr><tr><td>示例</td><td>请求超时超过某个阈值，熔断器打开，停止请求。</td><td>降低页面加载速度，关闭非关键服务（如推荐、评论等）。</td></tr></tbody></table><p>熔断关注失败的控制，而降级侧重于负载和功能的控制</p><h4 id="服务链路追踪"><a href="#服务链路追踪" class="headerlink" title="服务链路追踪"></a>服务链路追踪</h4><p>分布式链路追踪(Distributed Tracing)，也叫 分布式链路跟踪，分布式跟踪，分布式追踪<br>等等.其实就是将一次分布式请求还原成调用链路。显示的在后端查看一次分布式请求的调用情况，比如各个节点上的耗时、请求具体打到了哪台机器上、每个服务节点的请求状态等等</p><ul><li>故障快速定位</li><li>各个调用环节的性能分析</li><li>数据分析</li><li>生成服务调用拓扑图</li></ul><p>链路追踪设计原则</p><ul><li>设计目的<ul><li>低侵入应用透明、低损耗、大范围部署扩展性</li></ul></li><li>埋点和生成日志</li><li>抓取和存储日志</li><li>分析和统计调用链数据</li><li>计算和展示</li></ul><p>trace模型</p><ul><li>trace：一次完整的调用链路</li><li>span：调用的基本结构 多span组成的树状结构，组合成一次trace记录</li><li>annotation：span中的标注点</li><li>BinaryAnnotation：特殊的Annotation，用户自定义事件</li></ul><h3 id="架构设计基本原则-SOLID原则"><a href="#架构设计基本原则-SOLID原则" class="headerlink" title="架构设计基本原则 SOLID原则"></a>架构设计基本原则 SOLID原则</h3><h4 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h4><h4 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h4><h4 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h4><h4 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h4><h4 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h4><h4 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h4><h4 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h4><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>Java</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常见工具类</title>
    <link href="/2025/01/24/java_util/"/>
    <url>/2025/01/24/java_util/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>Java常见工具类和日常使用</code>。<br>其中包括了关于我的简介和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="apache-commons"><a href="#apache-commons" class="headerlink" title="apache commons"></a>apache commons</h3><p>官网：<a href="https://commons.apache.org/">https://commons.apache.org/</a></p><h4 id="commons-lang3"><a href="#commons-lang3" class="headerlink" title="commons-lang3"></a>commons-lang3</h4><h4 id="commons-collections4"><a href="#commons-collections4" class="headerlink" title="commons-collections4"></a>commons-collections4</h4><h4 id="commons-io"><a href="#commons-io" class="headerlink" title="commons-io"></a>commons-io</h4><h4 id="commons-text"><a href="#commons-text" class="headerlink" title="commons-text"></a>commons-text</h4><h3 id="apache-tika"><a href="#apache-tika" class="headerlink" title="apache tika"></a>apache tika</h3><h3 id="guava"><a href="#guava" class="headerlink" title="guava"></a>guava</h3><h3 id="hutool"><a href="#hutool" class="headerlink" title="hutool"></a>hutool</h3><h3 id="jodd"><a href="#jodd" class="headerlink" title="jodd"></a>jodd</h3><h3 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h3><h3 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h3><h3 id="自行封装"><a href="#自行封装" class="headerlink" title="自行封装"></a>自行封装</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>杂谈</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Druid 数据库连接池</title>
    <link href="/2024/10/29/druid/"/>
    <url>/2024/10/29/druid/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>Druid 数据库连接池</code>。<br>其中包括了关于我的简介和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>数据库连接池：使用池化思想，减少与数据库链接的IO耗时。</p><p>常见的数据库连接池有</p><ul><li>远古<ul><li>c3p0</li><li>dbcp</li></ul></li><li>tomcat-jdbc</li><li>hikariCP（springboot2.x默认）</li><li>druid（Alibaba开源）</li></ul><h2 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h2><h3 id="通用方式"><a href="#通用方式" class="headerlink" title="通用方式"></a>通用方式</h3><ul><li>引入<code>druid</code>依赖</li><li>配置类进行配置<ul><li>需要对datasource进行单独配置，如果不配置，spring会自动注入默认的（也就是hikariCP）。</li></ul></li><li>监控界面<ul><li>可以使用配置bean进行配置（ServletRegistrationBean<StatViewServlet>）</li></ul></li><li>过滤器配置<ul><li>启用具体监控什么，filter-chain模式</li><li>statFilter：定制sql监控规则<ul><li>使用filter属性进行配置</li><li>使用proxyFilter属性进行配置</li></ul></li><li>wallFilter：定制sql防火墙规则</li><li>Slf4jLogFilter：定制日志规则</li><li>webStatFilter：Web应用监控</li></ul></li></ul><h3 id="starter方式"><a href="#starter方式" class="headerlink" title="starter方式"></a>starter方式</h3><ul><li>引入<code>druid-starter</code>依赖</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>金融理财</title>
    <link href="/2024/10/21/Financial_freedom2/"/>
    <url>/2024/10/21/Financial_freedom2/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>金融理财</code>。<br>其中包括了关于我的简介和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="炒股"><a href="#炒股" class="headerlink" title="炒股"></a>炒股</h3><h2 id="财报"><a href="#财报" class="headerlink" title="财报"></a>财报</h2><h3 id="浏览"><a href="#浏览" class="headerlink" title="浏览"></a>浏览</h3><ul><li>证券交易所，查相关交易所财报。<ol><li>上海证券交易所：<a href="https://www.sse.com.cn/">https://www.sse.com.cn</a></li><li>深证证券交易所：<a href="http://www.szse.cn/">http://www.szse.cn</a></li><li>北京证券交易所：<a href="https://www.bse.cn/">https://www.bse.cn</a></li><li>香港交易所：<a href="https://www.hkexnews.hk/index_c.htm">https://www.hkexnews.hk/index_c.htm</a></li><li>美国证券交易所：<a href="https://www.sec.gov/">https://www.sec.gov</a></li><li>伦敦证券交易所：<a href="https://www.londonstockexchange.com/">https://www.londonstockexchange.com/</a></li><li>德国证券交易所：<a href="https://www.boerse-frankfurt.de/EN">https://www.boerse-frankfurt.de/EN</a></li></ol></li><li>财经网站，查 A 股、H 股财报。<ol><li>巨潮资讯：<a href="http://www.cninfo.com.cn/new/index">http://www.cninfo.com.cn/new/index</a></li><li>同花顺财经：<a href="https://www.10jqka.com.cn/">https://www.10jqka.com.cn</a></li><li>东方财富网：<a href="https://www.eastmoney.com/">https://www.eastmoney.com</a></li></ol></li><li>公司官网，查指定公司网址的相关财报，一般在关于我们、业绩报告中。</li></ul><h3 id="保险"><a href="#保险" class="headerlink" title="保险"></a>保险</h3><h3 id="债券"><a href="#债券" class="headerlink" title="债券"></a>债券</h3><h3 id="黄金"><a href="#黄金" class="headerlink" title="黄金"></a>黄金</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>理财</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理财</tag>
      
      <tag>财务自由</tag>
      
      <tag>炒股</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JetBrains IDE Plugins</title>
    <link href="/2024/10/14/jb_ide_plugins/"/>
    <url>/2024/10/14/jb_ide_plugins/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>JetBrains家的IDE的插件推荐</code>。<br>其中包括了关于我的简介和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>插件的用法可以在官方插件商城查看。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Intellij-Idea"><a href="#Intellij-Idea" class="headerlink" title="Intellij Idea"></a>Intellij Idea</h3><ul><li>热部署插件 <ul><li>JRbel</li><li>Single HotSwap</li></ul></li><li>代码类<ul><li>模板代码生成 EasyCode</li><li>代码分析：sonarlint</li><li>代码规范：alibaba java coding guidelines</li><li>漏洞审查插件：Spotbugs</li><li>代码截图：Code Screenshots（不是很好用，不如微信截图）</li><li>display bytecode&amp;ASM：ASM Bytecode Outline</li></ul></li><li>保存后自动化执行一些操作：save actions</li><li>LC算法刷题 LeetCode Editor</li><li>代码定位 CodeGlance3<ul><li>类似 vscode 右侧的样式</li></ul></li><li>AI代码生成器<ul><li>GitHub Copilot</li><li>AI Assistant</li><li>Tabnine</li><li>CodeGeeX</li><li>ChatGPT for JetBrains</li><li>通义灵码</li><li>AI X coder</li></ul></li><li>行情查看 leeks</li><li>字符串处理插件 String Manipulation<ul><li>功能强大，选择字符串后，右键</li></ul></li><li>ide官方：code with me</li><li>vim化：IDEA VIM<ul><li>邪门小众玩意</li></ul></li><li>控制台输出美化：grep console</li><li>spring data jpa工具：jpa support</li><li>maven 工具：maven helper</li><li>代码工程<ul><li>代码分析工具：sequence diagram</li><li>绘图插件 plantUML</li><li>代码统计：Statistic</li></ul></li><li>查询项目url：RestfulToolKit</li><li>字节码查看工具：jclasslib bytecode viewer</li><li>view<ul><li>背景图：Background Image Plus</li><li>图标美化：extra tool window colorful icons</li><li>括号高亮提示<ul><li>Rainbow Brackets</li><li>HighlightBracketPair</li></ul></li><li>progress bar<ul><li>种类繁多，搜索根据喜好选择下载</li></ul></li><li>gerry theme<ul><li>idea 整体更美观</li></ul></li></ul></li><li>Git相关插件：GitToolBox</li><li>MyBatis<ul><li>日志插件：MyBatis Log Plugin<ul><li>控制台拼接SQL语句</li></ul></li><li>代码生成：MyBatisX</li><li>拦截日志，格式化输出SQL：MyBatis Log Free</li><li>代码补充：MyBatisCodeHelper-Pro<ul><li>收费且与MyBatisX冲突</li></ul></li></ul></li><li>API调试工具：Restful Fast Request<ul><li>免费版功能有限，付费版功能多一点</li></ul></li><li>数据库插件<ul><li>自带的 Database tools</li></ul></li><li>教你熟练使用IDE<ul><li>IDE Features Trainer<ul><li>Help 下面 找到 learn ide features</li><li>闯关模式</li></ul></li><li>热键提示：Key Promoter X</li><li>热键触发显示：presentation assistant</li></ul></li><li>思维脑图<ul><li>idea mind map</li></ul></li></ul><h3 id="Goland"><a href="#Goland" class="headerlink" title="Goland"></a>Goland</h3><h3 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h3><h3 id="RustRover"><a href="#RustRover" class="headerlink" title="RustRover"></a>RustRover</h3><h3 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h3><h3 id="Clion"><a href="#Clion" class="headerlink" title="Clion"></a>Clion</h3><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JetBrains IDE tricks</title>
    <link href="/2024/10/14/jb_ide_trick/"/>
    <url>/2024/10/14/jb_ide_trick/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>JetBrains家的IDE的奇技淫巧</code>。<br>其中包括了关于我的见解和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="common"><a href="#common" class="headerlink" title="common"></a>common</h3><h4 id="Key-map"><a href="#Key-map" class="headerlink" title="Key map"></a>Key map</h4><p>由于win和mac上，不一样，所以需要自行搜索，此处仅列出常用快捷键目录</p><ul><li>回到前一次或后一次鼠标停留的位置</li><li>快速切换大小写</li><li>查看最近更改文件</li><li>快速到大括号前后</li><li>快速格式化代码</li><li>快速展开文件结构</li><li>跳过service层，直接到实现类</li><li>全局查找</li><li>查看某个方法参数</li><li>自动错误修复</li></ul><h4 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h4><ol><li>正常的逐行Debug，这种没有什么好说的，一行一行走。</li><li>断点打到方法上，会自动在方法第一行l和方法最后一行停住，方便查看方法内的全部数据以及返回值是否正确，还有一个用法，将断点打到接口的方法上，执行到具体实现类会自动停住，有多个实现类的时候挺方便的。</li><li>异常断点，在breakpoints配置里面添加指定异常类型，就会在出现异常那一行停住。</li><li>属性断点，将断点打到具体的属性上，一旦该属性出现值修改操作，就会停住，标识是一个小眼睛。</li><li>debug advance<ul><li>右键点击断点，condition里面写条件。和debug计算器里面写条件一样的识别效果。</li></ul></li><li>表达式计算，debug evaluate里面</li><li>force return跳过方法后面的代码</li><li>stream debug，可视化</li><li>多线程断点</li><li>断点log</li><li>默认快捷键及图标<ul><li>f10 ：show execution point：返回当前断点处</li><li>step over：下一步</li><li>step into：进入方法内部</li><li>step out：从方法返回到下一行</li><li>force step into：进入方法内部</li><li>drop frame：删除当前栈帧</li><li>run to cursor：运行到光标处，不需要打断点</li><li>Resume Program 恢复程序</li><li>Stop ：关闭程序</li><li>View Breakpoints ：查看断点</li><li>Mute Breakpoints：屏蔽断点</li></ul></li></ol><h4 id="多行编辑"><a href="#多行编辑" class="headerlink" title="多行编辑"></a>多行编辑</h4><ul><li>同时编辑多行同列：Alt + 鼠标光标放到需要编辑的多行代码段之首，向下滑动</li><li>同时编辑多行不同列：Ctrl + Shift + Alt +鼠标光标选择想要编辑的列处</li><li>多行移动<ul><li>多行右移：选中要移动的多行 + Tab</li><li>多行左移：选中要移动的多行 + Shift + Tab</li><li>多&#x2F;单行上&#x2F;下移：选中要移动的多行 + Alt + Shift + 方向键</li><li>自动生成类对象的各种方法：Alt + Inser</li></ul></li><li>ctrl + shift + r 全局替换</li><li>alt + enter 自动补全返回值</li><li>ctrl + d 复制指定行的代码</li><li>ctrl + y 删除指定行的代码</li></ul><h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><ul><li>diagrams<ul><li>查看类信息和依赖</li></ul></li><li>bookmark：书签<ul><li>通过书签列表快速定位查找</li><li>标签书签，通过<code>ctrl+数字</code>快捷跳转，通过<code>ctrl+shift+数字</code>快捷创建</li></ul></li><li>postfix completion：通过代码后面<code>. + 回车</code>代码补全<ul><li>支持在设置内设置，搜索<code>postfix completion</code>即可</li><li>such as ： <code>.var</code>,<code>.list</code>,.<code>for</code></li></ul></li><li>idea settings<ul><li>code completion<ul><li>match case 大小写敏感：关掉，开着影响代码提示</li></ul></li><li>show the doc popup in * times ：自定义时间</li><li>auto import ：设置成always</li><li>字体设置</li><li>build project automatically</li><li>自定义<code>TODO</code>标签</li><li>自定义<code>TODO</code>过滤器</li></ul></li><li>文件对比<ul><li>选中文件，右键<code>compare files</code></li></ul></li><li>TODO<ul><li>自定义TODO标签</li><li>过滤器</li><li>结合代码模板，自动生成（创建人，创建日期-时间，描述）</li></ul></li><li>运行时传参<ul><li>vm options</li><li>program arguments</li><li>environment variables</li></ul></li></ul><h4 id="快捷搜索"><a href="#快捷搜索" class="headerlink" title="快捷搜索"></a>快捷搜索</h4><ul><li>搜索当前文件<code>ctrl f</code></li><li>整个项目<code>ctrl shift f</code></li><li>search every thing<code>shift*2</code></li><li>继承关系<code>ctrl h</code></li><li>引用关系<code>alt f7</code></li></ul><h3 id="Intellij-Idea"><a href="#Intellij-Idea" class="headerlink" title="Intellij Idea"></a>Intellij Idea</h3><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ul><li>自动生成测试类<ul><li>有快捷键，mac和win平台不一样，百度搜索</li><li>run with coverage 统计覆盖率</li></ul></li><li>IDEA HTTP 接口测试<ul><li><code>.http</code>文件</li><li>点击controller接口左侧的图标，或者<code>alt</code> + <code>enter</code> 生成</li><li>旧版本需要安装<code>http client</code>插件</li><li><strong>个人建议还是写单元测试，集成测试</strong></li></ul></li></ul><h3 id="Goland"><a href="#Goland" class="headerlink" title="Goland"></a>Goland</h3><h3 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h3><h3 id="RustRover"><a href="#RustRover" class="headerlink" title="RustRover"></a>RustRover</h3><h3 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h3><h3 id="Clion"><a href="#Clion" class="headerlink" title="Clion"></a>Clion</h3><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.jetbrains.com/zh-cn/help/idea/getting-started.html">jb-Official-tutorial</a></li><li><a href="https://github.com/guobinhit/intellij-idea-tutorial">史上最简单的 IntelliJ IDEA 教程</a></li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>懒人吃饭</title>
    <link href="/2024/10/13/simple_menu/"/>
    <url>/2024/10/13/simple_menu/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>懒人吃饭</code>。<br>其中包括了关于我的简介和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>调味料根据个人口味适量添加，不必循规蹈矩，个人口味不一，自己探索自己喜欢的最好。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="盖饭"><a href="#盖饭" class="headerlink" title="盖饭"></a>盖饭</h3><h4 id="豆角肉末"><a href="#豆角肉末" class="headerlink" title="豆角肉末"></a>豆角肉末</h4><p>原材料：豆角切丁、肉末、蒜瓣切末</p><p>调味料：生抽、耗油、老抽、白糖</p><h4 id="豆腐抱蛋"><a href="#豆腐抱蛋" class="headerlink" title="豆腐抱蛋"></a>豆腐抱蛋</h4><p>原材料：豆腐切块、鸡蛋液淋入、肉末</p><p>调味料：耗油、清水、葱花</p><h4 id="双椒鸡丁"><a href="#双椒鸡丁" class="headerlink" title="双椒鸡丁"></a>双椒鸡丁</h4><p>原材料：鸡腿肉（生抽、盐、玉米淀粉腌制一刻钟）、青红椒圈</p><p>调味料：盐、糖</p><h4 id="番茄炒蛋"><a href="#番茄炒蛋" class="headerlink" title="番茄炒蛋"></a>番茄炒蛋</h4><p>原材料：番茄块、鸡蛋</p><p>调味料：盐、糖</p><h4 id="粉红双丝"><a href="#粉红双丝" class="headerlink" title="粉红双丝"></a>粉红双丝</h4><p>原材料：胡萝卜丝、火腿肠丝、小葱</p><p>调味料：盐、糖、蚝油</p><h4 id="东北大饭包"><a href="#东北大饭包" class="headerlink" title="东北大饭包"></a>东北大饭包</h4><p>原材料：茄子、火腿肠、鸡蛋、生菜、土豆（花生米、香菜 可选）</p><p>调味料：盐，糖</p><p>烹饪技巧：茄子土豆上锅蒸熟，茄子撕条，土豆压泥，再炒个蛋，将所有食材搭配置于米饭上。</p><h3 id="面食"><a href="#面食" class="headerlink" title="面食"></a>面食</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java奇技淫巧</title>
    <link href="/2024/10/10/java_trick/"/>
    <url>/2024/10/10/java_trick/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>Java·奇技淫巧</code>。<br>其中包括了关于我的简介和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Spring依赖注入杂谈"><a href="#Spring依赖注入杂谈" class="headerlink" title="Spring依赖注入杂谈"></a>Spring依赖注入杂谈</h3><p>先说结论，<code>@Autowired</code>注解是为了扩展，为了灵活设计出来的。会导致循环依赖等报错出现。推荐使用构造器注入方式。Setter方式注入也不推荐。</p><p>至于<code>@Resource</code>注解，这个注解在jdk11及之后版本移除了，因为jdk9开始进行了模块化，移除了部分和JavaEE相关的包，这个注解在<br><code>javax.annotation</code>里面。javax这个包，随着JavaEE的严谨，后续也不用了，例如tomcat10用的JavaEE新版本<br>jakarta。如果选择的技术选型JDK高于11或者tomcat高于9，需要引入jakarta的包，去用这个注解。</p><p>在 Spring3.0 时代，官方还是提倡 set<br>方法注入的。<a href="https://docs.spring.io/spring-framework/docs/3.0.x/reference/beans.html">相关文档</a></p><p>从 Spring4.x<br>开始，官方就不推荐这种注入方式了，转而推荐构造器注入。<a href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/htmlsingle/#beans-setter-injection">相关文档</a></p><p>核心：通过构造方法注入的方式，能够保证注入的组件不可变，并且能够确保需要的依赖不为空。此外，构造方法注入的依赖总是能够在返回客户端（组件）代码的时候保证完全初始化的状态。</p><ul><li>依赖不可变：这个好理解，通过构造方法注入依赖，在对象创建的时候就要注入依赖，一旦对象创建成功，以后就只能使用注入的依赖而无法修改了，这就是依赖不可变（通过<br>set 方法注入将来还能通过 set 方法修改）。</li><li>依赖不为空：通过构造方法注入的时候，会自动检查注入的对象是否为空，如果为空，则注入失败；如果不为空，才会注入成功。</li><li>完全初始化：由于获取到了依赖对象（这个依赖对象是初始化之后的），并且调用了要初始化组件的构造方法，因此最终拿到的就是完全初始化的对象了。</li></ul><p>在 Spring3.0 文档中，官方说如果构造方法注入的话，属性太多可能会让代码变得非常臃肿，那么在 4.0<br>文档中，官方对这个说法也做了一些订正：如果用构造方法注入的时候，参数过多以至于代码过于臃肿，那么此时你需要考虑这个类的设计是否合理，这个类是否参杂了太多的其他无关功能，这个类是否做到了单一职责。</p><table><thead><tr><th>注入方式</th><th>可靠性</th><th>可维护性</th><th>可测试性</th><th>灵活性</th><th>循环关系的检测</th><th>性能影响</th></tr></thead><tbody><tr><td>Field Injection</td><td>不可靠</td><td>低</td><td>差</td><td>灵活</td><td>不检测</td><td>启动快</td></tr><tr><td>Constructor Injection</td><td>可靠</td><td>高</td><td>好</td><td>不灵活</td><td>自动检测</td><td>启动慢</td></tr><tr><td>Setter Injection</td><td>不可靠</td><td>低</td><td>好</td><td>灵活</td><td>不检测</td><td>启动快</td></tr></tbody></table><table><thead><tr><th></th><th>@Autowired</th><th>@Resource</th></tr></thead><tbody><tr><td>识别方式</td><td>默认按类型，如果需要按名称，使用@Qualifier注解配合</td><td>默认按名称，名称找不到按类型</td></tr><tr><td>适用对象</td><td>构造器、方法、方法参数、字段</td><td>方法、字段</td></tr><tr><td>注解来源</td><td>Spring框架提供的注解</td><td>Java标准 JSR-250</td></tr></tbody></table><p><strong>如何更好的注入</strong></p><p>目前我个人是通过<code>Lombok</code>的<code>@RequiredArgsConstructor</code>注解和<code>final</code>关键字配合进行注入的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CategoryController</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> CategoryService categoryService;<br>&#125;    <br></code></pre></td></tr></table></figure><h3 id="分片上传"><a href="#分片上传" class="headerlink" title="分片上传"></a>分片上传</h3><h4 id="普通上传"><a href="#普通上传" class="headerlink" title="普通上传"></a>普通上传</h4><p>调用接口一次性完成一个文件的上传。</p><ul><li>缺点：文件无法续传、大文件上传太慢。</li></ul><p>解决方案：分片上传</p><h4 id="分片上传-1"><a href="#分片上传-1" class="headerlink" title="分片上传"></a>分片上传</h4><p>将源文件切分成很多分片，进行上传，待所有分片上传完毕之后，将所有分片合并，便可得到源文件。这里面的分片可以采用并行的方式上传，提示大文件上传的效率。</p><p>分片上传主要的过程(3步)</p><ol><li>创建分片上传任务(分片数量、每个分片文件大小、文件md5值)</li><li>上传所有分片</li><li>待所有分片上传完成后，合并文件，便可得到源文件</li></ol><p>实现分片上传需要两张表</p><p>分片上传任务表(t_shard_upload):每个分片任务会在此表创建一条记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> exsits t_shard_upload<br>(<br>    id<br>    <span class="hljs-type">varchar</span><br>(<br>    <span class="hljs-number">32</span><br>) <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;文件名称&#x27;</span>,<br>    file_name <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment ‘分片数量’，<br>    part_num <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;分片数量&#x27;</span>,<br>    md5 <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment ‘文件md5值’，<br>    file_full_path <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>) comment <span class="hljs-string">&#x27;文件完整路径&#x27;</span><br>) comment <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;分片上传任务表&#x27;</span>;<br></code></pre></td></tr></table></figure><p>分片文件表(t_shard_upload_part):这个表和上面的表是一对多的关系，用于记录每个分片的信息，比如一个文件被切分成十个分片，那么此表会产生十条记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> t_shard_upload_part<br>(<br>    id<br>    <span class="hljs-type">varchar</span><br>(<br>    <span class="hljs-number">32</span><br>) <span class="hljs-keyword">primary</span> key,<br>    shard_upload_id <span class="hljs-type">varchar</span><br>(<br>    <span class="hljs-number">32</span><br>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;分片任务id&#x27;</span>,<br>    part_order <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment ‘第几个分片，从<span class="hljs-number">1</span>开始’，<br>    file_full_path <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>) comment <span class="hljs-string">&#x27;文件完整路径&#x27;</span>,<br>    <span class="hljs-keyword">UNIQUE</span> KEY <span class="hljs-string">&#x27;uq_part_order&#x27;</span> (`shard_upload_id`,`part_order`)<br>) comment <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;分片文件表，每个分片文件对应一条记录&#x27;</span>;<br></code></pre></td></tr></table></figure><p>服务端需要提供四个接口</p><ol><li>创建分片上传任务(&#x2F;shardUpload&#x2F;init)  返回分片任务id，后续三个接口都要用</li><li>上传分片文件(&#x2F;shardUpload&#x2F;uploadPart)</li><li>合并分片、完成上传(shardUpload&#x2F;complete)</li><li>获取分片任务详细信息(&#x2F;shardUpload&#x2F;detail) 可以得到分片任务的状态信息，如分片任务是否上传完毕，哪些分片已上传，网络出现故障可以借助此接口恢复上传</li></ol><h3 id="多线程任务批处理通用工具类"><a href="#多线程任务批处理通用工具类" class="headerlink" title="多线程任务批处理通用工具类"></a>多线程任务批处理通用工具类</h3><p><code>todo</code></p><h3 id="java-日期"><a href="#java-日期" class="headerlink" title="java 日期"></a>java 日期</h3><p>java中有很多表示时间的类，我们一起看一下他们的区别和使用场景。</p><p>时区相关的类ZoneId、TimeZone，时刻是唯一的，但是对同一时刻，不同的时区描述是不一样的，比如中国早上10点在美国可能是晚上10点。</p><p>先来看一下ZoneId的用法，抽象类ZoneId有两个子类，ZoneRegion和ZoneOffset</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 这三个返回的就是ZoneRegion，他们三个本质的偏移都是0</span><br><span class="hljs-title class_">ZoneId</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;UTC&quot;</span>)<br><span class="hljs-title class_">ZoneId</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;GMT&quot;</span>)<br><span class="hljs-title class_">ZoneId</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;UT&quot;</span>)<br><br><span class="hljs-comment">// 下面返回的是ZoneOffset</span><br><span class="hljs-title class_">ZoneId</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;GMT+1&quot;</span>)<br><span class="hljs-title class_">ZoneId</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;UT-01:22&quot;</span>)<br><span class="hljs-title class_">ZoneId</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;UTC+05&quot;</span>)<br></code></pre></td></tr></table></figure><p>有人会问GMT和UTC还有UT应该是有区别的但是为啥说一样呢？</p><p>因为这是java里是一样的，但是实际追究历史的话，是三种计算时间的方式，他们在现实世界有着细微的区别，但是在java中是一样的。<br>对于一些常见的时区简称和哪些地区使用可以参考 <code>https://www.timeanddate.com/time/zones/</code></p><p>通过地区名获取时区的方法如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 通过ZoneId名称全程来创建ZoneId对象</span><br><span class="hljs-title class_">ZoneId</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>)<br><br><span class="hljs-comment">// 通过下面方法可以通过简称来创建ZoneId对象</span><br><span class="hljs-title class_">ZoneId</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;EST&quot;</span>, <span class="hljs-title class_">ZoneId</span>.<span class="hljs-property">SHORT_IDS</span>)<br><br><span class="hljs-comment">// TimeZone和ZoneId类似，也是表示时区的，两者可以简单的互转。</span><br><span class="hljs-title class_">TimeZone</span>.<span class="hljs-title function_">getTimeZone</span>(<span class="hljs-string">&quot;UTC&quot;</span>)   <span class="hljs-comment">//! 注意该方法如果传入字符串不合法返回的是GMT+0</span><br><span class="hljs-title class_">TimeZone</span>.<span class="hljs-title function_">getTimeZone</span>(<span class="hljs-string">&quot;xx&quot;</span>, <span class="hljs-literal">false</span>) <span class="hljs-comment">// 不合法则返回null </span><br><span class="hljs-title class_">TimeZone</span>.<span class="hljs-title function_">getTimeZone</span>(<span class="hljs-title class_">ZoneId</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;UTC&quot;</span>)) <span class="hljs-comment">// zoneId -&gt; timeZone</span><br><span class="hljs-title class_">TimeZone</span>.<span class="hljs-title function_">getTimeZone</span>(<span class="hljs-string">&quot;UTC&quot;</span>).<span class="hljs-title function_">toZoneId</span>() <span class="hljs-comment">// timeZone -&gt; zoneId</span><br><br><span class="hljs-comment">// Clock也是一个时区相关的类，他主要有俩作用，记录时区和创建Instant，注意这里有个理解的偏差，就是老想着创建出来的Instant是在这个时区下面的，但是其实Instant是没有时区的绝对值。</span><br><span class="hljs-title class_">Clock</span>.<span class="hljs-title function_">systemDefaultZone</span>()<br><span class="hljs-title class_">Clock</span>.<span class="hljs-title function_">systemUTC</span>()<br><span class="hljs-title class_">Clock</span>.<span class="hljs-title function_">offset</span>(baseClock, duration)<br><br><span class="hljs-comment">// 下面两个写法结果一致，并没有时差，因为Instant没有时区</span><br><span class="hljs-title class_">Clock</span>.<span class="hljs-title function_">systemDefaultZone</span>().<span class="hljs-title function_">instant</span>()<br><span class="hljs-title class_">Clock</span>.<span class="hljs-title function_">systemUTC</span>().<span class="hljs-title function_">instant</span>()<br><br><span class="hljs-comment">// 下面结果一致</span><br><span class="hljs-title class_">Clock</span>.<span class="hljs-title function_">systemDefaultZone</span>().<span class="hljs-title function_">millis</span>()<br><span class="hljs-title class_">Clock</span>.<span class="hljs-title function_">systemUTC</span>().<span class="hljs-title function_">millis</span>()<br></code></pre></td></tr></table></figure><h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><p>有两个Date类，分别是java.util.Date和java.sql.Date。后者是sql中的date，他是只有年月日没有更细粒度的时间信息的。所以一般前者用的较多。Date类主要包含了年,月,日,时,分,秒信息。可以通过这些信息构造Date对象，也可以通过一个Date对象获取这些信息。</p><p>因为Date本来就是表示日期的类，所以也在内部计算出了星期信息。</p><p>原则上Date是不需要毫秒信息的，但是Date中有个fastTime字段记录了毫秒信息，其他信息的计算也都基于这个毫秒信息。所以可以通过getTime方法拿到毫秒信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() <span class="hljs-comment">// 当前时间，实际上市基于System.currentTimeMillis</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(long) <span class="hljs-comment">// 用毫秒数构造，这个方法决定了其他时间对象，只要转为毫秒数，就可以很容易转为Date对象</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2022</span> - <span class="hljs-number">1900</span>, <span class="hljs-number">1</span>, <span class="hljs-number">25</span>, <span class="hljs-number">11</span>, <span class="hljs-number">19</span>, <span class="hljs-number">22</span>) <span class="hljs-comment">// 年是1900的偏移量，月是0-11</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2022</span> - <span class="hljs-number">1900</span>, <span class="hljs-number">1</span>, <span class="hljs-number">25</span>, <span class="hljs-number">11</span>, <span class="hljs-number">19</span>, <span class="hljs-number">22</span>).<span class="hljs-title function_">getYear</span>() <span class="hljs-comment">// 122而不是2022</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2022</span> - <span class="hljs-number">1900</span>, <span class="hljs-number">1</span>, <span class="hljs-number">25</span>, <span class="hljs-number">11</span>, <span class="hljs-number">19</span>, <span class="hljs-number">22</span>).<span class="hljs-title function_">getMonth</span>() <span class="hljs-comment">// 1 指的是2月，0才是1月</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>() <span class="hljs-comment">// 等价于System.currentTimeMillis</span><br></code></pre></td></tr></table></figure><p>综上，Date是基于系统的毫秒偏移，来表示时间，并提供了日期相关的内在计算，可以快速的获取年月日星时分秒等信息，计算时候的时区则是使用了系统默认时区TimeZone.getDefaultRef()。<br>Date在设计上存在诸多问题，例如1900之前的年份没法表示；0表示1月；日期的含义竟然包括了时分秒等信息；格式化工具线程不安全；隐式的使用了系统默认时区；隐式的使用了默认的日历系统。</p><h4 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h4><p>Calendar也是老的jdk中的时间表示，也位于java.util包中，此类没有提供构造方法，可以通过Calendar.getInstance()<br>创建当前时间的日历对象，也可以使用builder来构建。默认返回的是GregorianCalendar，这也是世界上绝大多数国家都在使用的日历系统，但是有些国家比如日本、东南亚一些国家像泰国等没有使用，需要指定历法来创建。</p><p>Calendar引入了可选历法，同时也引入了地区和时区的成员变量，弥补了Date的这些缺陷。比起Date，还提供了时间的加法函数add</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Calendar</span>.<span class="hljs-title class_">Builder</span>()<br>    .<span class="hljs-title function_">setLocale</span>(locale)<br>    .<span class="hljs-title function_">setTimeZone</span>(zone)<br>    .<span class="hljs-title function_">setInstant</span>(<span class="hljs-title class_">System</span>.<span class="hljs-title function_">currentTimeMillis</span>())<br>    .<span class="hljs-title function_">build</span>()   <span class="hljs-comment">// builder创建Calendar</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Calendar</span>.<span class="hljs-title class_">Builder</span>().<span class="hljs-title function_">setInstant</span>(long).<span class="hljs-title function_">build</span>() <span class="hljs-comment">// 用毫秒数构造，这个方法决定了其他时间对象，只要转为毫秒数，就可以很容易转为Calendar对象</span><br><span class="hljs-title class_">Calendar</span>.<span class="hljs-title function_">getInstance</span>().<span class="hljs-title function_">getTimeInMillis</span>() <span class="hljs-comment">// 等价于System.currentTimeMillis</span><br><span class="hljs-title class_">Calendar</span>.<span class="hljs-title function_">getInstance</span>().<span class="hljs-title function_">setTimeZone</span>(xxx)  <span class="hljs-comment">// 不改变本质的时间毫秒数，只改变用于计算用的时区，是对于当前对象的改动，不是返回新对象</span><br></code></pre></td></tr></table></figure><p>综上，Calendar也是基于毫秒数进行时间计算的一个类，他比Date强的地方是提供更细的日历值计算，比如位于一年的第几周，还有时间加法运算，但是时间的格式化类只能作用于date类。</p><h4 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h4><p>Instant与时区无关的绝对的时间，和System.currentTimeMillis类似，但是Instant是精确到纳秒。</p><p>因为纳秒的精度一个long存不过来，所以分为两个字段分别存seconds和nanos。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Instant</span>.<span class="hljs-title function_">now</span>()<br><span class="hljs-title class_">Instant</span>.<span class="hljs-title function_">ofEpochMilli</span>(millis)<br><span class="hljs-title class_">Instant</span>.<span class="hljs-title function_">ofEpochSecond</span>(<span class="hljs-number">4</span>, -<span class="hljs-number">999_999_999</span>) <span class="hljs-comment">// s + ns</span><br>instant.<span class="hljs-title function_">truncatedTo</span>(<span class="hljs-title class_">ChronoUnit</span>.<span class="hljs-property">HOURS</span>) <span class="hljs-comment">// 取整到小于等于当前时间的整秒时间</span><br><span class="hljs-title class_">Instant</span>.<span class="hljs-title function_">now</span>().<span class="hljs-title function_">atZone</span>(<span class="hljs-title class_">ZoneId</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;UTC&quot;</span>)) <span class="hljs-comment">// 转换成UTC下的ZonedDateTime</span><br></code></pre></td></tr></table></figure><p>java.time包下的时间都是基于纳秒精度为计算核心的，所以脱离了System.currentTimeMillis</p><h4 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h4><p>Instant没有时区，是绝对的时间值，但是toString，显示的是UTC0的时间，也不能处理日期相关的东西，例如当前是几月几号。<br>LocalDateTime就是对Date的替代品，后者核心是基于一个毫秒，前者则更精细了到了纳秒。两个重要属性是LocalDate(年月日)，LocalTime(<br>时分秒纳秒)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 下面2个的时间，有8小时时差</span><br><span class="hljs-title class_">LocalDateTime</span>.<span class="hljs-title function_">now</span>()<br><span class="hljs-title class_">LocalDateTime</span>.<span class="hljs-title function_">now</span>(<span class="hljs-title class_">ZoneId</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;UTC&quot;</span>))<br><br><span class="hljs-comment">// 以下两者不同，前者表示当前时间的UTC表示，后者表示当前时间的年月日时分秒不变，时区换UTC</span><br><span class="hljs-title class_">LocalDateTime</span>.<span class="hljs-title function_">now</span>(<span class="hljs-title class_">ZoneId</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;UTC&quot;</span>))<br><span class="hljs-title class_">LocalDateTime</span>.<span class="hljs-title function_">now</span>().<span class="hljs-title function_">atZone</span>(<span class="hljs-title class_">ZoneId</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;UTC&quot;</span>))<br><br><span class="hljs-comment">// LocalDateTime的月从1开始，下面表示2022-01-01 01:01:01</span><br><span class="hljs-title class_">LocalDateTime</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">2022</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="ZonedDateTime"><a href="#ZonedDateTime" class="headerlink" title="ZonedDateTime"></a>ZonedDateTime</h4><p>包含了LocalDateTime和Zone两部分信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">ZonedDateTime</span>.<span class="hljs-title function_">now</span>() <span class="hljs-comment">//系统时区</span><br><span class="hljs-title class_">ZonedDateTime</span>.<span class="hljs-title function_">now</span>(<span class="hljs-title class_">ZoneId</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;UTC&quot;</span>)) <span class="hljs-comment">//UTC0时区</span><br><span class="hljs-title class_">ZonedDateTime</span>.<span class="hljs-title function_">now</span>(<span class="hljs-title class_">Clock</span>.<span class="hljs-title function_">systemUTC</span>()) <span class="hljs-comment">// 同上</span><br><br><span class="hljs-title class_">ZonedDateTime</span>.<span class="hljs-title function_">now</span>(<span class="hljs-title class_">Clock</span>.<span class="hljs-title function_">systemUTC</span>()).<span class="hljs-title function_">toLocalDateTime</span>() <span class="hljs-comment">// 直接拿出localDateTime部分</span><br><span class="hljs-title class_">ZonedDateTime</span>.<span class="hljs-title function_">now</span>(<span class="hljs-title class_">Clock</span>.<span class="hljs-title function_">systemUTC</span>()).<span class="hljs-title function_">toInstant</span>()       <span class="hljs-comment">// 转换为Instant</span><br></code></pre></td></tr></table></figure><p>345都提供了isBefore这样的比较方法，但是不建议在localDateTime类使用该方法，因为可能是不同时区。</p><h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><p>old : SimpleDateFormat 线程不安全</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">SimpleDateFormat</span><br>sdf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><span class="hljs-title class_">Date</span><br>d = sdf.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&quot;2022-01-01 11:11:11&quot;</span>);<br><span class="hljs-title class_">String</span><br>str = sdf.<span class="hljs-title function_">format</span>(d);<br></code></pre></td></tr></table></figure><p>new : DateTimeFormatter 线程安全 jdk 1.8</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">DateTimeFormatter</span><br>dtf = <span class="hljs-title class_">DateTimeFormatter</span>.<span class="hljs-title function_">ofPattern</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>dtf.<span class="hljs-title function_">format</span>(<span class="hljs-title class_">LocalDateTime</span>.<span class="hljs-title function_">now</span>());<br><span class="hljs-title class_">LocalDateTime</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&quot;2022-01-01 11:11:11&quot;</span>, dtf);<br></code></pre></td></tr></table></figure><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><h4 id="字符串拼接【性能对比以及优缺点】"><a href="#字符串拼接【性能对比以及优缺点】" class="headerlink" title="字符串拼接【性能对比以及优缺点】"></a>字符串拼接【性能对比以及优缺点】</h4><p>字符串拼接性能调优：最重要的就是内存的申请</p><ol><li>StringBuilder 不知道长度最快 不安全，指针不在乎安全</li><li>+&#x3D; 耗内存</li><li>$</li><li>String.Formt</li><li>String.Concat 知道长度时做快</li></ol><ul><li>速度第一：String.Concat</li><li>速度第二：StringBuilder</li><li>速度第三：$ String.Formt 差不多并列</li><li>速度第四：+&#x3D; 最耗内存 不建议使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// StringBuilder 使用方法</span><br><br><span class="hljs-type">StringBuilder</span><br><span class="hljs-variable">strB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br><span class="hljs-comment">// 1、append(String str)/append(Char c)：字符串连接</span><br>System.out.println(<span class="hljs-string">&quot;StringBuilder:&quot;</span> + strB.append(<span class="hljs-string">&quot;hello&quot;</span>).append(<span class="hljs-string">&quot;world&quot;</span>));<br><span class="hljs-comment">//return &quot;StringBuilder:helloworld&quot;</span><br><br><span class="hljs-comment">// 2、toString()：返回一个与构建起或缓冲器内容相同的字符串</span><br>System.out.println(<span class="hljs-string">&quot;String:&quot;</span> + strB.toString());<br><span class="hljs-comment">//return &quot;String:helloworld&quot;</span><br><br><span class="hljs-comment">// 3、appendcodePoint(int cp)：追加一个代码点，并将其转换为一个或两个代码单元并返回this</span><br>System.out.println(<span class="hljs-string">&quot;StringBuilder.appendCodePoint:&quot;</span> + strB.appendCodePoint(<span class="hljs-number">2</span>));<br><span class="hljs-comment">//return &quot;StringBuilder.appendCodePoint:helloworld &quot;</span><br><br><span class="hljs-comment">// 4、setCharAt(int i, char c)：将第 i 个代码单元设置为 c（可以理解为替换）</span><br>strB.setCharAt(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;d&#x27;</span>);<br>System.out.println(<span class="hljs-string">&quot;StringBuilder.setCharAt:&quot;</span> + strB);<br><span class="hljs-comment">//return &quot;StringBuilder.setCharAt:hedloworld&quot;</span><br><br><span class="hljs-comment">// 5、insert(int offset, String str)/insert(int offset, Char c)：在指定位置之前插入字符(串)</span><br>System.out.println(<span class="hljs-string">&quot;StringBuilder.insertChar:&quot;</span> + strB.insert(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;A&#x27;</span>));<br><span class="hljs-comment">//return &quot;StringBuilder.insertChar:heAlloworld&quot;</span><br><br><span class="hljs-comment">// 6、delete(int startIndex,int endIndex)：删除起始位置（含）到结尾位置（不含）之间的字符串</span><br>System.out.println(<span class="hljs-string">&quot;StringBuilder.delete:&quot;</span> + strB.delete(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>));<br><span class="hljs-comment">//return &quot;StringBuilder.delete:heloorld&quot;</span><br><br><br><span class="hljs-comment">// +=使用方法</span><br><span class="hljs-type">Stirng</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<br>str = <span class="hljs-string">&quot;a&quot;</span> + <span class="hljs-string">&quot;b&quot;</span>;<br><br><br><span class="hljs-comment">// $使用方法</span><br>String str=<span class="hljs-string">&quot;hello&quot;</span>;<br>String str2=<span class="hljs-string">&quot;world&quot;</span>;<br><span class="hljs-type">var</span> <span class="hljs-variable">ccb</span> <span class="hljs-operator">=</span> $<span class="hljs-string">&quot;Hi!  &#123;str&#125;&#123;str2&#125;&quot;</span>;<br><br><br><span class="hljs-comment">// String.Format使用方法</span><br>string str= String.Format(<span class="hljs-string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>);<span class="hljs-comment">//str=&quot;helloworld&quot;;</span><br><br><span class="hljs-comment">// string.Concat使用方法</span><br>string str=string.Concat(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>); <span class="hljs-comment">//str=&quot;helloworld&quot;;</span><br></code></pre></td></tr></table></figure><h4 id="利用-String-format-方法及占位符优雅拼接字符串"><a href="#利用-String-format-方法及占位符优雅拼接字符串" class="headerlink" title="利用 String format 方法及占位符优雅拼接字符串"></a>利用 String format 方法及占位符优雅拼接字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.xiaogd.core.java.basic;<br><br><span class="hljs-keyword">import</span> org.junit.Assert;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringFormatTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stringFormat</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;小明&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;他的名字叫%s, 他今年%d岁.&quot;</span>, name, age);<br>        Assert.assertEquals(<span class="hljs-string">&quot;他的名字叫小明, 他今年20岁.&quot;</span>, str);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// String.format 还支持更多的格式化的操作, 这个具体就要读者自己去看它的文档了.</span><br><span class="hljs-comment">// 其实它内部也是使用了 Formatter 这个类去实现的, 所以应该看的是 java.util.Formatter 这个类的文档, 里面有更多的用法介绍, 包括格式化小数, 日期, 货币等等的操作.</span><br></code></pre></td></tr></table></figure><p>其实正如 format 这个方法名所暗示的, 它主要是关于格式化字符串的, 但它正好也给出了一种拼接字符串的较为优雅的方式, 所以,<br>即便你不关心字符串的格式化, 依然可以利用它的这个特性去做字符串常量与变量的拼接, 从而提高代码的可读性.</p><h4 id="日志中优雅使用"><a href="#日志中优雅使用" class="headerlink" title="日志中优雅使用"></a>日志中优雅使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//  直接拼接，不优雅</span><br>log.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;username: &quot;</span> + user.<span class="hljs-title function_">getUsername</span>() + <span class="hljs-string">&quot; , age: &quot;</span> + user.<span class="hljs-title function_">getAge</span>());<br><br><span class="hljs-comment">// 占位符拼接</span><br>log.<span class="hljs-title function_">info</span>(<span class="hljs-title class_">String</span>.<span class="hljs-title function_">format</span>(<span class="hljs-string">&quot;username: %s, age: %d&quot;</span>), user.<span class="hljs-title function_">getUsername</span>(), user.<span class="hljs-title function_">getAge</span>());<br></code></pre></td></tr></table></figure><p>这种比前一种方式要优雅一点, 不过呢, 却还是要用到 String.format 方法, 并且需要注意变量的类型, 而现在基本上很多的日志框架都直接支持一种占位符的写法,<br>与 String.format 中的不同, 可能相对来说还更简单一点, 只是它必须依赖于日志框架相关代码, 且只能用于日志输出中,<br>这样的方式就是利用大括号 {} 这种占位符(也称为 格式化锚点(formatting anchor))的写法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">log.info(<span class="hljs-string">&quot;username: &#123;&#125;, age: &#123;&#125;&quot;</span>, user.getUsername(), user.getAge());<br></code></pre></td></tr></table></figure><p>这种写法用户也不需要关注变量的类型, 如果有三个或更多的变量值要输出, 就相应多写几个 {}, 以及多传几个对应变量即可:</p><p>注: 方法的第二个参数是可变长参数, 因此可以传多个.</p><p>有了这种写法的支持, 就可以一口气写完要输出的日志信息, 而要拼接的变量就用 {} 暂时代替, 避免了用 + 号拼接的繁琐.</p><p>这样的使用占位符的写法还有一个潜在的好处, 就是性能的提升. 如果配置的日志级别是不输出 info 级别的日志,<br>那么相应的字符串的拼接与替换就不会发生, 可变长参数数组也不会生成.</p><p>而如果使用 + 号式之类的写法, 就不能得到这个好处了, 字符串传入之前就已经被拼接了, 最后因为日志级别的原因又没有输出的话,<br>无疑是一种浪费.</p><p>最后, 如果是 error 日志, 还支持一种特别的写法, 可以把异常传给最后一个参数, 除了替换占位符输出你的异常信息外,<br>它还会把异常栈整个打印出来, 避免了你自己去调用 e.printStackTrace:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">fetchUserList</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user-list.txt&quot;</span>;<br>       <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(getClass().getResourceAsStream(fileName), StandardCharsets.UTF_8);<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> reader.read();<br>       &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>           log.error(<span class="hljs-string">&quot;error while reading &#123;&#125;&quot;</span>, fileName, e);<br>       &#125;<br>       <span class="hljs-comment">// todo</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意以上, 错误信息只有一个占位符, 但后面跟了两个变量, 其中最后的变量是 Throwable 类型的, 只有第一个变量值才参与字符串的拼接.</p></blockquote><blockquote><p>当最后的变量是 Throwable 类型时, log 框架会将其当作异常栈输出, 类似于这个调用 public void error(String msg, Throwable<br>t);, 异常变量需置于最后.</p></blockquote><blockquote><p>另注: 此用法需要相应的日志版本的支持, 参见这里: <a href="http://www.slf4j.org/faq.html#paramException">http://www.slf4j.org/faq.html#paramException</a>, 适用 1.6.0 版本及以上,<br>相应的日志实现也需支持.</p></blockquote><p>以上例子说明了在 log 异常时, 同样可以使用占位符的写法, 同时兼容原有的打印异常栈的写法, 这些都算是方便我们输出异常日志的一些技巧,<br>关于使用 {} 占位符输出日志的介绍就到这里.</p><h4 id="为什么说log用占位符比用字符串连接比较好"><a href="#为什么说log用占位符比用字符串连接比较好" class="headerlink" title="为什么说log用占位符比用字符串连接比较好"></a>为什么说log用占位符比用字符串连接比较好</h4><p>我看的是logback的源码</p><p>如果在日志等级符合输出条件的情况下，两个是没有什么大区别的。</p><p>但如果是在日志等级不符合输出条件的情况下：</p><p>由于字符串拼接是作为一个方法参数的，意味着它进入logback的内部判断的时候，就已经是拼接成功了。而在这一步的拼接成功，涉及到String是一个final变量的问题，这个拼接是耗时了，创建了String，但是进入判断之后又完全没什么用。</p><p>这两种是有区别的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">log.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;a&quot;</span> + <span class="hljs-string">&quot;b&quot;</span>);    <span class="hljs-comment">// 没有影响，因为在编译时已经是常量了，一共1个变量</span><br>log.<span class="hljs-title function_">info</span>(a + <span class="hljs-string">&quot;b&quot;</span>); <span class="hljs-comment">// 有影响，a变量是1个，常量&quot;b&quot;是一个，拼接后的有事一个，一共三个变量。 </span><br></code></pre></td></tr></table></figure><p>而如果是占位符的话，它直接在logback的内部判断了日志等级是否足以输出，不行就直接return了。</p><p>再有就是<br><code>isDebugEnabled()</code><br>这种方法如果要封装，但是参数是需要逻辑处理的话，是没有什么用处的，需要显示声明才行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">aa</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// ①</span><br>    cc(<span class="hljs-string">&quot;cc&quot;</span>);  <br>    <span class="hljs-comment">// ②</span><br>    <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>        cc(<span class="hljs-string">&quot;cc&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// ③</span><br>    cc(bb());<br>    <span class="hljs-comment">// ④</span><br>    <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>        cc(bb());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">bb</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>        stringBuilder.append(i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> String.valueOf(stringBuilder);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cc</span><span class="hljs-params">(String aa)</span> &#123;<br>    <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>        log.debug(aa);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>①和②，是没有什么区别的，但是③和④就用区别了。</p><p>④不会进行StringBuilder的拼接，但是③会。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>Java</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自建房指南</title>
    <link href="/2024/10/10/sekf-build_house/"/>
    <url>/2024/10/10/sekf-build_house/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>自建房指南</code>。<br>其中包括了关于我的简介和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>欢迎来到我们的自建房指南博客！在这里，我们将为您提供全面的自建房知识，从选址、设计到施工，帮助您实现理想中的家园。无论您是首次尝试还是有经验的自建者，我们的内容都将为您提供实用的建议和技巧。我们将探讨最新的建筑趋势、材料选择、预算管理以及法规要求，确保您在整个过程中都能得心应手。让我们一起踏上这个激动人心的自建之旅吧！</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ul><li>最好是找个设计师，几千块钱设计个。注意<strong>不要被骗</strong>了，提前做好功课，再去找设计师设计。</li><li>设计方案包含的全套图纸<ol><li>建筑平面方案：主要包含各层主要功能尺寸方案布局。</li><li>外观效果图：主要包含内容：有正面场景的透视效果图，模型图，真实的反映出房子建成后的造型和外观效果。</li><li>建筑施工图：主要包含建筑设计说明，施工立面图，剖面图，门窗图，楼梯详图，厨卫详图，细节图等。</li><li>结构施工图：主要包含结构设计说明，地基基础施工图，梁板配筋图，柱位配筋图，楼梯配筋图。</li><li>给排水施工图：主要包含给排水设计说明，卫生间，厨房，阳台给水和排水，屋面雨水的排放，化粪池设计等。</li><li>电气施工图：主要包含电气设计说明，各层照明布局，空调，插座，电话，电视，网络，防雷设计等。</li></ol></li><li>一 报建审批阶段<ol><li>确认是否具备建房资格</li><li>联系建筑师制定初步的自建房方案效果图及平面图图纸</li><li>准备相关材料和图纸向村委提出报建申请</li><li>获得《建设工程规划许可证》及公示牌</li></ol></li><li>此阶段总耗时在1个月-3个月时间不等，要多与村委保持联系，表现积极的业主可以更快获得审批回应。等审批的过程应该马上联系专业的建筑师进行设计的前期工作，制作初步的审批图纸。</li><li>二 方案设计阶段<ol><li>根据《建设工程规划许可证》中的审定意见，以及自身需求与建筑师配合协同拟定项目任务书。</li><li>建筑师根据任务书开始方案设计。方案设计的最终成果包括建筑效果图，平面图，剖面图及配套的结构，水暖电施工图。</li><li>建筑师与业主要充分沟通，确保最终成果既满足规划控制条件，符合大众审美，展示城市风貌，又能够体现业主的意愿和审美品位。</li></ol></li><li>此阶段大概持续1个月，建筑师工作的核心就是将业主零碎的需求有序地整合起来，最终有机组合成一个兼具形象美观，功能合理，空间舒适的建筑。</li><li>三 施工管理阶段<ol><li>联系当地的建筑施工队及材料供应商，施工队主要包括建筑主体和装修团队</li><li>施工前，业主要求建筑师与主体施工团队负责人沟通图纸细节和构造大样，确保施工的质量</li><li>施工流程：地下部分+地上部分</li><li>周边景观，硬地+绿化</li><li>安装门窗</li><li>内外墙抹灰</li></ol></li><li>此过程约持续3个月-6个月不等，施工过程中业主有任何专业性的问题都可以第一时间寻求建筑师的帮助，建筑师要协助业主把控一切与建筑效果有关的工作。为了房子可以顺利完工，团结各方非常重要。</li><li>四 竣工验收阶段<ol><li>业主验收，确认建筑施工是否按照效果图和预期完成，酌情打折施工费用，如果是图纸问题，则酌情打折设计费用。</li><li>政府验收，确认建筑的外立面效果是否按照规划控制条件设计建造。</li></ol></li></ul><h3 id="方案之前"><a href="#方案之前" class="headerlink" title="方案之前"></a>方案之前</h3><p>思维误区</p><ul><li>省钱:找设计师做太贵了</li><li>省事:只想简单大气就好</li><li>自信:船到桥头自然直嘛</li></ul><p>场地问题</p><ul><li>环境问题</li><li>交通问题</li><li>场地本身情况</li><li>室内环境考虑</li><li>绿化考虑</li></ul><p>一定要根据自己的需求建设房屋，该找专业的人设计找专业的人设计。</p><h3 id="需求与方案"><a href="#需求与方案" class="headerlink" title="需求与方案"></a>需求与方案</h3><p>需求发现</p><ul><li>首先不要思考房子用什么框架结构，砖混还是钢框架。</li><li>思考使用需求<ul><li>比如，一层留下给父母的房间</li><li>需要多少客房</li><li>顶层是否需要露天阳台种花</li><li>etc..</li></ul></li><li>注意<ul><li>不要硬造需求，比如是否要参考别人弄个酒窖</li><li>不要想的太具体，比如多大的厨房</li></ul></li><li>扩写<ul><li>主卧要不要卫生间，衣帽间</li><li>玄关是否需要</li><li>厨房旁边是否需要个小储物室</li></ul></li><li>具象化<ul><li>落地窗</li><li>层高</li><li>家具需求</li></ul></li><li>场地要素</li></ul><h4 id="方案与预算"><a href="#方案与预算" class="headerlink" title="方案与预算"></a>方案与预算</h4><ul><li>预算估算<ul><li>房屋面积和当地建平均造成本</li></ul></li><li>结构体系<ul><li>根据地理情况，进行灾害方面的预防设计</li><li>砖混结构:<ul><li>特点:造价便宜、施工简单、施工周期长、建筑自重重、放大脚基础+地梁</li><li>缺点:工艺简单、但因为施工单价低，工艺可能毫无底线</li></ul></li><li>框架结构;<ul><li>特点:造价适中、灵活多变、建造周期短、自重轻、独立基础+基础联系梁</li><li>缺点:工艺要求高、要求结构设计方案</li></ul></li><li>剪力墙结构.<ul><li>特点:造价高、灵活多变、自重重、抗震性能好、条形基础、筏板基础、桩基础</li><li>缺点:地基承载力要求高、更需要地基勘探、工艺要求高、要求结构设计</li></ul></li><li>钢结构<ul><li>特点：建造速度快，自重轻，形态灵活，抗震能力好</li></ul></li><li>如何选择：造假、方案特点、地区、施工队能力</li></ul></li><li>缩减成本<ul><li>减少面积</li><li>组织布局</li><li>不要做太高层高</li><li>不要做太高地坪</li><li>不要太注重装饰</li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>house</category>
      
    </categories>
    
    
    <tags>
      
      <tag>house</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统架构设计师备考-概述</title>
    <link href="/2024/05/27/system_architecture_designer1/"/>
    <url>/2024/05/27/system_architecture_designer1/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>2024</code>年下半年<code>系统架构设计师</code>备考经验相关的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>学过一些计算机基础课，<code>计算机体系结构</code>、<code>计算机网络</code>、<code>操作系统</code>、<code>数据架构</code>、<code>软件工程</code>、<code>UML建模</code><br>等，23年下半年考的<code>软考中级·软件设计师</code>，24年上半年考了系统分析师，感觉过不了了。对于别的一些前置知识也不是很了解。多多加油吧！努力了就能过。</p><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="考试介绍"><a href="#考试介绍" class="headerlink" title="考试介绍"></a>考试介绍</h3><h4 id="考试简介"><a href="#考试简介" class="headerlink" title="考试简介"></a>考试简介</h4><p>软考全程是计算机技术与软件资格（水平）考试，是由国家人力资源和社会保障部、工业和信息化部领导下的国家级考试。总共有三级，在职称体系内对应的是初级对应四级初级工程师，一般还有个类似助理工程师一样的五级，如人资这些会有，软考没有。中级对应的是三级中级工程师，高级对应的是二级副高级工程师。再往上是一级，正高级工程师，这个需要评定，提交相应材料，难度还是比较大的。</p><p>系统分析师考试属于全国计算机技术与软件专业技术资格考试(即软考)中的一个高级考试。</p><p>通过本考试的合格人员应熟悉应用领域的业务，能分析用户的需求和约束条件，写出信息系统需求规格说明书，制订项目开发计划，协调信息系统开发与运行所涉及的各类人员;能指导制订企业的战略数据规划、组织开发信息系统能评估和选用适宜的开发方法和工具;能按照标准规范编写系统分析、设计文档;能对开发过程进行质量控制与进度控制;能具体指导项目开发，具有高级工程师的实际工作能力和业务水平。</p><p>简单的说，通过系统分析师考试，代表你将拥有高级专业技术资格 (高级工程师系列，副高级)，从级别上讲，它相当于副教授、高级教师等，从专业技术资格来讲没有区别。</p><table><thead><tr><th>考试科目</th><th>考题形式</th><th>考试时长</th><th>合格标准</th></tr></thead><tbody><tr><td>信息系统综合</td><td>笔试-75 道单选题（每题 1 分，总分 75 分）</td><td>120-150分钟</td><td>45 分及以上合格</td></tr><tr><td>系统架构设计案例</td><td>笔试，三道问答题（1 道必答+4 选 2）</td><td>120 分钟</td><td>45 分及以上</td></tr><tr><td>系统架构设计师论文</td><td>笔试，一道论文（4 选 1）</td><td>120 分钟</td><td>45 分以上</td></tr></tbody></table><p>之前都是笔试，现在换成机试了，软考官网有软件试用，考前有几天开放测试，可以下载试试。</p><h4 id="考试报名"><a href="#考试报名" class="headerlink" title="考试报名"></a>考试报名</h4><p>报名条件:系统分析师考试不设学历与资历条件，也不论年龄和专业，考生可根据自己的技术水平选择合适的级别合适的资格可根据自己的学术水平选择拿的级合适的类格、保一次者试只能报者、种一标准、统一证书的考试办法。<br>报名时间和地址:基本都是网上报名，一般在考试前 3 个月。各地报名时间不同。</p><p>请关注：<a href="http://wwwruankao.orq.cn/">软考官网</a>;同时关注考生所在地区考试中心网站通知。</p><p>考试安排:官网查询相关公告。2024年改革后，一年安排两次考试，分别在5月和11月。</p><h4 id="证书价值"><a href="#证书价值" class="headerlink" title="证书价值"></a>证书价值</h4><ol><li>以考代评单位聘职称</li><li>升职加薪找工作</li><li>提升职场竞争力人才引进</li><li>人才补贴直接落户或积分落户</li><li>入专家库，成为评标专家招投标时加分项</li></ol><p>评是国家承认，聘是公司承认你。公司聘你会给你相应待遇，不聘没什么用。私企价值不大，一般都不会聘。</p><h4 id="实用网站"><a href="#实用网站" class="headerlink" title="实用网站"></a>实用网站</h4><ol><li>官网</li><li>各地考试机构</li></ol><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><p>Q:软考会取消吗?</p><p>A:软考作为计算机行业唯一的专业技术职称考试，同会计等其他职称考试同等重要，不可能被取消。在 2016.12.16<br>日国务院最新公布的国家职业资格目录清单一样包括软考，可以说是更稳定了。在最新的 2017.09.17<br>也公布了国家职业资格目录，软考处于专业技术人员职业资格中，详见<a href="https://www.gov.cn/xinwen/2017-09/17/content_5225705.htm">国家职业资格目录</a>。</p><p>Q:软考证书长期有效吗?</p><p>A:多数省份已经承认计算机资格证书长期有效并停止了证书登记的相关工作。</p><h3 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h3><h4 id="总纲"><a href="#总纲" class="headerlink" title="总纲"></a>总纲</h4><p>新版大纲【考试要求】</p><ol><li>掌握计算机软硬件及其相关的基础知识;</li><li>掌握系统架构的开发、验证和评估过程及方法;</li><li>理解相关的软件开发标准和常用的信息技术标准;</li><li>熟悉主流的基础软件、中间件和应用支撑技术等;</li><li>掌握软件系统建模、系统架构设计、演化及其评估等基本技术;</li><li>熟悉信息安全技术、安全架构、安全策略、安全管 理和软件脆弱性等知识;</li><li>了解信息化和信息技术相关法律、法规的基础知识</li><li>了解计算机软硬件技术的综合应用;</li><li>了解系统工程及应用的相关技术;</li><li>了解用户的行业特点，并根据行业特点架构合适的系统设计;</li><li>掌握应用数学的基础知识;</li><li>熟练阅读和正确理解相关领域的英文文献。</li></ol><h4 id="新老教材对比"><a href="#新老教材对比" class="headerlink" title="新老教材对比"></a>新老教材对比</h4><ul><li>原教材:2009年出版，共21章，572页</li><li>新教材:2022年出版，共20章，712页，上篇1-11章基础知识，下篇12-20章架构设计+论文。</li></ul><table><thead><tr><th>新版教材</th><th>老版教材</th><th>真题考察</th></tr></thead><tbody><tr><td>绪论</td><td>绪论</td><td>不考</td></tr><tr><td>计算机系统基础知识</td><td>计算机与网络基础</td><td>10-15分</td></tr><tr><td>信息系统基础知识</td><td>信息系统基础知识</td><td>2-3</td></tr><tr><td>信息安全技术基础知识</td><td>信息安全技术</td><td>3-4</td></tr><tr><td>软件工程基础知识</td><td>系统开发基础知识</td><td>10</td></tr><tr><td>数据库设计基础知识</td><td>数据库基础</td><td>3-4</td></tr><tr><td>系统架构设计基础知识</td><td>软件架构设计</td><td>15</td></tr><tr><td>系统质量属性与架构评估</td><td>软件架构设计</td><td>15</td></tr><tr><td>软件可靠性基础知识</td><td>系统的可靠性设计</td><td>1-2</td></tr><tr><td>软件架构的演化与维护</td><td>软件架构设计</td><td>15</td></tr><tr><td>未来信息综合技术</td><td>纯新增，无对应</td><td>2-3</td></tr><tr><td>信息系统架构设计理论与实践</td><td>纯新增，无对应</td><td>2-3</td></tr><tr><td>层次式架构设计理论与实践</td><td>层次式架构设计</td><td>2-3</td></tr><tr><td>云原生架构设计理论与实践</td><td>纯新增</td><td></td></tr><tr><td>面向服务架构设计理论与实践</td><td>面向服务的架构</td><td>2-3</td></tr><tr><td>嵌入式系统架构设计理论与实践</td><td>嵌入式系统设计</td><td>2-3</td></tr><tr><td>通信系统架构设计理论与实践</td><td>纯新增</td><td></td></tr><tr><td>安全架构设计理论与实践</td><td>系统安全架构设计</td><td></td></tr><tr><td>大数据架构设计理论与实践</td><td>纯新增</td><td></td></tr><tr><td>系统架构设计论文写作要点</td><td>纯新增</td><td></td></tr><tr><td>补充：知识产权、数学与经济管理等</td><td></td><td>教材没有，但是会考，系统分析师教材里面有。</td></tr></tbody></table><h4 id="科目一"><a href="#科目一" class="headerlink" title="科目一"></a>科目一</h4><ol><li>计算机硬件</li><li>操作系统</li><li>数据库</li><li>嵌入式技术</li><li>计算机网络</li><li>其他计算机系统基础知识（多媒体、计算机语言）</li><li>系统性能</li><li>信息系统基础知识</li><li>信息安全技术</li><li>软件工程</li><li>面向对象技术</li><li>项目管理</li><li>系统架构设计</li><li>软件可靠性基础知识</li><li>软件架构演化和维护</li><li>未来信息综合技术</li><li>补充-数学与经济管理、法律法规与标准化</li></ol><h4 id="科目二"><a href="#科目二" class="headerlink" title="科目二"></a>科目二</h4><ol><li>软件架构设计:每年会必考1-2题，并且是第1题必选题，必须掌握，主要涉及到质量属性、软件架构风格、软件架构评估、MVC架构、面向服务的架构SOA、ESB、J2EE架构等</li><li>系统开发基础:几乎每年必考1题，主要涉及到UML的图、关系的识别，尤其是类图用例图、活动图、状态图;设计模式识别;数据流图、E-R图等简单识别;信息安全相关技术;项目管理-进度管理-关键路径。</li><li>数据库系统:偶尔会考察一题，主要考察的是数据库的一些新技术的比较，如关系型数据库、内存数据库及NoSQL等，还会包括反规范化技术、主从复制、负载均衡等。</li><li>嵌入式系统:几乎每年必考一题，选做题，考察比较的多的是嵌入式系统的实时性和可靠性以及容错等概念。大概率会考到一些嵌入式领域陌生技术，如果是完全没见过的技不选即可。</li><li>Web应用开发:主要考察Web相关技术，一般结合架构进行考察。偶尔会考到新技术，遇到完全没听说过的技术，就不选。</li></ol><p>此外，早年的考试中，偶尔考到一些完全陌生的架构和技术，没有看的必要，可忽略因为陌生技术不会再考第二次，无法去归纳总结，也没有了解的必要。</p><h4 id="科目三"><a href="#科目三" class="headerlink" title="科目三"></a>科目三</h4><p>大纲：</p><ul><li>系统建模<ul><li>定义问题与归结模型</li><li>结构化系统建模</li><li>面向对象系统建模</li><li>数据库建模</li><li>可靠性建模</li><li>系统评估建模</li></ul></li><li>软件架构设计<ul><li>软件架构风格选择</li><li>软件架构设计</li><li>特定领域软件架构</li><li>基于架构的软件开发方法</li><li>属性驱动的软件设计方法</li><li>实时系统设计方法</li><li>软件架构演化</li><li>架构质量和评估</li><li>架构脆弱性分析</li></ul></li><li>系统设计<ul><li>信息系统的总体框架设计</li><li>大数据处理系统流程设计</li><li>SOA及分布式系统总体设计</li><li>系统人-机界面设计</li><li>嵌入式系统设计</li><li>数据库系统设计</li><li>文件设计、存储设计</li><li>通信和网络应用系统设计</li><li>系统运行环境的集成与设计</li><li>系统性能设计</li><li>系统安全性和可靠性设计</li><li>中间件、构件化系统设计</li></ul></li><li>系统的可靠性分析与设计<ul><li>系统的故障模型和可靠性模型</li><li>提高系统可靠性的措施</li><li>系统的故障对策和系统的备份与恢复</li><li>系统可靠性分析、预计与评估</li></ul></li><li>系统的安全性和保密性设计<ul><li>系统的访问控制技术数据的完整性</li><li>数据与文件的加密</li><li>系统抗攻击设计</li><li>通信的安全性</li><li>系统安全性评估与认证</li></ul></li></ul><p>考点：八大架构： 信息系统架构、层次式架构、云原生架构、面向服务架构、嵌入式架构、通信系统架构、安全架构、大数据架构。<br>复习策略:</p><ol><li>看文老师论文写作分析视频，掌握写作套路</li><li>提前准备好论文项目，写好论文模板，准备好素材</li><li>多动手，当做考试对待，培养手速和文字功底。</li><li>论文模板写好后，多与文老师沟通，采纳批改后的建议，查缺补漏</li><li>要准备新技术、大项目，配得上系统分析师的身份。</li><li>心态最重要，不能慌</li></ol><h4 id="通过率分析"><a href="#通过率分析" class="headerlink" title="通过率分析"></a>通过率分析</h4><p>据参考资料统计，全国平均通过率 5%-10%左右</p><p>整体看来，通过率不算高，但要注意以下原因:</p><ol><li>每个考场约有 1&#x2F;3 的考生缺考:</li><li>少数考生未能进行全面有效的复习;</li></ol><p>去除以上原因，据文老师对多数学员的回访来看，如果有切实可行的复习计划并且认真准备的考生，考试通过率是还可以的。</p><h3 id="备考复习"><a href="#备考复习" class="headerlink" title="备考复习"></a>备考复习</h3><h4 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h4><p>官方教材、培训机构教材。</p><h4 id="备考策略"><a href="#备考策略" class="headerlink" title="备考策略"></a>备考策略</h4><p>看一些视频，<code>B站</code>就有很多，或者去电商网站买点视频。</p><p>其次是一定要多练，按照我的经验，历年真题练的多，考试成绩都不会很差。</p><p>关于时间，一天俩小时，两个月就够了。如果基础好，甚至一个月就行。如果怕不稳就加长时间，笨鸟先飞。</p><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统架构设计师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统架构设计师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码整洁之道</title>
    <link href="/2024/05/08/code/"/>
    <url>/2024/05/08/code/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>代码整洁之道</code>。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><ul><li>不要用单个字母命名</li><li>不要缩写</li><li>不要在名称中携带类型信息</li><li>如果你纠结怎么命名，说明你代码结构有问题</li><li>不要使用Utils</li></ul><h3 id="组合为什么优于继承"><a href="#组合为什么优于继承" class="headerlink" title="组合为什么优于继承"></a>组合为什么优于继承</h3><ul><li>继承不利于代码的演进</li><li>组合：不通过继承实现代码复用</li></ul><h3 id="抽象非百利而无一害"><a href="#抽象非百利而无一害" class="headerlink" title="抽象非百利而无一害"></a>抽象非百利而无一害</h3><ul><li>越抽象越耦合</li></ul><h3 id="勿写注释"><a href="#勿写注释" class="headerlink" title="勿写注释"></a>勿写注释</h3><ul><li>如果复杂到需要写注释，那么就应该考虑能否简化、重构以优化代码</li><li>注释的BUG：开发者忘记维护注释，不要相信注释</li><li>如果你需要注释去解释代码，不妨把代码写的更像人话</li></ul><h3 id="为何要成为不嵌套主义"><a href="#为何要成为不嵌套主义" class="headerlink" title="为何要成为不嵌套主义"></a>为何要成为不嵌套主义</h3><ul><li>将花括号视作一层嵌套</li><li>反转，尽早返回<code>eg早校验，早返回</code></li><li>核心法则：提炼&amp;反转</li></ul><h3 id="过早优化"><a href="#过早优化" class="headerlink" title="过早优化"></a>过早优化</h3><ul><li>性能&amp;表现&amp;适应性的权衡是一个问题</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>整洁架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>环境搭建相关杂谈</title>
    <link href="/2024/05/06/env/"/>
    <url>/2024/05/06/env/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>日常记录的一些杂记</code>。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>本文假设您具备基本的科学探索素养，知道怎么使用电脑，什么是环境变量，对linux有使用经验。</p><p>本文尽量还原完整步骤，至于像<code>点蓝色链接即可跳转</code>这种基本操作，不做赘述。</p><p>本文环境配置涉及到显卡的，主要是显卡10系之后的。之前的建议检索其他博客配置。</p><h2 id="AI-环境"><a href="#AI-环境" class="headerlink" title="AI 环境"></a>AI 环境</h2><h3 id="wsl2-安装Ubuntu并迁移到D盘与卸载"><a href="#wsl2-安装Ubuntu并迁移到D盘与卸载" class="headerlink" title="wsl2 安装Ubuntu并迁移到D盘与卸载"></a>wsl2 安装Ubuntu并迁移到D盘与卸载</h3><ul><li>安装<a href="https://learn.microsoft.com/zh-cn/windows/wsl/install-manual">微软官方</a></li><li>迁移D盘<ul><li>wsl -l -v</li><li>wsl –shutdown</li><li>wsl –export Ubuntu-20.04 d:\ubuntu.tar</li><li>wsl –unregister Ubuntu-20.04</li><li>wsl –import Ubuntu-AI d:\wsl\ai_ubuntu_20_04 d:\ubuntu.tar –version 2</li><li>wsl -d Ubuntu-AI (访问)</li></ul></li><li>卸载<ul><li>wsl –unregister Ubuntu-AI (再到目录下把剩余文件删除即可)</li></ul></li></ul><h3 id="主机深度学习环境"><a href="#主机深度学习环境" class="headerlink" title="主机深度学习环境"></a>主机深度学习环境</h3><ul><li>机器学习环境只需要安装python和sk-learn或者别的库就行了，至于gpu加速sk-learn，笔者尚未涉及。建议使用搜素引擎检索相关内容学习。</li><li>安装Python，建议下载最新版，win下exe，无脑下一步，即可。<a href="https://www.python.org/downloads/">官网下载链接</a></li><li>安装Anaconda，<a href="https://www.anaconda.com/download">官网下载链接</a><ul><li>安装后，建议更新。<ul><li><code>conda update conda</code></li><li><code>conda update --all</code></li></ul></li><li>常用的python虚拟环境配置(不懂请百度)有pipenv和anacaonda，笔者小项目用pipenv，大项目用anaconda，</li><li>安装pipenv，使用安装python自带的pip即可。（高版本的python基本上默认带，如果你没有，换个新版本python吧，太旧了）<code>pip install pipenv</code></li><li>anaconda list 加速，照着这个官网的步骤做就行，就三步。<a href="https://www.anaconda.com/blog/a-faster-conda-for-a-growing-community">官网链接</a></li></ul></li><li>CUDA驱动更新<ul><li>去官网选择自己的显卡类型<a href="https://www.nvidia.com/Download/index.aspx">官网</a></li><li>如果不玩游戏，Download Type选SD。如果玩游戏，选择GRD。</li><li>语言建议英语，以防止有BUG，至于别的语言会不会有BUG，笔者不知道，不作保证。</li></ul></li><li>CUDA toolkit<ul><li>建议11.8 or 12.1，后续环境BUG少【写作日期：2024-5】<a href="https://developer.nvidia.com/cuda-toolkit-archive">官网链接</a></li><li>win版本直接选就可以了，linux可以看后文wsl2配置，一样的。</li></ul></li><li>Pytroch<ul><li>官网有配置<a href="https://pytorch.org/">官网</a></li><li>选择稳定版，平台，conda 包管理，CUDA版本对应，建议11.8 or 12.1，因为这里没别的CUDA版本。至于别的比如12.4，据说有，有的人下载了，可以，我当时没成功。</li><li>官网提供链接，如 <code>conda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia</code></li></ul></li></ul><h3 id="wsl2-配置pytorch-cuda-cudnn环境"><a href="#wsl2-配置pytorch-cuda-cudnn环境" class="headerlink" title="wsl2 配置pytorch-cuda-cudnn环境"></a>wsl2 配置pytorch-cuda-cudnn环境</h3><ul><li>wsl2安装ubuntu20.04</li><li>这一步我没有做，感兴趣的可以看一下。<a href="https://blog.csdn.net/kxqt233/article/details/113825524">安装到指定目录</a></li><li>安装cuda-toolkit（据说是wsl2和win公用cuda驱动，不需要在wsl2里面装）<a href="https://developer.nvidia.com/cuda-toolkit-archive">官方最新驱动链接</a><ul><li><a href="https://developer.nvidia.com/cuda-11-8-0-download-archive?target_os=Linux&target_arch=x86_64&Distribution=WSL-Ubuntu&target_version=2.0&target_type=deb_local">本次链接11.8</a></li><li>wget <a href="https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin">https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin</a></li><li>sudo mv cuda-wsl-ubuntu.pin &#x2F;etc&#x2F;apt&#x2F;preferences.d&#x2F;cuda-repository-pin-600</li><li>wget <a href="https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda-repo-wsl-ubuntu-11-8-local_11.8.0-1_amd64.deb">https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda-repo-wsl-ubuntu-11-8-local_11.8.0-1_amd64.deb</a></li><li>sudo dpkg -i cuda-repo-wsl-ubuntu-11-8-local_11.8.0-1_amd64.deb</li><li>sudo cp &#x2F;var&#x2F;cuda-repo-wsl-ubuntu-11-8-local&#x2F;cuda-*-keyring.gpg &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;</li><li>sudo apt-get update</li><li>sudo apt-get -y install cuda (如果有问题就更新apt源)</li></ul></li><li>cuda 环境变量<ul><li>sudo nano ~&#x2F;.bashrc<br>将以下内容添加进文件最后 <a href="https://blog.csdn.net/m0_57790267/article/details/136403554">后续更换cuda版本一样如此，修改软连接就行了</a></li><li>export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-11.8&#x2F;bin${PATH:+:${PATH}}</li><li>export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-11.8&#x2F;lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}<ul><li>source ~&#x2F;.bashrc</li></ul></li></ul></li><li>校验<ul><li>nvcc -V</li><li>nvidia-smi</li><li>cat &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;version.json</li></ul></li><li>cudnn <a href="https://developer.nvidia.com/rdp/cudnn-archive">download link</a><ul><li>对应版本下载tar包，复制到目录</li><li>sudo tar -xvf cudnn**    #省略部分按tab自动补全<ul><li>#以下是安装命令</li><li>sudo cp -r &#x2F;root&#x2F;cudnn-linux-x86_64-8.9.7.29_cuda11-archive&#x2F;lib&#x2F;* &#x2F;usr&#x2F;local&#x2F;cuda-11.8&#x2F;lib64&#x2F;</li><li>sudo cp -r &#x2F;root&#x2F;cudnn-linux-x86_64-8.9.7.29_cuda11-archive&#x2F;include&#x2F;* &#x2F;usr&#x2F;local&#x2F;cuda-11.8&#x2F;include&#x2F;</li></ul></li><li>#为更改读取权限：<ul><li>sudo chmod a+r &#x2F;usr&#x2F;local&#x2F;cuda-11.8&#x2F;include&#x2F;cudnn*</li><li>sudo chmod a+r &#x2F;usr&#x2F;local&#x2F;cuda-11.8&#x2F;lib64&#x2F;libcudnn*</li></ul></li></ul></li><li>校验<ul><li>cat &#x2F;usr&#x2F;local&#x2F;cuda-11.8&#x2F;include&#x2F;cudnn_version.h | grep CUDNN_MAJOR -A 2</li></ul></li><li>安装anaconda3<ul><li>wget <a href="https://www.anaconda.com/products/distribution">获取linux下载链接</a></li><li>sh Anaconda3-***.sh</li><li>根据提示输入yes &amp; enter</li></ul></li><li>conda 更新<ul><li>conda update –all</li><li>conda update conda</li></ul></li><li>安装pytroch<ul><li><a href="https://pytorch.org/get-started/locally/">获取链接</a></li><li>conda install pytorch torchvision torchaudio pytorch-cuda&#x3D;11.8 -c pytorch -c nvidia</li></ul></li><li>pycharm 专业版 or vscode+wsl插件 畅享<ul><li>import torch</li><li>torch.cuda.is_available()</li></ul></li></ul><h3 id="win环境变量过长问题"><a href="#win环境变量过长问题" class="headerlink" title="win环境变量过长问题"></a>win环境变量过长问题</h3><p>修改注册表<code>\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment</code>下的path</p><h3 id="ubuntu20-04源更新"><a href="#ubuntu20-04源更新" class="headerlink" title="ubuntu20.04源更新"></a>ubuntu20.04源更新</h3><ul><li>原始源配置文件备份<ul><li>cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.backup</li></ul></li><li>更新源配置<ul><li>vim &#x2F;etc&#x2F;apt&#x2F;sources.list</li></ul></li><li>更新<ul><li>apt-get update</li><li>apt-get upgrade</li></ul></li></ul><p>源地址收集<code>2024-5-6</code></p><ul><li>ubuntu20.04对应的是 focal</li><li>ubuntu18.04对应的是 bionic</li><li>ubuntu19.10对应的是 eoan</li><li>ubuntu19.04 disco</li><li>ubuntu16.04 xenial</li><li>Ubuntu 14.04 LTS Trusty</li></ul><p>查看版本：<code>lsb_release -c</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">阿里源 focal ubuntu20.04</span><br>deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br> <br>deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse<br> <br>deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br> <br>deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">清华源 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">预发布软件源，不建议启用</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">华为源地址</span><br><br>deb https://repo.huaweicloud.com/ubuntu/ focal main restricted<br>deb https://repo.huaweicloud.com/ubuntu/ focal-updates main restricted<br>deb https://repo.huaweicloud.com/ubuntu/ focal universe<br>deb https://repo.huaweicloud.com/ubuntu/ focal-updates universe<br>deb https://repo.huaweicloud.com/ubuntu/ focal-backports main restricted universe<br>deb https://repo.huaweicloud.com/ubuntu/ focal-security main restricted<br>deb https://repo.huaweicloud.com/ubuntu/ focal-security universe<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">阿里源地址 bionic ubuntu18.04</span><br>deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">中科大源地址</span><br><br>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">163源地址</span><br><br>deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">清华源地址</span><br><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe ultiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe ultiverse<br></code></pre></td></tr></table></figure><h2 id="软件开发环境"><a href="#软件开发环境" class="headerlink" title="软件开发环境"></a>软件开发环境</h2><p>主要是互联网行业技术栈，其他行业不熟悉，仅供参考</p><ul><li>通用工具<ul><li>版本管理<ul><li>git</li><li>github gitlab gitee</li></ul></li><li>容器<ul><li>docker</li><li>cri</li></ul></li><li>系统管理<ul><li>宝塔</li><li>mobaxterm</li><li>jumpserver</li></ul></li><li>web服务器<ul><li>Nginx</li><li>apache</li><li>tomcat</li></ul></li></ul></li><li>前端开发工具<ul><li>vsc</li><li>nvm</li><li>nodejs</li><li>npm</li><li>nrm</li><li>yarn</li><li>webstrom</li><li>hbuilderx</li><li>各种小程序开发工具</li></ul></li><li>后端开发工具<ul><li>Java开发<ul><li>jdk</li><li>idea</li><li>maven</li><li>gradle</li></ul></li><li>python开发<ul><li>python3</li><li>pycharm</li></ul></li><li>golang开发<ul><li>go</li><li>GoLand</li></ul></li><li>其他语言<ul><li>php node .net</li><li>jb和各自的生态都有提供ide</li></ul></li></ul></li><li>数据库开发工具<ul><li>数据库管理<ul><li>navicat</li><li>data grip</li></ul></li><li>数据库建模<ul><li>power designer</li><li>ea</li></ul></li></ul></li><li>设计开发工具<ul><li>原型<ul><li>axure</li><li>墨刀</li><li>figma</li></ul></li><li>原型托管<ul><li>蓝湖</li></ul></li><li>原型标注<ul><li>Px Cook</li></ul></li></ul></li><li>辅助工具<ul><li>浏览工具<ul><li>chrome</li><li>百分浏览器</li><li>quick look</li></ul></li><li>接口调试工具<ul><li>postman</li><li>apifox</li></ul></li><li>文本工具<ul><li>typora</li><li>云端笔记工具</li><li>typst</li><li>obsidian</li><li>notepad++</li><li>notion</li><li>天若OCR</li><li>wps&#x2F;office365</li></ul></li></ul></li><li>其他工具<ul><li>clover</li><li>everything</li><li>snipaste</li><li>bandicam</li><li>potplayer</li><li>bandzip</li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>Linux</tag>
      
      <tag>后端开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第十九章-论文写作专题</title>
    <link href="/2024/04/18/system_analyst19/"/>
    <url>/2024/04/18/system_analyst19/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·论文写作专题考试大纲分析</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>摘要300字+项目背景介绍400字+论文总结400-600字&#x3D;确保提前准备1200字。</p><ul><li>摘要 300</li><li>项目背景 400</li><li>相关问题回应 300</li><li>主体内容 1000-1500</li><li>论文结论 400</li></ul><h3 id="高概率考点"><a href="#高概率考点" class="headerlink" title="高概率考点"></a>高概率考点</h3><ul><li>信息系统工程<ul><li>系统计划和分析</li><li>需求工程</li><li>系统测试</li><li>系统维护</li><li>项目管理</li><li>质量保证</li><li>面向对象技术</li><li>计算机辅助软件工程</li><li>软件过程改进实践</li><li>实时系统的开发</li><li>应用系统分析与设计(嵌入式系统、数据仓库、互联网应用等)</li><li>软件产品线分析与设计</li></ul></li><li>数据库及应用</li><li>网络规划与应用</li><li>系统安全</li><li>新技术应用应用</li><li>系统集成</li><li>企业信息系统<ul><li>电子商务和电子政务</li><li>事务处理系统</li><li>决策支持系统</li></ul></li><li>企业信息化的组织和实施</li></ul><h3 id="历年真题"><a href="#历年真题" class="headerlink" title="历年真题"></a>历年真题</h3><p>不难总结出，关于<code>信息系统工程</code>考的最多。</p><ul><li>2018<ul><li>论信息系统开发方法论</li><li>论软件构件管理及其应用</li><li>论软件系统需求获取技术及应用</li><li>论数据挖掘方法及应用</li></ul></li><li>2017<ul><li>论需求分析方法及应用</li><li>论企业应用集成</li><li>论数据流图在系统分析与设计中的应用</li><li>论软件的系统测试及其应用</li></ul></li><li>2016<ul><li>论软件需求验证方法及应用</li><li>论软件的系统测试及其应用</li><li>论软件开发模型及应用</li><li>论信息系统规划及实践</li></ul></li><li>2015<ul><li>论项目风险管理及其应用</li><li>论软件系统测试及其应用</li><li>论软件系统的容灾与恢复</li><li>论非关系型数据库技术及应用</li></ul></li><li>2014<ul><li>论信息系统开发方法及应用</li><li>论业务流程建模方法及应用</li><li>论数据库集群技术及应用</li><li>论企业信息集成技术及应用</li></ul></li><li>2013<ul><li>论面向对象建模方法的应用</li><li>论软件企业的软件过程改进</li><li>论企业业务流程优化</li><li>论信息系统的可靠性分析与设计</li></ul></li><li>2012<ul><li>论软件需求管理及其应用</li><li>论敏捷开发在企业软件开发中的应用</li><li>论信息化建设中的企业知识管理</li><li>论大数据处理技术及其应用</li></ul></li></ul><h3 id="写作原则"><a href="#写作原则" class="headerlink" title="写作原则"></a>写作原则</h3><ul><li>不要猜题，要复用构件(摘要+项目背景+结尾)，不要整复用。</li><li>不要抄范文，只能改范文，可以选择适合自己的范文进行修改，改成自己的论文。</li><li>练习时写文章前，提前准备好自己要写的项目，必须是近三年内的中大型商业项目。</li><li>做好准备工作，练习论文主题时发现有不会的知识点，一定要全部背会。</li><li>要勇于迈出第一步，万事开头难，写完第一篇，就不难了，第一篇论文不限时间。</li><li>写正文时，不要生硬的回答问题，要根据问题要点组合成一篇通顺的文章。</li><li>字数一般在300+2500左右，写到最后一页一半，字迹一定要完整，一笔一划。</li><li>从系统分析师的角度看项目，技术细节要少且精，书本理论要与实际的项目联系起来。</li><li>不要全局都列举一二三到123，可以局部段落列举123，论点分开论述，没必要都写编号。</li><li>论述要求:不能口语化、文档段落不宜太长。换个角度看论文，以论文写作技巧视频为依据，对自己的论文进行自评。</li></ul><h3 id="评分标准"><a href="#评分标准" class="headerlink" title="评分标准"></a>评分标准</h3><ul><li><p>下述情况的论文，管需要适当扣5分到10分</p></li><li><p>没有写论文摘要、摘要过于简略、或者摘要中没有实质性内容的论文。</p></li><li><p>字迹比较潦草、其中有不少字难以辨认的论文</p></li><li><p>确实属于过分自我吹嘘或自我标榜、夸大其词的论文</p></li><li><p>内容有明显错误漏洞的，按同一类错误每一类扣一次分</p></li><li><p>内容仅属于大学生或研究生实习性质的项目、并且其实际应用水平相对较低的论文</p></li><li><p>下述情况，可考虑适当加分(可考虑加5分到10分)</p></li><li><p>有独特的见解或者有着很深入的体会、相对非常突出的论文</p></li><li><p>起点很高，确实符合当今信息系统发展的新趋势与新动向，并能加以应用的论文</p></li><li><p>内容详实、体会中肯、思路清晰、非常切合实际的很优秀的论文</p></li><li><p>项目难度很高，或者项目完成的质量优异，或者项目涉及国家重大信息系统工程且作者人参加并发挥重要作用、并且能正确按照试题要求论述的论文，</p></li></ul><p>下述情况之一的论文，不能给予及格分数:</p><ul><li>虚构情节、文章中有较严重的不真实的或者不可信的内容出现的论文</li><li>没有项目开发的实际经验、通篇都是浅层次纯理论的论文</li><li>所讨论的内容与方法过于陈旧、或者项目的水准非常低下的论文</li><li>内容不切题意，或者内容相对很空洞、基本上是泛泛而谈且没有较深入体会的论文</li><li>正文与摘要的篇幅过于短小的论文(如正文少于1200字)</li><li>文理很不通顺、错别字很多、条理与思路不清晰、字迹过于潦草等情况相对严重的论文</li></ul><h3 id="推荐项目"><a href="#推荐项目" class="headerlink" title="推荐项目"></a>推荐项目</h3><ul><li>选择中大型商业项目，一般金额在200W以上，研发周期在十个月以上的项目。</li><li>推荐项目<ul><li>政府或大型信息系统项目:各国企、事业单位、军方、医院、银行、股份公司大企业的ERP、OA等;云计算、大数据等各种软件及信息系统。</li></ul></li><li>不能选项目<ul><li>小型企业项目:如进销存系统、图书管理系统、单机版系统。</li><li>尚未完成的项目:一定要已经完成并上线运行，并最好在三年内。</li><li>纯建网站项目:如建设企业或政府门户网站，只有静态网页链接介绍，没有后台大型应用w.</li><li>硬件项目:如综合布线、安防、视频会议等</li><li>纯技术项目:如数据升级迁移、内部技术研究等</li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第十八章-未来信息综合技术</title>
    <link href="/2024/04/18/system_analyst18/"/>
    <url>/2024/04/18/system_analyst18/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·未来信息综合技术</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="未来信息综合技术"><a href="#未来信息综合技术" class="headerlink" title="未来信息综合技术"></a>未来信息综合技术</h2><h3 id="信息物理系统"><a href="#信息物理系统" class="headerlink" title="信息物理系统"></a>信息物理系统</h3><p>信息物理系统(CPS)是控制系统、嵌入式系统的扩展与延伸，其涉及的相关底层理论技术源于对嵌入式技术的应用与提升。</p><p>CPS通过集成先进的感知、计算、通信、控制等信息技术和自动控制技术，构建了物理空间与信息空间中人、机、物、环境、信息等要素相互映射、适时交互、高效协同的复杂系统，实现系统内快速迭代、动态优化。</p><p>资源配置和运行的按需响应、CPS的本质就是构建一套信息空间与物理空间之间基于数据自动流动的状态感知、实时分析、科学决策、精准执行的闭环赋能体系，解决生产制造、应用服务过程中的复杂性和不确定性问题，提高资源配置效率，实现资源优化。</p><p>CPS 的体系架构</p><ul><li>(1)单元级CPS。是具有不可分割性的CPS最小单元，是具备可感知、可计算、可交豆、可延展、自决策功能的CPS最小单元，一个智能部件、一个工业机器人或一个智能机床都可能是一个CPS<br>最小单元。</li><li>(2)系统级CPS。多个最小单元(单元级)通过工业网络(如工业现场总线、工业以太网等)<br>，实现更大范围、更宽领域的数据自动流动，实现了多个单元级CPS的互联、互通和互操作，进一步提高制造资源优化配置的广度、深度和精度。包含互联互通、即插即用、边缘网关、数据互操作、协同控制、监视与诊断等功能。其中互连互通、边缘网关和数据互操作主要实现单元级CPS的异构集成;即插即用主要在系统级CPS实现组件管理，包括组(<br>单元级CPS)的识别，配置，更新和删除等功能:协同控制是指对多个单元级CPS的联动和协同控制等;监视与诊断主要是对单元级CPS的状态实时监控和诊断其是否具备应有的能力。</li><li>(3)Sos级。多个系统级CPS的有机组合构成Sos级CPS。例如，多个工序(系统的CPS)形成个车间级的CPS<br>或者形成整个工厂的CPS。主要实现数据的汇聚，从而对内进行资产的优化和对外形成运营优化服务。其主要功能包括:<br>数据存储、数据融合、分布式计算、大数据分析、数据服务，并在数据服务的基础上形成了资产性能管理和运营优化服务。</li></ul><p>CPS 的技术体系</p><ul><li>CPS 技术体系主要分为CPS 总体技术、CPS 支撑技术、CPS 核心技术。</li><li>CPS 总体技术主要包括系统架构、异构系统集成、安全技术、试验验证技术等，是CPS的顶层设计技术;</li><li>CPS 支撑技术主要包括智能感知、嵌入式软件、数据库、人机交豆、中间件、SDN(软件定义网络)、物联网、大数据等，是基于CPS 应用的支撑;</li><li>CPS 核心技术主要包括虚实融合控制智能装备、MBD,数字孪生技术、:现场总线、工业以太网、CAX\MES\ERP\PLM\CRM\SCM 等是CPS 的基础技术</li></ul><p>上述技术体系可以分为四大核心技术要素即“一硬”(感知和自动控制)”一软”(工业软”-双”(工业网络)一平台)(工业云和智能服务平台)<br>。其中感知和自动控制是件)CPS实现的硬件支撑;工业软件固化了CPS 计算和数据流程的规则，是CPS<br>的核心;工业网络是互联互通和数据传输的网络载体;工业云和智能服务平台是CPS 数据汇聚和支撑上层解决方案的基础，对外提供资源管控和能力服务。</p><p>CPS的典型应用场景:</p><ul><li>(1)智能设计。在产品及工艺设计、工厂设计过程中的大部分工作都可以在虚拟空间中进行仿真，并实现迭代和改进。包括产品及工艺设计、生产线&#x2F;工厂设计。</li><li>(2)智能生产。CPS 可以打破生产过程的信息孤岛现象，实现设备的互联互通，实现生产过程监控，合理管理和调度各种生产资源，优化生产计划，达到资源和制造协同，实现“制造”到“智造”的升级。包块设备管理、生产管理、柔性制造。</li><li>(3)智能服务。通过CPS<br>按照需要形成本地与远程云服务相互协作、个体与群体、群体与系统的相互协同一体化工业云服务体系，能够更好地服务于生产，解决装备运行日益复杂、使用难度日益增大的困扰，实现智能装备的协同优化，支持企业用户经济性、安全性和高效性经营目标落地包括健康管理、智能维护、远程征兆性诊断、协同优化、共享服务。</li><li>(4)智能应用。将设计者、生产者和使用者的单调角色转变为新价值创造的参与者，并通过新型价值链的创建反馈到产业链的转型，从根本上调动各个参与者的积极性，实现制造业转型。包括无人装备、产业链互动、价值链共赢。</li></ul><p>CPS建设路径:CPS体系设计、单元级CPS建设、系统级CPS建设和SoS级CPS 建设阶段。</p><h3 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h3><p>人工智能(AI)是利用数字计算机或者数字计算机控制的机器模拟、延伸和扩展人的智能，感知环境、获取知识并使用知识获得最佳结果的理论、方法、技术及应用系统。</p><p>人工智能的目标是了解智能的实质，并生产出一种新的能以人类智能相似的方式做出反应的智能机器。该领域的研究包括机器人、自然语言处理、计算机视觉和专家系统等。</p><p>根据人工智能是否能真正实现推理、思考和解决问题，可以将人工智能分为弱人工智能和强人工智能。</p><p>人工智能关键技术</p><ul><li>1.自然语言处理(NLP)。研究实现人与计算机之间用自然语言进行有效通信的各种理论和方法主要包括机器翻译(<br>从一种自然语言到另外一种自然语言的翻译)、语义理解(利用计算机理解文本篇章内容，并回答相关问题)和问答系统(<br>让计算机像人类一样用自然语言与人交流)等。</li><li>2.计算机视觉。是使用计算机模仿人类视觉系统的科学，让计算机拥有类似人类提取、处理、理解和分析图像以及图像序列的能力，将图像分析任务分解为便于管理的小块任务。</li><li>3.知识图谱。就是把所有不同种类的信息连接在一起而得到的一个关系网络，提供了从“关系”的角度去分析问题的能力。一般用于反欺诈、不一致性验证等问题。</li><li>4.人机交互(HCI)。主要研究人和计算机之间的信息交换。</li><li>5.虚拟现实或增强现实(VR&#x2F;AR)。以计算机为核心的新型视听技术,结合相关科学技术，在一定范围内生成与真实环境在视觉、听觉等方面高度近似的数字化环境</li><li>6.机器学习(ML)。是以数据为基础，通过研究样本数据寻找规律，并根据所得规律对未来数据进行预测。目前，机器学习广泛应用于数据挖掘、计算机视觉、自然语言处理、生物特征识别等领域</li></ul><p>按照学习模式的不同，机器学习可分为监督学习、无监督学习、半监督学习、强化学习。其中监督学习需要提供标注的样本集，无监督学习不需要提供标注的样本集，半监督学习需要提供少量标注的样本，而强化学习需要反馈机制。</p><p>监督学习是利用己标记的有限训练数据集，通过某种学习策略&#x2F;方法建立一个模型，从而实现对新数据&#x2F;实例的标记(分类)<br>&#x2F;映射。在自然语言处理、信息检索、文本挖掘、于写体辨识、垃圾邮件侦测等领域获得了广泛应用。</p><p>无监督学习是利用无标记的有限数据描述隐藏在未标记数据中的结构&#x2F;规律。无监督学习不需要以人工标注数据作为训练样本，这样不仅便于压缩数据存储、减少计算量、提升算法速度，还可以避免正负样本偏移引起的分类错误问题。无监督学习主要用于经济预测、异常检测、数据挖掘、图像处理、模式识别等领域。</p><p>半监督学习可以利用少量的标注样本和大量的未标识样本进行训练和分类，从而达到减少标注代价、提高学习能力的目的。半监督学习的算法首先试图对未标识数据进行建模，在此基础上再对标识的数据进行预测。例如，图论推理算法或者拉普拉斯支持向量机等。</p><p>强化学习可以学习从环境状态到行为的映射，使得智能体选择的行为能够获得环境的最大奖赏最终目标是使外部环境对学习系统在某种意义下的评价最佳。在机器人控制、无人驾驶、工业控制等领域获得成功应用。</p><p>按照学习方法的不同，机器学习可分为传统机器学习和深度学习。区别在于，传统机器学习的领域特征需要手动完成，且需要大量领域专业知识;深度学习不需要人工特征提取，但需要大量的训练数据集以及强大的GPU服务器来提供算力。</p><p>传统机器学习从一些观测(训练)样本出发，试图发现不能通过原理分析获得的规律，实现对未来数据行为或趋势的准确预测。在自然语言处理、语音识别、图像识别、信息检索等许多计算机领域获得了广泛应用。</p><p>深度学习是一种基于多层神经网络并以海量数据作为输入规则的自学习方法，依靠提供给它的大量实际行为数据(训练数据集)<br>，进行参数和规则调整。深度学习更注重特征学习的重要性。</p><p>机器学习的常见算法还包括迁移学习、主动学习和演化学习迁移学习是指当在某些领域无法取得足够多的数据进行模型训练时，利用另一领域数据获得的关系进行的学习。主要在变量有限的小规模应用中使用，如基于传感器网络的定位、文字分类和图像分类等。</p><p>主动学习通过一定的算法查询最有用的未标记样本，并交由专家进行标记，然后用查询到的样本训练分类模型来提高模型的精度。</p><p>演化学习基于演化算法提供的优化工具设计机器学习算法，针对机器学习任务中存在大量的复杂优化问题，应用于分类、聚类、规则发现、特征选择等机器学习与数据挖掘问题中。算法通常维护一个解的集合，并通过启发式算子来从现有的解产生新解，并通过挑选更好的解进入下一次循环，不断提高解的质量。</p><p>人工智能目前典型应用:chatgpt</p><h3 id="机器人"><a href="#机器人" class="headerlink" title="机器人"></a>机器人</h3><p>机器人技术已经准备进入4.0时代。所谓机器人4.0时代，就是把云端大脑分布在各个地方，充分利用边缘计算的优势，提供高性价比的服务，把要完成任务的记忆场景的知识和常识很好地组合起来，实现规模化部署。特别强调机器人除了具有感知能力实现智能协作，还应该具有一定的理解和决策能力，进行更加自主的服务。</p><p>我们目前的服务机器人大多可以做到物体识别和人脸识别。在机器人4.0时代，我们需要加上更强的自适应能力。</p><p>机器人4.0的核心技术</p><ul><li>云-边-端的无缝协同计算。云-边-端一体的机器人系统是面向大规模机器人的服务平台，信息处理和生成<br>主要在（云-边-端）上分布处理完成.通常情况下，云侧可以提供高性能的计算和知识存储，边缘侧用来进一步处理数据并实现协同和共享。机器人端只用完成实时操作的功能。</li><li>持续学习与协同学习。希望机器人可以通过少量数据来建立基本的识别能力，然后可以自主地去找到更多的相关数据并进行自动标注。然后用这些自主得到的数据来对自己已有的模型进行重新训练来提高性能。</li><li>知识图谱。需要更加动态和个性化的知识;需要和机器人的感知与决策能力相结合</li><li>场景自适应。主动观察场景内人和物之间的变化，预测可能发生的事件，从而影响之后的行动模式。这个技术的关键问题在于场景预测能力。就是机器人通过合相关的知识和模型进行分析，并预测之后事件即将发生的时间，改变自己的行为模式。</li><li>数据安全。既要保证端到端的安全传输，也要保障服务器端的安全存储。</li></ul><p>如果按照要求的控制方式分类，机器人可分为操作机器人、程序机器人、示教再现机器人、智能机器人和综合机器人。</p><ul><li>操作机器人。典型代表是在核电站处理放射性物质时远距离进行操作的机器人。</li><li>程序机器人。可以按预先给定的程序、条件、位置进行作业。</li><li>示教再现机器人。机器人可以将所教的操作过程自动地记录在磁盘、磁带等存储器中，再现操作时，可重复所教过的动作过程。示教方法有直接示教与遥控示教两种。</li><li>智能机器人。既可以进行预先设定的动作，还可以按照工作环境的改变而变换动作。</li><li>综合机器人。由操纵机器人、示教再现机器人、智能机器人组合而成的机器人，如火星机器人。整个系统可以看作是由地面指令操纵的操作机器人。</li></ul><p>如果按照应用行业来分，机器人可分为工业机器人、服务机器人和特殊领域机器人。</p><h3 id="边缘计算"><a href="#边缘计算" class="headerlink" title="边缘计算"></a>边缘计算</h3><p>边缘计算将数据的处理、应用程序的运行甚至一些功能服务的实现，由网络中心下放到网络达缘的节点上。在网络边缘侧的智能网关上就近采集并且处理数据，不需要将大量未处理的原生数据上传到远处的大数据平台。</p><p>采用边缘计算的方式，海量数据能够就近处理，大量的设备也能实现高效协同的工作，诸多问题迎刃而解。因此，边缘计算理论上可满足许多行业在敏捷性、实时性、数据优化、应用智能，以及安全与隐私保护等方面的关键需求。</p><p>边缘计算的业务本质是云计算在数据中心之外汇聚节点的延伸和演进，主要包括云边缘、边缘云和云化网关三类落地形态;以“边云协同”和“边缘智能”为核心能力发展方向;软件平台需要考虑导入云理念、云架构、云技术，提供端到端实时、协同式智能、可信赖、可动态重置等能力;硬件平台需要考虑异构计算能力。</p><p>边缘计算的业务本质是云计算在数据中心之外汇聚节点的延伸和演进，主要包括云边缘、边缘云和云化网关三类落地形态;以“边云协同”和“边缘智能”为核心能力发展方向;软件平台需要考虑导入云理念、云架构、云技术，提供端到端实时、协同式智能、可信赖、可动态重置等能力;硬件平台需要考虑异构计算能力。</p><ul><li>(1)云边缘:是云服务在边缘侧的延伸，逻辑上仍是云服务，主要的能力提供依赖于云服务或需要与云服务紧密协同。</li><li>(2)边缘云:是在边缘侧构建中小规模云服务能力，边缘服务能力主要由边缘云提供。</li><li>(3)云化网关:以云化技术与能力重构原有嵌入式网关系统，云化网关在边缘侧提供协议&#x2F;接边缘计算等能力，部署在云侧的控制器提供边缘节点的资源调度、应用管理与业务编排口转换、是等能力。</li></ul><p>边缘计算具有以下特点:</p><ul><li>(1)联接性:联接性是边缘计算的基础。所联接物理对象的多样性及应用场景的多样性，需要边缘计算具备丰富的联接功能。</li><li>(2)数据第一入口:边缘计算作为物理世界到数字世界的桥梁，是数据的第一入口，拥有大量、实时、完整的数据，可基于数据全生命周期进行管理与价值创造，，将更好的支撑预测性维护、资产效率与管理等创新应用。</li><li>(3)约束性:边缘计算产品需适配工业现场相对恶劣的工作条件与运行环境，如防电磁、防尘防爆、抗振动、抗电流&#x2F;电压波动等。在工业互联场景下，对边缘计算设备的功耗、成本、空间也有较高的要求。</li><li>(4)分布性:边缘计算实际部署天然具备分布式特征。这要求边缘计算支持分布式计算与存储。实现分布式资源的动态调度与统一管理、支撑分布式智能、具备分布式安全等能力。</li></ul><p>边云协同:<br>边缘计算与云计算各有所长，云计算擅长全局性、非实时、长周期的大数据处理与分析，能够在长周期维护、业务决策支撑等领域发挥优势:</p><p>边缘计算更适用局部性、实时、短周期数据的处理与分析，能更好地支撑本地业务的实时智能化决策与执行。边缘计算既靠近执行单元，更是云端所需高价值数据的采集和初步处理单元，可以更好地支撑云端应用；反之，云计算通过大数据分析优化输出的业务规则或模型可以下发到边缘侧，边缘计算基于新的业务规则或模型运行。·主要包括六种协同:</p><ul><li>资源协同:边缘节点提供计算、存储、网络、虚拟化等基础设施资源、具有本地资源调度(1)管理能力，同时可与云端协同，接受并执行云端资源调度管理策略，包括边缘节点的设备管理、<br>资源管理以及网络连接管理。</li><li>数据协同:<br>边缘节点主要负责现场&#x2F;终端数据的采集，按照规则或数据模型对数据进行初步处理与分析，并将处理结果以及相关数据上传给云端:<br>云端提供海量数据的存储、分析与价值挖掘。</li><li>智能协同:边缘节点按照A1模型执行推理，实现分布式智能;云端开展A1 的集中式模型训练，并将模型下发边缘节点。</li><li>应用管理协同:边缘节点提供应用部署与运行环境，并对本节点多个应用的生命周期进行管理调度:云端主要提供应用开发、测试环境，以及应用的生命周期管理能力。</li><li>业务管理协同:边缘节点提供模块化、微服务化的应用&#x2F;数字孪生&#x2F;网络等应用实例:云端主要提供按照客户需求实现应用&#x2F;数字孪生&#x2F;网络等的业务编排能力。</li><li>服务协同:边缘节点按照云端策略实现部分ECSaaS 服务，通过ECSaas 与云端Saas的协同实现面向客户的按需Saas 服务:云端主要提供saas<br>服务在云端和边缘节点的服务分布策略，以及云端承担的Saas 服务能力。</li></ul><p>边缘计算的应用场合:智慧园区、安卓云与云游戏、视频监控、工业互联网、Cloud VR。</p><h3 id="数字孪生"><a href="#数字孪生" class="headerlink" title="数字孪生"></a>数字孪生</h3><p>数字孪生体技术是跨层级、跨尺度的现实世界和虚拟世界建立沟通的桥梁数字孪生体是现有或将有的物理实体对象的数字模型，通过实测、仿真和数据分析来实时感知、诊断、预物理实体对象的状态，通过优化和指令来调控物理实体对象的行为，通过相关数字模型间的相互学习来进化自身，同时改进利益相关方在物理实体对象生命周期内的决策。<br>关键技术</p><ul><li>建模。建模的目的是将我们对物理世界的理解进行简化和模型化。而数字孪生体的目的或本质是通过数字化和模型化，用信息换能量，以使少的能量消除各种物理实体、特别是复杂系统的不确定性。<br>需求指标、生存期阶段和空间尺度构成了数字孪生体建模技术体系的三维空间。</li><li>仿真。如果说建模是模型化我们对物理世界或问题的理解，那么仿真就是验证和确认这种理解的正确性和有效性。<br>所以，数字化模型的仿真技术是创建和运行数字孪生体、保证数字孪生体与对应物理实体实现有效闭环的核心技术。仿真是将包含了确定性规律和完整机理的模型转化成软件的方式来模拟物理世界的一种技术。只要模型正确，并拥有了完整的输入信息和环境数据，就可以基本准确地反映物理世界的特性和参数。</li><li>其他技术。VR、AR 以及MR 等增强现实技术、数字线程、系统工程和MBSE、物联网、云计算、雾计算、边缘计算、大数据技术、机器学习和区块链技术。</li></ul><p>数字孪生体主要应用于制造、产业、城市和战场。</p><h3 id="云计算和大数据"><a href="#云计算和大数据" class="headerlink" title="云计算和大数据"></a>云计算和大数据</h3><p>云计算概念的内涵包含两个方面:平台和应用。平台即基础设施，其地位相当于PC上的操作系统，云计算应用程序需要构建在平台之上;云计算应用所需的计算与存储通常在“云端”完成，客户端需要通过互联网访问计算与存储能力。</p><p>云计算的服务方式</p><p>软件即服务(saas)。在Saas<br>的服务模式下，服务提供商将应用软件统一部署在云计算平台上客户根据需要通过互联网向服务提供商订购应用软件服务，服务提供商根据客户所订购软件的数时间的长短等因素收费，并且通过标准浏览器向客户提供应用服务。量、</p><p>平台即服务(Paas)。在Paas 模式下，服务提供商将分布式开发环境与平台作为一种服务来提2)<br>供。这是一种分布式平台服务，厂商提供开发环境、服务器平台、硬件资源等服务给客户，客户在服务提供商平台的基础上定制开发自己的应用程序，并通过其服务器和互联网传递给其他客户</p><p>基础设施即服务(Iaas)<br>在Iaas<br>模式下，服务提供商将多台服务器组成的“云端”基础设施作为计量服务提供给客户。具体来说，服务提供商将内存、&#x2F;0设备、存储和计算能力等整合为-个虚拟的资源池，，为客户提供所需要的存储资源、虚拟化服务器等服务。</p><ul><li><p>在灵活性方面Saas &gt; Paas &gt; laas 灵活性依次增强。</p></li><li><p>在方便性方面，laas &gt; Paas &gt;Saas 方便性依次增强。</p></li></ul><p>云计算的部署模式云基础设施是公开的，可以自由地分配给公众。企业、学术界与</p><ul><li>公有云。在公有云模式下，政府机构都可以拥有和管理公用云，并实现对公有云的操作。公有云能够以低廉的价格为最终用户提供有吸引力的服务，创造新的业务价值。在社区云模式下，云基础设施分配给一这些组织共同关注任务</li><li>社区云。-些社区组织所专有，:安全需求、政策等信息。云基础设施被社区内的一个或多个组织所拥有、管理及操作。“社区云是“公有云”范畴内的一个组成部分。</li><li>私有云。在私有云模式下，云基础服务设施分配给由多种用户组成的单个组织。它可以被这个组织或其他第三方组织所拥有、管理及操作。</li><li>混合云。混合云是公有云，私有云和社区云的组合。由于安全和控制原因，并非所有的企业信息都能放置在公有云上，因此企业将会使用混合云模式。</li></ul><p>大数据是指其大小或复杂性无法通过现有常用的软件工具，以合理的成本并在可接受的时限内对其进行捕获、管理和处理的数据集。这些困难包括数据的收入、存储、搜索、共享、分析和可视化。</p><p>大数据的特点:大规模、高速度、多样化、可变性、复杂性等</p><p>大数据分析的分析步骤，大致分为数据获取&#x2F;记录、信息抽取&#x2F;清洗&#x2F;注记、数据集成&#x2F;聚集&#x2F;表现、数据分析&#x2F;建模和数据解释5个主要阶段。</p><p>大数据的应用领域:制造业、服务业、交通行业、医疗行业。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第十七章-嵌入式技术</title>
    <link href="/2024/04/16/system_analyst17/"/>
    <url>/2024/04/16/system_analyst17/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·嵌入式技术</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>不是很重要，注意选择题就行了。大题不建议选做这个。</p><p>原本第十八章是关于企业经济、管理和数学相关的知识，不做整理了，也不是很难。</p><p>略过一章。</p><h3 id="嵌入式微处理器"><a href="#嵌入式微处理器" class="headerlink" title="嵌入式微处理器"></a>嵌入式微处理器</h3><h4 id="嵌入式微处理器体系结构"><a href="#嵌入式微处理器体系结构" class="headerlink" title="嵌入式微处理器体系结构"></a>嵌入式微处理器体系结构</h4><p><strong>冯诺依曼结构</strong>传统计算机采用冯·诺依曼(Von Neumann)结构，也称普林斯顿结构是一种将程序指令存储器和数据存储器合并在一起的存储器结构。</p><p>冯·诺依曼结构的计算机程序和数据共用一个存储空间，程序指令存储地址和数据存储地址指向同一个存储器的不同物理位置。</p><p>采用单一的地址及数据总线，程序指令和数据的宽度相同处理器执行指令时，先从储存器中取出指令解码，再取操作数执行运算，即使单条指令也要耗费儿个甚至几十个周期，在高速运算时，在传输通道上会出现瓶颈效应。</p><p><strong>哈佛结构</strong>是一种并行体系结构，它的主要特点是将程序和数据存储在不同的存储空间中，即程序存储器和数据存储器是两个相互独立的存储器每个存储器独立编址、独立访问。</p><p>与两个存储器相对应的是系统中的两套独立的地址总线和数据总线。这种分离的程序总线和数据总线可允许在一个机器周期内同时获取指令字(<br>来自程序存储器)和操作数(来自数据存储器)，从而提高了执行速度，使数据的吞吐率提高了1倍。</p><h4 id="微处理器分类"><a href="#微处理器分类" class="headerlink" title="微处理器分类"></a>微处理器分类</h4><p>根据嵌入式微处理器的字长宽度，可分为4位、8位、16 位、32 位和64 位。般把16 位及以下的称为嵌入式微控制器(Embedded Micro<br>Controller)，32 位及以上的称为嵌入式微处理器。</p><p>如果按系统集成度划分，可分为两类:一种是微处理器内部仅包含单纯的中央处理器单元，称为一般用途型微处理器:另一种则是将CPU、ROM、RAM<br>及I&#x2F;0 等部件集成到同一个芯片上，称为单芯片微控制器(singlechipMicrocontroller)</p><p>如果根据用途分类一般分为嵌入式微控制器MCU、嵌入式微处理器MPU、嵌入式数字信号处理器DSP、嵌入式片上系统SOC等。</p><p>嵌入式微控制器MCU的典型代表是单片机，其片上外设资源比较丰富，适合于控制。MCU芯片内部集成ROM&#x2F;EPROM、RAM、总线、总线逻辑、定时&#x2F;计数器、看门狗、1&#x2F;0、串行口、脉宽调制输出、A&#x2F;D、D&#x2F;A、FIash<br>RAM、EEPROM等各种必要功能和外设。和嵌入式微处理器相比，微控制器的最大特点是单片化体积大大减小，从而使功耗和成本下降、可靠性提高，其片上外设资源一般较丰富，适合于控制，是嵌入式系统工业的主流。</p><p>嵌入式微处理器MPU由通用计算机中的CPU演变而来。它的特征是具有32位以上的处理器，具有较高的性能，当然其价格也相应较高。但与计算机处理器不同的是，在实际嵌入式应用中，只保留和嵌入式应用紧密相关的功能硬件去除其他的冗余功能部分，这样就以最低的功耗和资源实现嵌入式应用的特殊要求。与工业控制计算机相比，嵌入式微处理器具有体积小、重量轻、成本低可靠性高的优点。目前常见的有ARM、MIPS、POWER<br>PC等，</p><p>嵌入式数字信号处理器DSP是专门用于信号处理方面的处理器，其在系统结构和指令算法方面进行了特殊设计，具有很高的编译效率和指令的执行速度采用哈佛结构，流水线处理，其处理速度比最快的CPU还快10-50倍。在数字滤波、FFT、谱分析等各种仪器上DSP获得了大规模的应用。</p><p>嵌入式片上系统S0C，是追求产品系统最大包容的集成器件。Soc最大的特点是成功实现了软硬件无缝结合，直接在处理器片内嵌入操作系统的代码模块是一个有专用目标的集成电路，其中包含完整系统并有嵌入软件的全部内容。</p><h4 id="多核处理器"><a href="#多核处理器" class="headerlink" title="多核处理器"></a>多核处理器</h4><p>多核指多个微处理器内核是将两个或更多的微处理器封装在一起，集成在一个电路中。多核处理器是单枚芯片能够直接插入单一的处理器插槽中。多核与多CPU相比很好的降低了计算机系统的功耗和体积。在多核技术中，由操作系统软件进行调度，多进程，多线程并发都可以。</p><p>2个或多个内核工作协调实现方式</p><ul><li>对称多处理技术SMP:将2颗完全一样的处理器封装在一个芯片内，达到双倍或接近双倍的处理性能，节省运算资源。</li><li>非对称处理技术AMP:2个处理内核彼此不同，各自处理和执行特定的功能，在软件的协调下分担不同的计算任务。</li></ul><p>多核CPu的调度</p><ul><li>多核CPU环境下进程的调度算法一般有全局队列调度和局部队列调度两种全局队列调度是指操作系统维护一个全局的任务等待队列，当系统中有一个CPU空闲时操作系统就从全局任务等待队列中选取就绪任务开始执行，CPU核心利用率高。</li><li>局部队列调度是操作系统为每个CPU内核维护一个局部的任务等待队列，当系统中有就从该核心的任务等待队列中选取适当的任务执行，优点是无需-个CPU内核空闲时，在多个CPU之间切换。</li></ul><h3 id="嵌入式软件与操作系统"><a href="#嵌入式软件与操作系统" class="headerlink" title="嵌入式软件与操作系统"></a>嵌入式软件与操作系统</h3><h4 id="嵌入式软件嵌入式系统"><a href="#嵌入式软件嵌入式系统" class="headerlink" title="嵌入式软件嵌入式系统"></a>嵌入式软件嵌入式系统</h4><p>嵌入式软件是指应用在嵌入式计算机系统当中的各种软件，”除了具有通用软件的一般特性，还具有一些与嵌入式系统相关的特点，包括:<br>规模较小、开发难度大、实时性和可靠性要求高、!要求固化存储。</p><p>嵌入式软件分类</p><ul><li>系统软件:控制和管理嵌入式系统资源，为嵌入式应用提供支持的各种软件如设备驱动程序、嵌入式操作系统、嵌入式中间件等。</li><li>应用软件:嵌入式系统中的上层软件，定义了嵌入式设备的主要功能和用途并负责与用户交互，一般面向特定的应用领域，如飞行控制软件、手机软件、地图等。</li><li>支撑软件:辅助软件开发的工具软件，如系统分析设计工具、在线仿真工具交叉编译器等</li></ul><p>板级支持包(BSP)是介于主板硬件和操作系统中驱动层程序之间的一层，般认为它属于操作系统一部分，主要是实现对操作系统的支持，为上层的驱动程序提供访问硬件设备寄存器的函数包，使之能够更好的运行于硬件主板。</p><p>具体功能包括:</p><ul><li>1.单板硬件初始化，主要是CPU的初始化，为整个软件系统提供底层硬件支持</li><li>2.为操作系统提供设备驱动程序和系统中断服务程序</li><li>3.定制操作系统的功能，为软件系统提供一个实时多任务的运行环境</li><li>4.初始化操作系统，为操作系统的正常运行做好准备。</li></ul><p>主要具有以下两个特点。</p><ul><li>①硬件相关性，因为嵌入式实时系统的硬件环境具有应用相关性，而作为上层软件与硬件平台之间的接口，BSP需为操作系统提供操作和控制具体硬件的方法</li><li>②操作系统相关性，不同的操作系统具有各自的软件层次结构，因此不同操作系统具有特定的硬件 接口形式。</li></ul><p>一般来说，BSP主要包括两个方面的内容:引导加载程序BootLoader和设备驱动程序。</p><p>BootLoader是嵌入式系统加电后运行的第一段软件代码，是在操作系统内核运行之前运行的一小段程序，通过这段程序，可以初始化硬件设备、建立内存空间的映射图，从而将系统的软硬件环境设置到一个合适的状态，以便为最终调用操作系统内核做好准备。一般包括以下功能:</p><ul><li>片级初始化:主要完成微处理器的初始化，包括设置微处理器的核心寄存器和控制寄存器、微处理器的核心工作模式及其局部总线模式等。片级初始化把微处理器从上电时的默认状态逐步设置成系统所要求的工作状态。这是一个纯硬件的初始化过程。</li><li>板级初始化:<br>通过正确地设置各种寄存器的内容来完成微处理器以外的其他硬件设备的初始化。例如，初始化LED显示设备、初始化定时器、设置中断控制寄存器、初始化串口通信、初始化内存控制器、建立内存空间的地址映射等。在此过程中，除了要设置各种硬件寄存器以外，还要设置某些软件的数据结构和参数。因此，这是一个同时包含有软件和硬件在内的初始化过程。</li><li>加载内核(系统级初始化):将操作系统和应用程序的映像从Flash存储器复制到系统的内存当中，然后跳转到系统内核的第一条指令处继续执行。</li></ul><p>在一个嵌入式系统当中，操作系统是可能有也可能无的。但无论如何，设备驱动程序是必不可少的。所谓的设备驱动程序，就是一组库函数，用来对硬件进行初始化和管理，并向上层软件提供良好的访问接口。</p><p>对于不同的硬件设备来说，它们的功能是不一样的，所以它们的设备驱动程序也是不一样的。但是一般来说，大多数的设备驱动程序都会具备以下的一些基本功能。</p><ul><li>硬件启动:在开机上电或系统重启的时候，对硬件进行初始化硬件关闭:*将硬件设置为关机状态。硬件停用:暂停使用这个硬件。</li><li>硬件启用:重新启用这个硬件。</li><li>读操作:从硬件中读取数据</li><li>写操作:往硬件中写入数据</li></ul><h4 id="嵌入式实时操作系统"><a href="#嵌入式实时操作系统" class="headerlink" title="嵌入式实时操作系统"></a>嵌入式实时操作系统</h4><p>嵌入式系统的组成嵌入式处理器。</p><ul><li>(1)嵌入式系统的核心部件是各种类型的嵌入式处理器。</li><li>(2)总线。嵌入式系统的总线一般分为片内总线和片外总线。</li><li>(3)存储器。嵌入式系统的存储器主要包括主存和外存。</li><li>(4)I&#x2F;O 设备与接口。嵌入式系统的输入设备因其应用领域的不同，有多种多样，比较常见的有键盘、鼠标、触摸屏、手柄和声控开关等。</li><li>(5)操作系统。嵌入式操作系统由操作系统内核、应用程序接口和设备驱动程序接口等几部分组成，一般采用微内核结构。</li><li>(6)应用支撑软件。应用支撑软件一般由窗口系统、网络系统、数据库管理系统和Java虚拟机等部分组成，但这些部分都不是必须的，不同的嵌入式系统具有不同的应用支撑软件。</li><li>(7)应用软件。应用软件位于嵌入式系统层次结构的最上层，直接与最终用户交互，是系统整体功能的集中体现。</li></ul><p>嵌入式系统的特点</p><ul><li>(1)系统专用性强。嵌入式系统是针对具体应用的专门系统，它的个性化很强软件和硬件结合紧密。一般要针对硬件进行软件的开发和移植，根据硬件的变化和增减对软件进行修改。</li><li>(2)系统实时性强。很多嵌入式系统对外来事件要求在限定的时间内及时做出响应，具有实时性，</li><li>(3)软硬件依赖性强。嵌入式系统的专用性决定了其软硬件的互相依赖性很强两者必须协同设计，以达到共同实现预定功能的目的，并满足性能、成本和可靠性等方面的严格要求。</li><li>(4)处理器专用。嵌入式系统的处理器一般是为某一特定目的和应用而专门设计的。通常具有功耗低、体积小和集成度高等优点。。</li><li>(5)多种技术紧密结合的紧密程度不及嵌入式系统。通用计算机技术也离不开这些技术，但它们相互结合。</li><li>(6)系统透明性。嵌入式系统在形态上与通用计算机系统差异甚大。它的输入设备往往不是常见的鼠标和键盘之类的设备，甚至没有输出装置。</li><li>(7)系统资源受限。嵌入式系统为了达到结构紧凑、高可靠性和低成本的目的其存储容量、I&#x2F;0 设备的数量和处理器的处理能力都比较有限。</li></ul><p>嵌入式数据库系统EDBMS - 感觉不会考，不整理了。</p><p>嵌入式操作系统EOS与通用操作系统相比，EOS 主要有以下特点:</p><ul><li>(1)微型化。EOS的运行平台不是通用计算机，而是嵌入式系统。这类系统般没有大容量的内存，几乎没有外存，因此，EOS必须做得小巧，以占用尽量少的系统资源。</li><li>(2)代码质量高。在大多数嵌入式应用中，存储空间依然是宝贵的资源，这就要求程序代码的质量要高，代码要尽量精简。</li><li>(3)专业化。嵌入式系统的硬件平台多种多样，处理器的更新速度快，每种处理器都是针对不同的应用领域而专门设计的。因此，EOS要有很好适应性和移性，还要支持多种开发平台。</li><li>(4)实时性强。嵌入式系统广泛应用于过程控制、数据采集、通信、多媒体信息处理等要求实时响应的场合，因此，实时性成为EOS的又一特点。</li><li>(5)可裁减和可配置。应用的多样性要求EOS 具有较强的适应能力，能够根据应用的特点和具体要求进行灵活配置和合理裁减，以适应微型化和专业化的要求。</li></ul><p>嵌入式实时系统是一种完全嵌入受控器件内部，为特定应用而设计的专用计算机系统。在嵌入式实时系统中，要求系统在投入运行前即具有确定性和可预测性。</p><ul><li>可预测性是指系统在运行之前，其功能、响应特性和执行结果是可预测的</li><li>确定性是指系统在给定的初始状态和输入条件下，在确定的时间内给出确定的结果。</li></ul><p>实时操作系统(RTOS)的特点当外界事件或数据产生时，能够接受并以足够快的速度予以处理，其处理的结果又能在规定的时间之内来控制生产过程或对处理系统做出快速响应，并控制所有实时任务协调一致运行。</p><p>因而，提供及时响应和高可靠性是其主要特点。</p><p>实时操作系统有硬实时和软实时之分硬实时要求在规定的时间内必须完成操作，这是在操作系统设计时保证的;软实时则只要按照任务的优先级，尽可能快地完成操作即可。</p><p>实时操作系统的特征</p><ul><li>高精度计时系统计时精度是影响实时性的一个重要因素。在实时应用系统中，经常需要精确确定实时地操作某个设备或执行某个任务，或精确的计算一个时间函数。这些不仅依赖于一些硬件提供的时钟精度，也依赖于实时操作系统实现的高精度计时功能。</li><li>多级中断机制-个实时应用系统通常需要处理多种外部信息或事件，但处理的紧迫程度有轻重缓急之分。有的必须立即作出反应，有的则可以延后处理。因此，需要建立多级中断嵌套处理机制，以确保对紧迫程度较高的实时事件进行及时响应和处理。</li><li>实时调度机制实时操作系统不仅要及时响应实时事件中断，同时也要及时调度运行实时任务但是，处理机调度并不能随心所欲的进行，因为涉及到两个进程之间的切换，只能在确保“安全切换”的时间点上进行，实时调度机制包括两个方面，<ul><li>一是在调度策略和算法上保证优先调度实时任务;</li><li>二是建立更多“安全切换”时间点，保证及时调度实时任务。</li></ul></li></ul><h3 id="嵌入式开发"><a href="#嵌入式开发" class="headerlink" title="嵌入式开发"></a>嵌入式开发</h3><h4 id="嵌入式软件设计"><a href="#嵌入式软件设计" class="headerlink" title="嵌入式软件设计"></a>嵌入式软件设计</h4><p>典型的交叉平台开发环境，包含三个高度集成的部分:</p><ul><li>运行在宿主机和目标机上的强有力的交叉开发工具和实用程序</li><li>运行在目标机上的高性能、可裁剪的实时操作系统。</li><li>连接宿主机和目标机的多种通信方式，例如，以太网、USB、串口等。</li></ul><h4 id="软件开发工具"><a href="#软件开发工具" class="headerlink" title="软件开发工具"></a>软件开发工具</h4><p>交叉编译:<br>嵌入式软件开发所采用的编译为交叉编译。所谓交叉编译就是在个平台上生成可以在另一个平台上执行的代码。编译的最主要的工作就在将程序转化成运行该程序的CPU所能识别的机器代码，由于不同的体系结构有不同的指令系统。因此，不同的CPU需要有相应的编译器，而交叉编译就如同翻译一样，把相同的程序代码翻译成不同CPU的对应可执行二进制文件。嵌入式系统的开发需要借助宿主机(<br>通用计算机)来编译出目标机的可执行代码。</p><p>交叉调试:<br>嵌入式软件经过编译和链接后即进入调试阶段，调试是软件开发过程中必不可少的一个环节，嵌入式软件开发过程中的交叉调试与通用软件开发过程中的调试方式有很大的差别。在嵌入式软件开发中，调试时采用的是在宿主机和目标机之间进行的交叉调试周试器仍然运行在宿主机的通用操作系统之上，但被调试的进程却是运行在基于特定硬件平台的嵌入式操作系统中，调试器和被调试进程通过串口或者网络进行通信，调试器可以控制、访问被调试进程，读取被调试进程的当前状态并能够改变被调试进程的运行状态。</p><p>嵌入式软件的开发可以分为几个阶段:编码、交叉编译、交叉调试。</p><p>编辑器:<br>用于编写嵌入式源代码程序，从理论上来说，任何一个文本编辑器都可以用来编写源代码。各种集成开发环境会提供功能强大的编辑器，如VS系列、eclipse、kei、css等。常见的独立编辑器:<br>UE、Source Insight、vim等</p><p>编译器gcc:编译阶段的工作是用交叉编译工具处理源代码，生成可执行的目标文件，在嵌入式系统中，由于宿主机和目标机系统不一样，需要使用交叉编译，GNU<br>C&#x2F;C++(gcc)是目前常用的一种交叉编译器，支持非常多的宿主机&#x2F;标机组合。</p><p>调试器qdb在开发嵌入式软件时，交又调试是必不可少的一步。嵌入式软件调试特点:<br>调试器运行在宿主机上，被调试程序运行在目标机上。调试器通过某种通信方式与目标机建立联系，如串口、并口、网络、JTAG等在目标机上一般有调试器的某种代理，能配合调试器一一起完成对目标机上运行程序的调试，可以是软件或支持调试的硬件。gdb是GNU开源组织发布的一个强大的程序调试工具。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第十五章-系统实施与维护</title>
    <link href="/2024/04/15/system_analyst15/"/>
    <url>/2024/04/15/system_analyst15/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·系统实施与维护</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="测试原则和方法"><a href="#测试原则和方法" class="headerlink" title="测试原则和方法"></a>测试原则和方法</h3><p>系统测试是为了发现错误而执行程序的过程，，成功的测试是发现了至今尚未发现的错误的测试</p><p>测试原则:</p><ul><li>应尽早并不断的进行测试</li><li>测试工作应该避免由原开发软件的人或小组承担;</li><li>在设计测试方案时，不仅要确定输入数据，而且要根据系统功能确定预期的输出结果;</li><li>既包含有效、合理的测试用例，也包含不合理、失效的用例;检验程序是否做了该做的事，且是否做了不该做的事;</li><li>严格按照测试计划进行;</li><li>妥善保存测试计划和测试用例:</li><li>测试用例可以重复使用或追加测试。</li></ul><p>软件测试方法可分为静态测试和动态测试</p><ul><li><p>静态测试:<br>指被测试程序不在机器上运行，而采用人工检测和计算机辅助静态分析的手段对程序进行检测，包括对文档的静态测试和对代码的静态测试。对文档的静态测试主要以检查单的形式进行，而对代码的静态测试，包括前检查、代码审查、代码走查的方式。使用这种方法能够有效地发现30%-70%的逻辑设计和编码错误。</p></li><li><p>动态测试:指在计算机上实际运行程序进行软件测试，一般采用自盒测试和黑盒测试方法。黑盒测试法:<br>功能性测试，不了解软件代码结构，根据功能设计用例，测试软件功能。白盒测试法:结构性测试，明确代码流程，根据代码逻辑设计用例，进行用例覆盖。</p></li></ul><h3 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h3><ul><li>(1)单元测试:也称为模块测试，测试的对象是可独立编译或汇编的程序模块软件构件或00软件中的类(统称为模块)，测试依据是软件详细设计说明书。</li><li>(2)集成测试:目的是检查模块之间，以及模块和已集成的软件之间的接口关系，并验证已集成的软件是否符合设计要求。测试依据是软件概要设计文档。</li><li>(3)确认测试:主要用于验证软件的功能、性能和其他特性是否与用户需求致。根据用户的参与程度，通常包括以下类型:<ul><li>内部确认测试:<br>主要由软件开发组织内部按照SRS进行测试</li><li>Alpha测试:用户在开发环境下进行测试。</li><li>Beta测试:<br>用户在实际使用环境下进行测试，通过改测试后，产品才能交付用户</li><li>验收测试:<br>针对SRS，在交付前以用户为主进行的测试。其测试对象为完整的、集成的计算机系统。验收测试的目的是，在真实的用户工作环境下，检验软件系统是否满足开发技术合同或SRS。验收测试的结论是用户确定是否接收该软件的主要依据。除应满足一般测试的准入条件外，在进行验收测试之前，应确认被测软件系统已通过系统测试。</li></ul></li><li>(4)系统测试:测试对象是完整的、集成的计算机系统;测试的目的是在真实系统工作环境下，!<br>验证完成的软件配置项能否和系统正确连接，并满足系统&#x2F;子系统设计文档和软件开发合同规定的要求。测试依据是用户需求或开发合同。主要内容包括功能测试、健壮性测试、性能测试、用户界面测试、安全性测试安装与反安装测试等，其中，最重要的工作是进行功能测试与性能测试。功能测试主要采用黑盒测试方法:<br>性能测试主要指标有响应时间、吞吐量、并发用户数和资源利用率等。</li><li>(5)配置项测试:测试对象是软件配置项，测试目的是检验软件配置项与SRS的一致性。测试的依据是SRS。在此之间，应确认被测软件配置项已通过单元测<br>试和集成测试。</li><li>(6)回归测试:测试目的是测试软件变更之后，变更部分的正确性和对变更需求的符合性，以及软件原有的、正确的功能、性能和其他规定的要求的不损害性。</li></ul><p>测试策略</p><ul><li>自底向上:从最底层模块开始测试，需要编写驱动程序，而后开始逐一合并模块，最终完成整个系统的测试。优点是较早的验证了底层模块</li><li>自顶向下:先测试整个系统，需要编写桩程序，而后逐步向下直至最后测试最底层模块。优点是较早的验证了系统的主要控制和判断点</li><li>三明治:既有自底向上也有自顶向下的测试方法，二者都包括。兼有二者的优点，缺点是测试工作量大。</li></ul><h3 id="测试用例设计"><a href="#测试用例设计" class="headerlink" title="测试用例设计"></a>测试用例设计</h3><p>黑盒测试用例:将程序看做一个黑盒子，只知道输入输出，不知道内部代码由此设计出测试用例，分为下面几类:◆等价类划分:<br>把所有的数据按照某种特性进行归类，而后在每类的数据里选取一个即可。等价类测试用例的设计原则:<br>设计一个新的测试用例，使其尽可能多地覆盖尚未被覆盖的有效等价类，重复这一步，直到所有的有效等价类都被覆盖为止;设计一个新的测试用例，使其仅覆盖一个尚未被覆盖的无效等价类，重复这一步，直到所有的无效等价类都被覆盖为止。</p><p>边界值划分:将每类的边界值作为测试用例，边界值一般为范围的两端值以及在此范围之外的与此范围间隔最小的两个值，如年龄范围为0-150，边界值头0,150，-1，151四个</p><p>错误推测:没有固定的方法，凭经验而言，来推测有可能产生问题的地方作为测试用例进行测试。</p><p>因果图:由一个结果来反推原因的方法，具体结果具体分析，没有固定方法</p><p>白盒测试用例:知道程序的代码逻辑，按照程序的代码语句，来设计覆盖代码分支的测试用例，覆盖级别从低至高分为下面几种:</p><ul><li>(1)语句覆盖SC:逻辑代码中的所有语句都要被执行一遍，覆盖层级最低，因为执行了所有的语句，不代表执行了所有的条件判断。</li><li>(2)判定覆盖DC:逻辑代码中的所有判断语句的条件的真假分支都要覆盖一次</li><li>(3)条件覆盖CC:针对每一个判断条件内的每一个独立条件都要执行一遍真和同时满足判定覆盖和条件覆盖</li><li>(4)条件判定组合覆盖CDC:同时满足判定覆盖和条件覆盖。</li><li>(5)路径覆盖:逻辑代码中的所有可行路径都覆盖了，覆盖层级最高</li></ul><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>测试是发现错误，调试是找出错误的代码和原因<br>调试需要确定错误的准确位置;确定问题的原因并设法改正;改正后要进行回归测试。</p><p>调试的方法有:蛮力法、回溯法(从出错的地方开始，向回找)、原因排除法:(<br>找出所有可能的原因，逐一进行排除，具体包括演绎法、归纳法、二分法)。</p><h3 id="软件度量"><a href="#软件度量" class="headerlink" title="软件度量"></a>软件度量</h3><p>软件的两种属性:外部属性指面向管理者和用户的属性，可直接测量，一般为性能指标。内部属性指软件产品本身的的属性，如可靠性等，只能间接测量</p><p>McCabe度量法:又称为环路复杂度，假设有向中有向边数为m，:节点数为n,则此有向图的环路复杂度为m-n+2.</p><p>注意m和n代表的含义不能混淆，可以用一个最简单的环路来做特殊值记忆此公式，另外，针对一个程序流程图，每一个分支边(连线)<br>就是一条有向边，每一条语句(语句框)就是一个顶点。</p><h3 id="系统运行和维护"><a href="#系统运行和维护" class="headerlink" title="系统运行和维护"></a>系统运行和维护</h3><p>遗留系统是指任何基本上不能进行修改和演化以满足新的变化了的业务需求的信息系统，它通常具有以下特点:</p><ul><li>(1)系统虽然完成企业中许多重要的业务管理工作，但仍然不能完全满足要求。一般实现业务处理电子化及部分企业管理功能，很少涉及经营决策。</li><li>(2)系统在性能上已经落后，采用的技术已经过时。例如，多采用主机&#x2F;终端形式或小型机系统，软件使用汇编语言或第三代程序设计语言的早期版本开发，使用文件系统而不是数据库。</li><li>(3)通常是大型的软件系统，已经融入企业的业务运作和决策管理机制之中，维护工作十分困难</li><li>(4)没有使用现代信息系统建设方法进行管理和开发，现在基本上已经没有文档，很难理解，</li></ul><p>系统转换是指新系统开发完毕，投入运行，取代现有系统的过程需要考虑多方面的问题，以实现与老系统的交接，有以下三种转换计划:</p><ul><li>直接转换:现有系统被新系统直接取代了，风险很大，适用于新系统不复杂或者现有系统已经不能使用的情况。优点是节省成本。</li><li>并行转换:<br>新系统和老系统并行工作一段时间，新系统经过试运行后再取代若新系统在试运行过程中有问题，也不影响现有系统的运行，风险极小，在试运行过程中还可以比较新老系统的性能，适用于大型系统。缺点是耗费人力和时间资源，难以控制两个系统间的数据转换。</li><li>分段转换:<br>分期分批逐步转换，是直接和并行转换的集合，将大型系统分为多个子系统依次试运行每个子系统，成熟一个子系统，就转换一个子系统。同样适用于大型项目，只是更耗时，而且现有系统和新系统间混合使用，需要协调好接口等问题。</li><li>数据转换与迁移:将数据从旧数据库迁移到新数据库中。有三种方法:系统切换前通过工具迁移、三系统切换前采用手工录入、系统切换后通过新系统生成</li></ul><p>系统的可维护性可以定义为维护人员理解、改正、改动和改进这个软件的难易程度，其评价指标如下:</p><ul><li>(1)易分析性。软件产品诊断软件中的缺陷或失效原因或识别待修改部分的能力。</li><li>(2)易改变性。软件产品使指定的修改可以被实现的能力，实现包括编码、设计和文档的更改。</li><li>(3)稳定性。软件产品避免由于软件修改而造成意外结果的能力。</li><li>(4)易测试性。软件产品使已修改软件能被确认的能力。</li><li>(5)维护性的依从性。软件产品遵循与维护性相关的标准或约定的能力。</li></ul><p>系统维护包括硬件维护、软件维护和数据维护，其中软件维护类型如下</p><ul><li>正确性维护:发现了bug而进行的修改。</li><li>适应性维护由于外部环境发生了改变，被动进行的对软件的修改和升级。</li><li>完善性维护:基于用户主动对软件提出更多的需求，修改软件，增加更多的功能，使其比之前的软件功能、性能更高，更加完善。</li><li>预防性维护:对未来可能发生的bug进行预防性的修改。</li></ul><p>系统评价分类</p><ul><li>立项评价:系统开发前的预评价，分析是否立项开发，做可行性评价。</li><li>中期评价:项目开发中期每个阶段的阶段评审。或者项目在开发中途遇到重大变故，评价是否还要继续。</li><li>结项评价:系统投入正式运行后，了解系统是否达到预期的目的和要求而对系统进行的综合评价。</li></ul><p>系统评价的指标</p><ul><li>(1)从信息系统的组成部分出发，信息系统是一个由人机共同组成的系统，所以可以按照运行效果和用户需求(人)、系统质量和技术条件(<br>机)这两条线索构造指标。</li><li>(2)从信息系统的评价对象出发，对于开发方来说，他们所关心的是系统质量和技术水平:对于用户方而言，关心的是用户需求和运行质量:<br>系统外部环境则主要通过社会效益指标来反映。</li><li>(3)从经济学角度出发，分别按系统成本、系统效益和财务指标3条线索建立指标。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第十六章-项目管理</title>
    <link href="/2024/04/15/system_analyst16/"/>
    <url>/2024/04/15/system_analyst16/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·项目管理</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="范围管理"><a href="#范围管理" class="headerlink" title="范围管理"></a>范围管理</h3><p>范围管理确定在项目内包括什么工作和不包括什么工作，由此界定的项目范围在项目的全生命周期内可能因种种原因而变化，项目范围管理也要管理项目范围的这种变化。项目范围的变化也叫变更，</p><p>对项目范围的管理，是通过5个管理过程来实现的:</p><ul><li>(1)规划范围管理(编制范围管理计划)。对如何定义、确认和控制项目范围的过程进行描述。</li><li>(2)定义范围。详细描述产品范围和项目范围，编制项目范围说明书，作为以后项目决策的基础。其输入包括:<br>项目章程。项目范围管理计划。组织过程资产批准的变更申请。</li><li>(3)创建工作分解结构。把整个项目工作分解为较小的、易于管理的组成部分形成一个自上而下的分解结构。</li><li>(4)确认范围。正式验收已完成的可交付成果。</li><li>(5)范围控制。监督项目和产品的范围状态、管理范围基准变更。</li></ul><p>产品范围和项目范围</p><p>产品范围是指产品或者服务所应该包含的功能。广产品范围是否完成，要根据产品是否满足了产品描述来判断。产品范围是项目范围的基础，产品范围的定义是产品要求的描述。</p><p>项目范围是指为了能够交付产品，项目所必须做的工作。项目范围的定义是产生项目管理计划的基础。判断项目范围是否完成，要以范围基准来衡量。项目的范围基准是经过批准的项目范围说明书、WBS和WBS词典</p><p>产品范围描述是项目范围说明书的重要组成部分，因此，产品范围变更后，首先受到影响的是项目的范围。</p><p>WBS 将项目整体或者主要的可交付成果分解成容易管理、方便控制的若干个子项目或者工作包，子项目需要继续分解为工作包，持续这个过程，直到整个项目部分解为可管理的工作包，这些工作包的总和是项目的所有工作范围。最普通的WBS</p><h3 id="进度管理"><a href="#进度管理" class="headerlink" title="进度管理"></a>进度管理</h3><p>进度管理就是采用科学的方法，确定进度目标，编制进度计划和资源供应计划，进行进度控制，在与质量、成本目标协调的基础上，实现工期目标。</p><p>具体来说，包括以下过程:</p><ul><li>(1)活动定义:确定完成项目各项可交付成果而需要开展的具体活动</li><li>(2)活动排序:识别和记录各项活动之间的先后关系和逻辑关系同活动</li><li>(3)资源估算:估算完成各项活动所需要的资源类型和效益</li><li>(4)活动历时估算:估算完成各项活动所需要的具体时间。</li><li>(5)进度计划编制:分析活动顺序、活动持续时间、资源要求和进度制约因素制订项目进度计划。如果发现偏差，则分析原因或进</li><li>(6)进度控制:根据进度计划开展项目活动，女行调整，</li></ul><p>进行活动资源估算的方法主要有专家判断法、替换方案的确定、公开的估算数据、估算软件和自下而上的估算。</p><ul><li>(1)专家判断法。专家判断法通常是由项目管理专家根据以往类似项目经的验和对本项目的判断，经过周密思考，进行合理预测，从而估算出项目资源。</li><li>(2)替换方案的确定。资源估算是为了给项目预算明确空间，为早期的资源备提供数据，如果某项活动存在替代方案，或提供的资源有替代支持可能，则需要明确声明。</li><li>(3)公开的估算数据。有些公司会定期地公开一些生产率或人工费率数据，其中包括很多国家和地区的劳动力交易、材料和设备信息。</li><li>(4)估算软件。依靠软件的强大功能，可以定义资源可用性、费率，以及不同的资源日历。</li><li>(5)自下而上的估算。把复杂的活动分解为更小的工作，以便于资源估算。将每项工作所需要的资源估算出来，然后汇总即是整个活动所需要的资源数量</li></ul><p>COCOMO模型:<br>常见的软件规模估算方法。常用的代码行分析方法作为其中一种度量估计单位，以代码行数估算出每个程序员工作量，累加得软件成本。模型按其详细程度可以分为三级:</p><ul><li>(1)基本COCOMO模型是一个静态单变量模型，它用一个以已估算出来的原代码行数(LOC)为自变量的经验函数计算软件开发工作量。</li><li>(2)中间COCOMO模型在基本COCOMO模型的基础上，再用涉及产品、硬件人员、项目等方面的影响因素调整工作量的估算。</li><li>(3)<br>详细COCOMO模型包括中间COCOMO模型的所有特性，将软件系统模型分为系统、子系统和模块3个层次，更进一步考虑了软件工程中每一步骤(<br>如分析设计)的影响。</li></ul><p>COCOMOII模型:<br>COCOMO的升级，也是以软件规模作为成本的主要因素考虑多个成本驱动因子。该方法包括三个阶段性模型，即应用组装模型、早期设计阶段模型和体系结构阶段模型。包含三种不同规模估算选择:<br>对象点、功能点和代码行，</p><p>进度安排的常用图形描述方法有Gantt图(甘特图)和项目计划评审技术Program Evaluation&amp; Review Technique, PERT)图</p><p>关键路径法<br>关键路径:<br>是项目的最短工期，但却是从开始到结束时间最长的路径。进度网络图中可能有多条关键路径，因为活动会变化，因此关键路径也在不断变化中关键活动:<br>关键路径上的活动，最早开始时间&#x3D;最晚开始时间。通常，每个节点的活动会有如下几个时间:</p><ul><li>(1)最早开始时间(ES)某项活动能够开始的最早时间。</li><li>(2)最早结束时间(EF)某项活动能够完成的最早时间。EF&#x3D;ES+工期</li><li>(3)最迟结束时间LF)为了使项目按时完成，某项活动必须完成的最迟时 间。</li><li>(4)最迟开始时间(LS)。为了使项目按时完成，某项活动必须开始的最迟时间。LS&#x3D;LF-工期</li></ul><p>这几个时间通常作为每个节点的组成部分，</p><ul><li><p>顺推:最早开始ES&#x3D;所有前置活动最早完成EF的最大值;最早完成EF&#x3D;最早开始ES+持续时间</p></li><li><p>逆推:最晚完成LF&#x3D;所有后续活动最晚开始LS的最小值;最晚开始LS&#x3D;最晚完成LF-持续事件。</p></li><li><p>总浮动时间:在不延误项目完工时间且不违反进度制约因素的前提下，活动可以从最早开始时间推迟或拖延的时间量，就是该活动的进度灵活性。正常情况下，关键活动的总浮动时间为零。</p></li><li><p>总浮动时间&#x3D;最迟开始LS-最早开始ES 或 最迟完成LF-最早完成EF 或 关键路径非关键路径时长</p></li><li><p>自由浮动时间:是指在不延误任何紧后活动的最早开始时间且不违反进度制约因素的前提下，活动可以从最早开始时间推迟或拖延的时间量</p></li><li><p>自由浮动时间&#x3D;紧后活动最早开始时间的最小值-本活动的最早完成时间</p></li></ul><h3 id="成本管理"><a href="#成本管理" class="headerlink" title="成本管理"></a>成本管理</h3><p>项目成本管理是在整个项目的实施过程中，为确保项目在批准的预算条件下尽可能保质按期完成，而对所需的各个过程进行管理与控制。</p><p>项目成本管理包括成本估算、成本预算和成本控制三个过程。</p><ul><li>(1)<br>成本估算是对完成项目所需成本的估计和计划，是项目计划中的一个重要的、关键的、敏感的部分;成本估算主要靠分解和类推的手段进行，基本估算方法分为三类:<br>自顶向下的估算、自底向上的估算和差别估算法</li><li>(2)成本预算是把估算的总成本分配到项目的各个工作包，建立成本基准计划以衡量项目绩效;应急储备和管理储备</li><li>(3)成本控制保证各项工作在各自的预算范围内进行</li></ul><p>成本的类型</p><ul><li>(1)可变成本:随着生产量、工作量或时间而变的成本为可变成本。可变成本又称变动成本。</li><li>(2)固定成本:不随生产量、工作量或时间的变化而变化的非重复成本为固定成本。</li><li>(3)直接成本:直接可以归属于项目工作的成本为直接成本。如项目团队差旅费、工资、项目使用的物料及设备使用费等。</li><li>(4)间接成本:<br>来自一般管理费用科目或几个项目共同担负的项目成本所分摊给本项目的费用，就形成了项目的间接成本，如税金、额外福利和保卫费用等。(</li><li>(5)机会成本:<br>是利用一定的时间或资源生产一种商品时，而失去的利用这些资源生产其他最佳替代品的机会就是机会成本,泛指一切在做出选择后其中一个最大的损失。(</li><li>(6)沉没成本:是指由于过去的决策已经发生了的，而不能由现在或将来的任何决策改变的成本。沉没成本是一种历史成本，对现有决策而言是不可控成本，会很大程度上影响人们的行为方式与决策，在投资决策时应排除沉没成本的干扰。</li></ul><p>学习曲线:重复生成产品时，产品的单位成本会随着产量的扩大呈现规律性递减。估算成本时，也要考虑此因素。</p><h3 id="软件配置管理"><a href="#软件配置管理" class="headerlink" title="软件配置管理"></a>软件配置管理</h3><p>配置管理是为了系统地控制配置变更，在系统的整个生命周期中维持配置的完整性和可跟踪性，而标识系统在不同时间点上配置的学科。</p><p>在GB&#x2F;T11457-2006中将“配置管理”正式定义为:“应用技术的和管理的指导和监控方法以标识和说明配置项的功能和物理特征，控制这些特征的变更，记录和报告变更处理和实现状态并验证与规定的需求的遵循性。</p><p>配置管理包括6个主要活动:制订配置管理计划、配置标识、配置控制、配置状态报告、配置审计、发布管理和交付。</p><p>配置项:GB&#x2F;T11457-2006对配置项的定义为:“为配置管理设计的硬件、软件或二者的集合，在配置管理过程中作为一个单个实体来对待”</p><p>以下内容都可以作为配置项进行管理:外部交付的软件产品和数据、指定的内部软件工作产品和数据、指定的用于创建或支持软件产品的支持工具、供方&#x2F;供应商提供的软件和客户提供的设备&#x2F;软件。</p><p>典型配置项包括项目计划书、需求文档、设计文档、源代码、可执行代码、测试用例,运行软件所需的各种数据，它们经评审和检查通过后进入配置管理。</p><p>每个配置项的主要属性有:名称、标识符、文件状态、版本、作者、日期等</p><p>配置项可以分为基线配置项和非基线配置项两类，例如，基线配置项可能包括所有的设计文档和源程序等;非基线配置项可能包括项目的各类计划和报告等。</p><p>所有配置项的操作权限应由CMO(配置管理员)严格管理，基本原则是:基线配置项向开发人员开放读取的权限;非基线配置项向PM、CCB及相关人员开放。</p><p>配置项的状态可分为“草稿”“正式”和“修改”<br>三种。配置项刚建立时,其状态为“草稿”。配置项通过评审后，其状态变为“正式”。此后若更改配置项，则其状态变为“修改”。当配置项修改完毕并重新通过评审时，其状态又变为“正式”。</p><p>配置项版本号</p><ul><li>(1)处于“草稿”状态的配置项的版本号格式为0.Yz,Yz的数字范围为01~99。随着草稿的修正，Yz的取值应递增。Yz的初值和增幅由用户自己把握。</li><li>(2)处于“正式”状态的配置项的版本号格式为X.，X为主版本号，取值范围为1~9。Y为次版本号，取值范围为0一9。配置项第一次成为“正式””<br>文件时，版本号为1.0。如果配置项升级幅度比较小，可以将变动部分制作成配置项的附件，附件版本依次为1.01.1..。当附件的变动积累到一定程度时，配置项的值可适量增加，Y值增加一定程度时,X值将适量增加。当配置项升级幅度比较大时，才允许直接增大X值。</li><li>(3)处于“修改”<br>状态的配置项的版本号格式为X.2。配置项正在修改时，一般只增大z值X.Y值保持不变。当配置项修改完毕，状态成为“正式”时，将z值设置为0,增加X.Y值。参见上述规则(<br>2)。</li></ul><p>配置项版本管理:<br>在项目开发过程中，绝大部分的配置项都要经过多次的修改才能最终确定下来。对配置项的任何修改都将产生新的版本。由于我们不能保证新版本一定比旧版本“好”，所以不能抛弃旧版本。版本管理的目的是按照一定的规则保存配置项的所有版本避免发生版本丢失或混淆等现象，并且可以快速准确地查找到配置项的任何版本。</p><p>配置基线(常简称为基线)由一组配置项组成，这些配置项构成一个相对稳定的逻辑实体。基线中的配置项被“冻结”了，不能再被任何人随意修改。对基线的变更必须遵循正式的变更控制程序，</p><p>基线通常对应于开发过程中的里程碑一个产品可以有多个基线，也可以只有一个基线。:交付给外部顾客的基线一般称为发行基线(Release)<br>内部开发使用的基线一般称为构造基线(Build)<br>一组拥有唯一标识号的需求、设计、源代码文卷以及相应的可执行代码、构造文卷和用户文档构成一条基线。</p><p>产品的一个测试版本(可能包括需求分析说明书、概要设计说明书、详细设计说明书、已编译的可执行代码、测试大纲、测试用例、使用手册等)<br>是基线的一个例子。</p><p>对于每一个基线，要定义下列内容:建立基线的事件、受控的配置项、建立和变更基线的程序批准变更基线所需的权限。在项目实施过程中，每个基线都要纳入配置控制，对这些基线的更新只能采用正式的变更控制程序。</p><p>建立基线还可以有如下好处:</p><ul><li>(1)基线为开发工作提供了一个定点和快照</li><li>(2)新项目可以在基线提供的定点上建立。新项目作为一个单独分支，将与随后对原始项目(在主要分支上)所进行的变更进行隔离。</li><li>(3)当认为更新不稳定或不可信时，基线为团队提供一种取消变更的方法</li><li>(4)可以利用基线重新建立基于某个特定发布版本的配置，以重现已报告的错误。</li></ul><p>配置库存放配置项并记录与配置项相关的所有信息，是配置管理的有力工具。主要作用:</p><ul><li>(1)记录与配置相关的所有信息，其中存放受控的软件配置项是很重要的内容。</li><li>(2)利用库中的信息评价变更的后果，这对变更控制有着重要的意义。</li><li>(3)从库中可提取各种配置管理过程的管理信息</li></ul><p>使用配置库可以帮助配置管理员把信息系统开发过程的各种工作产品，包括半成品或阶段产品和最终产品管理得并井有条，使其不致管乱、管混、管丢。</p><p>配置库可以分开发库、受控库、产品库3种类型</p><ul><li>(1)开发库,也称为动态库、程序员库或工作库，用于保存开发人员当前正在开发的配置实体，如:<br>新模块、文档、数据元素或进行修改的已有元素。动态中的配置项被置于版本管理之下。动态库是开发人员的个人工作区，由开发人员自行控制。库中的信息可能有较为频繁的修改，只要开发库的使用者认为有必要，无需对其进行配置控制，因为这通常不会影响到项目的其他部分。可以任意的修改。</li><li>(2)受控库,也称为主库，包含当前的基线加上对基线的变更。受控库中的配置项被置于完全的配置管理之下。在信息系统开发的某个阶段工作结束时,将当前的工作产品存入受控库。可以修改，需要走变更流程</li><li>(3)产品库,也称为静态库、发行库、软件仓库，包含已发布使用的各种基线的存档，被置于完全的配置管理之下。在开发的信息系统产品完成系统测试之后作为最终产品存入产品库内，等待交付用户或现场安装。一般不再修改，真要修改的话需要走变更流程</li></ul><h3 id="质量管理"><a href="#质量管理" class="headerlink" title="质量管理"></a>质量管理</h3><p>质量是软件产品特性的综合，表示软件产品满足明确(基本需求)或隐含(期望需求)<br>要求的能力。质量管理是指确定质量方针、目标和职责，并通过质量体系中的质量计划、质量控制、质量保证和质量改进来使其实现的所有管理职能的全部活动;</p><p>主要包括以下过程:</p><ul><li>(1)质量规划:识别项目及其产品的质量要求和标准，并书面描述项目将如何达到这些要求和标准的过程。</li><li>(2)质量保证:一般是每隔一定时间(例如，每个阶段末)进行的，主要通过系统的质量审计软件评审)和过程分析来保证项目的质量。</li><li>(3)质量控制:实时监控项目的具体结果以判断它们是否符合相关质量标准制订有效方案，以消除产生质量问题的原因</li></ul><p>信息技术 软件产品评价 质量特性及其使用指南 GB&#x2F;T 16260-2002</p><p>McCall质量模型</p><p>软件评审质量两个必要条件:设计的规格说明书符合用户标准，称为设计质量。程序按照设计规格说明书所规定的情况正确执行，称为程序质量。</p><p>软件容错技术:容错就是软件遇到错误的处理能力，实现容错的手段主要是冗余，包括下面四种冗余技术:</p><ul><li>结构冗余:分为静态、动态、混合冗余三种，当错误发生时对错误进行备份处理</li><li>信息冗余:为检错和纠错在数据中加上一段额外的信息，例如校验码原理。</li><li>时间冗余:遇到错误时重复执行，例如回滚，重复执行还有错，则转入错误处理逻辑</li></ul><p>冗余附加技术:是指为实现结构、信息和时间冗余技术所需的资源和技术，包括程序、指令、数据、存放和调动它们的空间和通道等。在屏蔽硬件错误的容错技术中</p><h3 id="风险管理"><a href="#风险管理" class="headerlink" title="风险管理"></a>风险管理</h3><p>风险管理就是要对项目风险进行认真的分析和科学的管理，这样，是能够避开不利条件、少受损失、取得预期的结果并实现项目目标的，能够争取避免风险的发生或尽量减小风险发生后的影响。但是，完全避开或消除风险，或者只享受权益而不承担风险是不可能的。</p><p>风险管理计划编制:如何安排与实施项目的风险管理，制定下列各步的计划</p><ul><li>风险识别:识别出项目中已知和可预测的风险，确定风险的来源、产生的条件、描述风险的特征以及哪些项目可以产生风险，形成一个风险列表。</li><li>风险定性分析:对已经识别的风险进行排序，确定风险可能性与影响、确定风险优先级、确定风险类型。</li><li>风险定量分析:进一步了解风险发生的可能性具体由多大，后果具体由多严重。包括灵敏度分析、期望货币价值分析、决策树分析、蒙特卡罗模拟。</li><li>风险应对计划编制:对每一个识别出来的风险来分别制定应对措施，这些措施组成的文档称为风险应对计划。包括消极风险(<br>避免策略、转移策略、减轻策略);积极风险(开拓、分享、强大)</li><li>风险监控:监控风险计划的执行，检测残余风险，识别新的风险，保证风险计划的执行，并评价这些计划对减少风险的有效性</li></ul><p>项目风险:作用于项目上的不确定的事件或条件，既可能产生威胁，也可能带来机会。</p><ul><li>通过积极和合理的规划，超过90%的风险都可以进行提前应对和管理</li><li>风险应该尽早识别出来，高层次风险应记录在章程里</li><li>应由对风险最有控制力的一方承担相应的风险。</li><li>承担风险程度与所得回报相匹配原则，承担的风险要有上限</li></ul><p>风险的属性:</p><ul><li>(1)随机性:风险事件发生及其后果都具有偶然性(双重偶然)，遵循一定的统计规律。</li><li>(2)相对性:风险是相对项目活动主体而言的。承受力不同，影响不同。风险承受力影响因素:收益大小(收益越大，越愿意承担风险)<br>;投入大小(投入越大，承受能力越小);主体的地位和资源(级别高的人能承担较大的风险)</li><li>(3)风险的可变性:条件变化，会引起风险变化。包括性质、后果的变化，以及出现新风险。</li></ul><p>风险的分类:</p><ul><li>按照后果的不同，风险可划分为纯粹风险(无任何收益)和投机风险(可能带来收益)。</li><li>按风险来源划分，自然风险(天灾)和人为风险(人的活动，又可分为行为风险、经济风险、技术风险、政治和组织风险等)</li><li>按是否可管理划分，可管理(如内部多数风险)和不可管理(如外部政策也要看主体管理水平，</li><li>按影响范围划分，局部风险(非关键路径活动延误)和总体风险(关键路径活动延误)。</li><li>按后果承担者划分:业主、政府、承包商、投资方、设计单位、监理单位保险公司等。</li><li>按可预测性划分:已知风险(已知的进度风险)、可预测风险(可能服务器故障)、不可预测风险(地震、洪水、政策变化等)。</li></ul><p>在信息系统项目中，从宏观上来看，风险可以分为项目风险、技术风险和商业风险</p><ul><li><p>项目风险是指潜在的预算、进度、个人(包括人员和组织)<br>、资源、用户和需求方面的问题，以及它们对项目的影响。项目复杂性、规模和结构的不确定性也构成项目的(估算)<br>风险因素。项目风险威胁到项目计划，一旦项目风险成为现实，可能会拖延项目进度，增加项目的成本，</p></li><li><p>技术风险是指潜在的设计、实现、接口、测试和维护方面的问题。此外，规格说明的多义性、技术上的不确定性、技术陈1旧日、是最新技术(<br>不成熟)也是风险因素。技术风险威胁到待开发系统的质量和预定的交付时间。如果技术风险成为现实，开发工作可能会变得很困难或根本不可能</p></li><li><p>商业风险威胁到待开发系统的生存能力，主要有以下5种不同的商业风险</p><ul><li>市场风险。开发的系统虽然很优秀但不是市场真正所想要的。</li><li>策略风险。开发的系统不再符合企业的信息系统战略</li><li>销售风险。开发了销售部门不清楚如何推销的系统。</li><li>管理风险。由于重点转移或人员变动而失去上级管理部门的支持。</li><li>预算风险。开发过程没有得到预算或人员的保证，5)</li></ul></li></ul><h3 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h3><p>组织结构模式:项目型(项目经理绝对领导)、职能型(部门领导为主)矩阵型(二者结合，既有项目经理也有部门领导，但权利分割不同)。</p><p>程序设计小组的组织方式:</p><ul><li>(1)主程序员制小组(主程序员全权负责，后援工程师必要时能替代主程序员适合大规模项目)</li><li>(2)民主制小组(<br>也即无主程序员小组，成员之间地位平等，任何决策都是全员参与投票，适合于项目规模小，开发人员少，采用新技术和确定性较小的项目)</li><li>(3)层次式小组(两个层次，一名组长领导若干个高级程序员，每个高级程序员领导若干个程序员)</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第十三章-系统分析及需求工程</title>
    <link href="/2024/04/12/system_analyst13/"/>
    <url>/2024/04/12/system_analyst13/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·系统分析及需求工程</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="软件需求"><a href="#软件需求" class="headerlink" title="软件需求"></a>软件需求</h3><p>软件需求:是指用户对系统在功能、行为、性能、设计约束等方面的期望是指用户解决问题或达到目标所需的条件或能力，是系统或系统部件要满足合同、标准、规范或其他正式规定文档所需具有的条件或能力，以及反映这些条件或能力的文档说明。</p><p>分为需求开发和需求管理两大过程</p><ul><li>需求开发<ul><li>需求获取</li><li>需求分析</li><li>需求定义(需求规格说明书)</li><li>需求验证</li></ul></li><li>输出需求基线</li><li>需求管理（支持需求开发）<ul><li>变更控制</li><li>版本控制</li><li>需求跟踪</li><li>需求状态跟踪</li></ul></li></ul><p>业务需求:反映企业或客户对系统高层次的目标要求，通常来自项目投资人客户、市场营销部门或产品策划部门。通过业务需求可以确定项目视图和范围。</p><p>用户需求:描述的是用户的具体目标，或用户要求系统必须能完成的任务即描述了用户能使用系统来做什么。通常采取用户访谈和问卷调查等方式，对用户使用的场景进行整理，从而建立用户需求。</p><p>系统需求:从系统的角度来说明软件的需求，包括功能需求、非功能需求和设计约束等。</p><ul><li>1)功能需求:也称为行为需求，规定了开发人员必须在系统中实现的软件功能用户利用这些功能来完成任务，满足业务需要。</li><li>2)非功能需求:指系统必须具备的属性或品质，又可以细分为软件质量属性(如可维护性、可靠性、效率等)和其他非功能需求。</li><li>3)设计约束:也称为限制条件或补充规约，通常是对系统的一些约束说明，例如必须采用国有自主知识产权的数据库系统，必须运行在UNIX操作系统之下等。</li></ul><p>质量功能部署</p><p>质量功能部署(QFD)是一种将用户要求转化成软件需求的技术，其目的是最大限度地提升软件工程过程中用户的满意度。为了达到这个目标，QFD将软件需求分为三类，分别是常规需求、期望需求和意外需求。</p><ul><li>(1)常规需求。用户认为系统应该做到的功能或性能，实现越多用户会越满意。</li><li>(2)期望需求。用户想当然认为系统应具备的功能或性能，但并不能正确描述自己想要得到的这些功能或性能需求。如果期望需求没有得到实现，会让用户感到不满意。</li><li>(3)意外需求。意外需求也称为兴奋需求，是用户要求范围外的功能或性能(但通常是软件开发人员很乐意赋予系统的技术特性)<br>，实现这些需求用户会更高兴，但不实现也不影响其购买的决策。</li></ul><h3 id="需求获取"><a href="#需求获取" class="headerlink" title="需求获取"></a>需求获取</h3><p>需求获取:是一个确定和理解不同的项目干系人的需求和约束的过程</p><p>常见的需求获取法包括:</p><ul><li>(1)用户访谈:1对1-3，有代表性的用户。其形式包括结构化和非结构化两种。</li><li>(2)问卷调查:用户多，无法一一访谈。</li><li>(3)采样:从种群中系统地选出有代表性的样本集的过程。样本数量&#x3D;0.25*(可信度因子&#x2F;错误率)**2</li><li>(4)情节串联板:一系列图片，通过这些图片来讲故事。</li><li>(5)联合需求计划(JRP):通过联合各个关键用户代表、系统分析师、开发团队代表一起，通过有组织的会议来讨论需求。</li><li>(6)需求记录技术:任务卡片、场景说明、用户故事、Volere白卡。</li></ul><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>需求分析:一个好的需求应该具有无二义性、完整性、一致性、可测试性确定性、可跟踪性、正确性、必要性等特性，因此，需要分析人员把杂乱无章的用户要求和期望转化为用户需求，这就是需求分析的工作。</p><p>需求分析的任务：</p><ul><li>(1)绘制系统上下文范围关系图</li><li>(2)创建用户界面原型</li><li>(3)分析需求的可行性</li><li>(4)确定需求的优先级</li><li>(5)为需求建立模型</li><li>(6)创建数据字典</li><li>(7)使用QFD(质量功能部署)</li></ul><p>结构化的需求分析结构化特点:自顶向下，逐步分解，面向数据.</p><p>三大模型:功能模型(数据流图)、行为模型(状态转换图)、数据模型(E-R图)以及数据字典。<br><img src="/../images/img_5.png" alt="img_5.png"></p><p>数据流图描述数据在系统中如何被传送或变换，以及如何对数据流进行变换的功能或子功能，用于对功能建模，数据流图相关概念如图:</p><p>数据流图是可以分层的，从顶层(即上下文无关数据流)到0层、1层等，顶层数据流图只含有一个加工处理表示整个管理信息系统，描述了系统的输入和输出，以及和外部实体的数据交互。</p><ul><li><p>(1)对象:由数据及其操作所构成的封装体，是系统中用来描述客观事务的个实体，是构成系统的一个基本单位。一个对象通常可以由对象名、属性和方法3个部分组成。</p></li><li><p>(2)类:现实世界中实体的形式化描述，类将该实体的属性(数据)和操作(函数)<br>封装在一起。对象是类的实例，类是对象的模板。</p><ul><li>类可以分为三种:实体类、接口类(边界类)<br>和控制类。<ul><li>实体类的对象表示现实世界中真实的实体，如人、物等</li><li>接口类(边界类)<br>的对象为用户提供一种与系统合作交互的方式，分为人和系统两大类，其中人的接口可以是显示屏窗口、Web<br>窗体、对话框、菜单、列表框、其他显示控制、条形码、二维码或者用户与系统交互的其他方法。系统接口涉及到把数据发送到其他系统，或者从其他系统接收数据。</li><li>控制类的对象用来控制活动流，充当协调者</li></ul></li></ul></li><li><p>(3)抽象:通过特定的实例抽取共同特征以后形成概念的过程。它强调主要特征，忽略次要特征。一个对象是现实世界中一个实体的抽象，一个类是一组对象的抽象，抽象是一种单一化的描述，它强调给出与应用相关的特性，抛弃不相关的特性。</p></li><li><p>(4)封装:是一种信息隐蔽技术，将相关的概念组成一个单元模块，并通过-个名称来引用。面向对象封装是将数据和基于数据的操作封装成一个整体对象对数据的访问或修改只能通过对象对外提供的接口进行。<br>这种关系使得某类对象可</p></li><li><p>(5)继承:表示类之间的层次关系(父类与子类)以继承另外一类对象的特征，又可分为单继承和多继承。</p></li><li><p>(6)多态:不同的对象收到同一个消息时产生完全不同的结果。包括参数多态包含多态(父子类型关系)、过载多态(类(<br>不同类型参数多种结构类型)强制多态:(强制类型转换)四种类型。多态似于重载，一个名字不同含义)<br>、由继承机制支持，将通用消息放在抽象层，具体不同的功能实现放在低层。</p></li><li><p>(7)接口:描述对操作规范的说明，其只说明操作应该做什么，并没有定义操作如何做。</p></li><li><p>(8)消息:体现对象间的交互，通过它向目标对象发送操作请求:</p></li><li><p>(9)覆盖:子类在原有父类接口的基础上，用适合于自己要求的实现去置换父类中的相应实现。即在子类中重定义一个与父类同名同参的方法。</p></li><li><p>(10)函数重载:与覆盖要区分开，函数重载与子类父类无关，且函数是同名不同参数。</p></li><li><p>(11)绑定是一个把过程调用和响应调用所需要执行的代码加以结合的过程在一般的程序设计语言中，绑定是在编译时进行的，叫作静态绑定。动态绑定则是在运行时进行的，因此，一个给定的过程调用和代码的结合直到调用发生时才进行。</p></li></ul><p>面向对象的分析:是为了确定问题域，理解问题。包含五个活动:认定对象组织对象、描述对象间的相互作用、确定对象的操作、定义对象的内部信息。</p><h3 id="统一建模语言UML"><a href="#统一建模语言UML" class="headerlink" title="统一建模语言UML"></a>统一建模语言UML</h3><p>UML(统一建模语言):是一种可视化的建模语言，而非程序设计语言，支持从需求分析开始的软件开发的全过程。</p><p>从总体上来看，UML的结构包括构造块、规则和公共机制三个部分。</p><ul><li>(1)构造块。UML有三种基本的构造块，分别是事物(thing)、关系(relationship)和图(diagram)<br>。事物是UML的重要组成部分，关系把事物紧密联系在一起，图是多个相互关联的事物的集合。</li><li>(2)公共机制。公共机制是指达到特定目标的公共UML方法。</li><li>(3)规则。规则是构造块如何放在一起的规定。</li></ul><p>事物：</p><ul><li>结构事物:模型的静态部分，如类、接口、用例、构件等;</li><li>行为事物:模型的动态部分，如交互、活动、状态机;</li><li>分组事物:模型的组织部分，如包;</li><li>注释事物:模型的解释部分，依附于一个元素或·组元素之上对其进行约束或解释的简单符号。</li></ul><p>关系：</p><ul><li>依赖:一个事物的语义依赖于另·一个事物的语义的变化而变化</li><li>关联:是一种结构关系，描述了一组链，链是对象之间的连接。分为组合和聚合，都是部分和整体的关系，其中组合事物之间关系更强。两个类之间的关联，实际上是两个类所扮演角色的关联，因此，两个类之间可以有多个由不同角色标识的关联。</li><li>泛化:一般&#x2F;特殊的关系，子类和父类之间的关系</li><li>实现:一个类元指定了另一个类元保证执行的契约</li></ul><p>UML图分类。了解</p><p>静态图：类图、对象图、用例图、部署图。<br>动态图：序列图、通信图、状态图、活动图。<br>组件图：构件图。</p><p>UML4+1视图</p><ul><li>(1)逻辑视图。逻辑视图也称为设计视图，它表示了设计模型中在架构方面具有重要意义的部分，即类、子系统、包和用例实现的子集</li><li>(2)进程视图。进程视图是可执行线程和进程作为活动类的建模，它是逻辑视图的一次执行实例，描述了并发与同步结构。</li><li>(3)实现视图。实现视图对组成基于系统的物理代码的文件和构件进行建模。</li><li>(4)部署视图。部署视图把构件部署到一组物理节点上表示软件到硬件的映射和分布结构。</li><li>(5)用例视图。用例视图是最基本的需求分析模型</li></ul><h3 id="需求定义"><a href="#需求定义" class="headerlink" title="需求定义"></a>需求定义</h3><p>需求定义(软件需求规格说明书SRS):<br>是需求开发活动的产物，编制该文档的目的是使项目干系人与开发团队对系统的初始规定有一个共同的理解，使之成为整个开发工作的基础。SRS是软件开发过程中最重要的文档之一，对于任何规模和性质的软件项目都不应该缺少</p><p>需求定义方法</p><ul><li>(1)严格定义也称为预先定义，需求的严格定义建立在以下的基本假设之上:<br>所有需求都能够被预先定义。开发人员与用户之间能够准确而清晰地交流。采用图形(或文字)可以充分体现最终系统。</li><li>(2)原型方法，迭代的循环型开发方式，需要注意的问题:<br>并非所有的需求都能在系统开发前被准确地说明。项目干系人之间通常都存在交流上的困难，原型提供了克该服困难的一个手段。特点:<br>需要实际的、可供用户参与的系统型。有合适的系统开发环境。反复是完全需要和值得提倡的，需求一旦确定，就应遵从严格的方法。</li></ul><h3 id="需求验证"><a href="#需求验证" class="headerlink" title="需求验证"></a>需求验证</h3><p>需求验证:也称为需求确认，目的是与用户一起确认需求无误，对需求规格说明书SAS进行评审和测试，包括两个步骤:</p><ul><li>需求评审:正式评审和非正式评审。</li><li>需求测试:设计概念测试用例。</li></ul><p>需求验证通过后，要请用户签字确认，作为验收标准之一，此时，这个需求规格说明书就是需求基线，不可以再随意更新，如果需要更改必须走需求变更流程。</p><h3 id="需求管理"><a href="#需求管理" class="headerlink" title="需求管理"></a>需求管理</h3><p>定义需求基线:通过了评审的需求说明书就是需求基线，下次如果需要变更需求，就需要按照流程来一步步进行。</p><p>需求变更和风险</p><p>主要关心需求变更过程中的需求风险管理，带有风险的做法有:<br>无足够用户参与、忽略了用户分类、用户需求的不断增加、模棱两可的需求、不必要的特性、过于精简的SRS、不准确的估算</p><p>变更产生的原因:外部环境的变化、需求和设计做的不够完整、新技术的出现、公司机构重组造成业务流程的变化。</p><p>变更控制委员会CCB:也称为配置控制委员会，其任务时对建议的配置项变更做出评价、审批，以及监督已经批准变更的实施。</p><p>双向跟踪，两个层次：</p><ul><li>正向跟踪表示用户原始需求是否都实现了，反向跟踪表示软件实现的是否都是用户要求的，不多不少，可以用原始需求和用例表格(需求跟踪矩阵)来表示</li><li>若原始需求和用例有对应，则在对应栏打对号，若某行都没有对号，表明原始需求未实现，正向跟踪发现问题:若某列都没有对号，表明有多余功能用例软件实现了多余功能，反向跟踪发现问题。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第十四章-系统设计</title>
    <link href="/2024/04/12/system_analyst14/"/>
    <url>/2024/04/12/system_analyst14/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·系统设计</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="处理流程设计"><a href="#处理流程设计" class="headerlink" title="处理流程设计"></a>处理流程设计</h3><p>业务流程建模标杆瞄准:以行业领先的标杆企业为目标，结合本企业情况分析建模。</p><ul><li>IDEF(一系列建模、分析和仿真方法的统称)</li><li>DEMO(组织动态本质建模法)</li><li>Petri网</li><li>业务流程建模语言:BPEL、BPML、BPMN、XPDL。</li><li>基于服务的BPM:基于Web服务的思想对业务流程进行建模</li></ul><p>IDEF:</p><ul><li>IDEFO:业务流程(功能)建模;</li><li>IDEF1:信息建模;</li><li>IDEF1X:数据建模(如ER模型);</li><li>IDEF2:仿真建模设计;</li><li>IDEF3:过程描述获取;</li><li>IDEF4:面向对象设计;</li><li>IDEF5:本体论描述获取;</li><li>IDEF6:设计原理获取;</li><li>IDEF7:信息系统审计;</li><li>IDEF8:用户界面建模;</li><li>IDEF9:场景驱动信息系统设计;</li><li>IDEF10:实施架构建模;</li><li>DEF11：信息制品建模;</li><li>IDEF12:组织结构建模;</li><li>IDEF13:三模式映射设计;</li><li>IDEF14:网络规划;</li></ul><p>流程表示工具</p><ul><li>程序流程图(Program Flow Diagram，PFD)用一些图框表示各种操作，它独立于任何一种程序设计语言，比较直观、清晰，易于学习掌握。任何复杂的程序流程图都应该由顺序、选择和循环结构组合或嵌套而成。</li><li>IPO图也是流程描述工具，用来描述构成软件系统的每个模块的输入、!输出和数据加工。</li><li>N-S图容易表示嵌套和层次关系，并具有强烈的结构化特征。但是当问题很复杂时，N-S图可能很大，因此不适合于复杂程序的设计。</li><li>问题分析图(PAD)是一种支持结构化程序设计的图形工具。PAD具有清晰的逻辑结构、标准化的图形等优点，更重要的是，它引导设计人员使用结构化程序设计方法，从而提高程序的质量。</li></ul><p>业务流程重组BPR</p><p>BPR是对企业的业务流程进行根本性的再思考和彻底性的再设计，从而获得可以用诸如成本、质量、服务和速度等方面的业绩来衡量的显著性的成就。BPR设计原则、系统规划和步骤。可能会考</p><ul><li>基本原则<ul><li>以流程为中心的原则</li><li>团队管理原则(以人为本)</li><li>以客户为导向的原则</li></ul></li><li>基于BPR的系统规划<ul><li>战略规划</li><li>流程规划</li><li>数据规划</li><li>功能规划</li><li>系统实施</li></ul></li><li>步骤<ul><li>项目的启动</li><li>拟订变革计划</li><li>建立项目团队</li><li>分析目标流程</li><li>重新设计目标流程</li><li>实施新的设计</li><li>持续改进</li><li>重新开始</li></ul></li></ul><p>业务流程管理BPM</p><p>BPM是一种以规范化的构造端到端的卓越业务流程为中心，以持续的提高组织业务绩效为目的的系统化方法。</p><p>BPM与BPR管理思想最根本的不同就在于流程管理并不要求对所有的流程进行再造。构造卓越的业务流程并不是流程再造，而是根据现有流程的具体情况，对流程进行规范化的设计。</p><p>流程管理包含三个层面:规范流程、优化流程和再造流程。</p><h3 id="软件架构设计"><a href="#软件架构设计" class="headerlink" title="软件架构设计"></a>软件架构设计</h3><p>架构设计就是需求分配，即将满足需求的职责分配到组件上。</p><p>软件架构为软件系统提供了一个结构、行为和属性的高级抽象，由构成系统的元素的描述、这些元素的相互作用、指导元素集成的模式以及这些模式的约束组成。</p><p>软件架构是项目干系人进行交流的手段，明确了对系统实现的约束条件，决定了开发和维护组织的组织结构，制约着系统的质量属性。</p><p>软件架构使推理和控制的更改更加简单，有助于循序渐进的原型设计，可以作为培训的基础。</p><p>软件架构是可传递和可复用的模型，通过研究软件架构可能预测软件的质量</p><p>架构设计的一个核心问题是能否达到架构级的软件复用。</p><p>架构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个构件有效地组织成一个完整的系统。</p><p>有五种架构风格如下:</p><ul><li>数据流风格:批处理序列(个处理，顺序结构)、管道&#x2F;过滤器(数据进出管道都要经过过滤器处理，分阶段的数据处理，常见于网络数据处理)</li><li>调用&#x2F;返回风格:主程序&#x2F;子程序、面向对象风格、层次结构(与上下两层关系密切)</li><li>独立构件风格:进程通信(构件之间是独立的，通过消息通信)、事件系统</li><li>虚拟机风格:解释器(有虚拟机，可以仿真硬件执行过程，实现解释执行效率较低，可跨平台)、基于规则的系统。</li><li>仓库风格:数据库系统、超文本系统、黑板系统(是一个解决方案的数据库知识源与黑板进行通信，用于没有确定方案的系统)。</li></ul><p>两层C&#x2F;s架构</p><p>客户端和服务器都有处理功能，相比较于传统的集中式软件架构，还是有不少优点的，但是现在已经不常用，原因有:<br>开发成本较高、客户端程序设计复杂、信息内容和形式单一、用户界面风格不一、软件移植困难、软件维护和升级困难、新技术不能轻易应用、安全性问题、服务器端压力大难以复用。</p><p>三层c&#x2F;s架构</p><ul><li>将处理功能独立出来。表示层在客户机上，功能层在应用服务器上，数据层在数据库服务器上。</li><li>其优点下面四点:<ul><li>各层在逻辑上保持相对独立，整个系统的逻辑结构更为清晰，能提高系统和软件的可维护性和可扩展性;</li><li>允许灵活有效的选用相应的平台和硬件系统，具有良好的可升级性和开放性;</li><li>各层可以并行开发，各层也可以选择各自最适合的开发语言;</li><li>功能层有效的隔离表示层与数据层，为严格的安全管理奠定了坚实的基础，整个系统的管理层次也更加合理和可控制。</li><li>三层C&#x2F;s架构设计的关键在于各层之间的通信效率要慎重考虑三层间的通信方法、通信频度和数据量否则即使分配给各层的硬件能力很强，性能也不高。</li></ul></li></ul><p>三层B&#x2F;S架构</p><p>是三层C&#x2F;S架构的变种，将应用服务器将客户端变为用户客户端上的浏览器变为网络上的WEB服务器又称为0客户端架构，虽然不用开发客户端，但有很多缺点，主要是数据处理能力差:</p><ul><li>B&#x2F;s架构缺乏对动态页面的支持能力，没有集成有效的数据库处理功能</li><li>安全性难以控制;</li><li>在数据查询等响应速度上，要远远低于C&#x2F;s架构</li><li>数据提交一般以页面为单位，数据的动态交互性不强，不利于OLTP应用</li></ul><h3 id="结构化设计"><a href="#结构化设计" class="headerlink" title="结构化设计"></a>结构化设计</h3><p>系统设计主要目的:为系统制定蓝图，在各种技术和实施方法中权衡利弊精心设计，合理地使用各种资源，最终勾画出新系统的详细设计方法。</p><p>系统设计方法:结构化设计方法，面向对象设计方法，</p><p>系统设计的主要内容:.概要设计、详细设计。</p><p>概要设计基本任务:又称为系统总体结构设计，是将系统的功能需求分配给软件模块，确定每个模块的功能和调用关系，形成软件的模块结构图，即系统结构图。</p><p>详细设计的基本任务::模块内详细算法设计、数据库模块内数据结构设计、的物理设计、其他设计(代码、输入&#x2F;输出格式、用户界面)<br>、编写详细设计说明书、评审。</p><p>系统设计基本原理</p><ul><li>抽象化;</li><li>自顶而下，逐步求精;</li><li>信息隐蔽</li><li>模块独立(高内聚，低耦合)</li></ul><p>系统设计原则</p><ul><li>保持模块的大小适中;</li><li>尽可能减少调用的深度;</li><li>多扇入，少扇出;</li><li>单入口，单出口;</li><li>模块的作用域应该在模块之内;</li><li>功能应该是可预测的。</li></ul><p>系统设计基本原理:抽象、模块化、信息隐蔽、模块独立衡量模块独立程度的标准有两个:耦合性和内聚性。（喜欢考）</p><p>内聚程度从低到高如下表：</p><table><thead><tr><th>内聚分类</th><th>定义</th><th>记忆关键字</th></tr></thead><tbody><tr><td>偶然内聚</td><td>一个模块内的各处理元素之间没有任何联系</td><td>无直接关系。</td></tr><tr><td>逻辑内聚</td><td>模块内执行若干个逻辑上相似的功能，通过参数确定该模块完成哪一个功能。</td><td>逻辑相似、参数决定。</td></tr><tr><td>时间内聚</td><td>把需要同时执行的动作组合在一起形成的模块。</td><td>同时执行。</td></tr><tr><td>过程内聚</td><td>一个模块完成多个任务，这些任务必须按指定的过程执行。</td><td>指定的过程顺序。</td></tr><tr><td>通信内聚</td><td>模块内的所有处理元素都在同一个数据结构上操作，或者各处理使用相同的输入数据或者产生相同的输出数据。</td><td>相同数据结构、相同输入输出。</td></tr><tr><td>顺序内聚</td><td>一个模块中的各个处理元素都密切相关于同一功能且必须顺序执行，前一个功能元素的输出就是下一个功能元素的输入。</td><td>顺序执行、输入为输出</td></tr><tr><td>功能内聚</td><td>最强的内聚，模块内的所有元素共同作用完成一个功能，缺一不可。</td><td>共同作用、缺一不可</td></tr></tbody></table><p>耦合程度从低到高如下表：</p><table><thead><tr><th>耦合分类</th><th>定义</th><th>记忆关键字</th></tr></thead><tbody><tr><td>无直接耦合</td><td>两个模块之间没有直接的关系，它们分别从属于不同模块的控制与调用，不传递任何信息。</td><td>无直接关系。</td></tr><tr><td>数据耦合</td><td>两个模块之间有调用关系，传递的是简单的数据值，相当于高级语言中的值传递。</td><td>传递数据值调用</td></tr><tr><td>标记耦合</td><td>两个模块之间传递的是数据结构。</td><td>传递数据结构。</td></tr><tr><td>控制耦合</td><td>一个模块调用另一个模块时，传递的是控制变量，被调用模块通过该控制变量的值有选择的执行模块内的某一功能。</td><td>控制变量、选择执行某一功能。</td></tr><tr><td>外部耦合</td><td>模块间通过软件之外的环境联合(如I&#x2F;O将模块耦合到特定的设备、格式、通信协议上)时。</td><td>软件外部环境</td></tr><tr><td>公共耦合</td><td>通过一个公共数据环境相互作用的那些模块间的耦合。</td><td>公共数据结构</td></tr><tr><td>内容耦合</td><td>当一个模块直接使用另一个模块的内部数据，或通过非正常入口转入另一个模块内部时。</td><td>模块内部关联</td></tr></tbody></table><h3 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h3><p>面向对象的设计:是设计分析模型和实现相应源代码，设计问题域的解决方案，与技术相关。00D同样应遵循抽象、信息隐蔽、功能独立、模块化等设计准则。</p><p>面向对象的分析模型主要由顶层架构图、用例与用例图、领域概念模型构成设计模型则包含以包图表示的软件体系结构图、以交互图表示的用例实现图、完整精确的类图、针对复杂对象的状态图和用以描述流程化处理过程的活动图等</p><p>面向对象的设计原则:</p><ul><li>(1)单一责任原则。就一个类而言，应该仅有一个引起它变化的原因。即，:需要修改某个类的时候原因有且只有一个，让一个类只做一种类型责任</li><li>(2)开放-封闭原则。软件实体(类、模块、函数等)应该是可以扩展的，即开放的;但是不可修改的，即封闭的。</li><li>(3)里氏替换原则。子类型必须能够替换掉他们的基类型。即，在任何父类可以出现的地方，都可以用子类的实例来赋值给父类型的引用</li><li>(4)依赖倒置原则。抽象不应该依赖于细节，细节应该依赖于抽象。即，高层模块不应该依赖于低层模块，二者都应该依赖于抽象。</li><li>(5)接口分离原则。不应该强迫客户依赖于它们不用的方法。接口属于客户不属于它所在的类层次结构。即:<br>依赖于抽象，不要依赖于具体，同时在抽象级别不应该有对于细节的依赖。这样做的好处就在于可以最大限度地应对可能的变化。</li></ul><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>(必考)</p><p>架构模式:软件设计中的高层决策，例如C&#x2F;S结构就属于架构模式，架构模式反映了开发软件系统过程中所作的基本设计决策。</p><p>设计模式:<br>每一个设计模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动,设计模式的核心在于提供了相关问题的解决方案，使得人们可以更加简单方便的复用成功的的设计和体系结构。四个基本要素:<br>模式名称、问题(应该在何时使用模式解决方案(设计的内容)、效果(模式应用的效果)</p><p>惯用法:是最低层的模式，关注软件系统的设计与实现，实现时通过某种特定的程序设计语言来描述构件与构件之间的关系。每种编程语言都有它自己特定的模式即语言的惯用法。例如引用-计数就是C++语言中的一种惯用法。</p><h3 id="人机界面设计"><a href="#人机界面设计" class="headerlink" title="人机界面设计"></a>人机界面设计</h3><ul><li>置于用户控制之下</li><li>减少用户的记忆负担</li><li>保持界面的一致性</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第十一章-软件工程</title>
    <link href="/2024/04/10/system_analyst11/"/>
    <url>/2024/04/10/system_analyst11/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·软件工程</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>上午选择题，下午论述题，还有可能考论文。挺重要的。</p><h3 id="信息系统生命周期"><a href="#信息系统生命周期" class="headerlink" title="信息系统生命周期"></a>信息系统生命周期</h3><p>软件工程基本原理:用分阶段的生命周期计划严格管理、坚持进行阶段评审、实现严格的产品控制采用现代程序设计技术、结果应能清楚的审查、开发小组的人员应少而精、承认不断改进软件工程实践的必要性。</p><p>软件工程的基本要素:方法、工具、过程</p><p>软件生存周期:可行性分析与项目开发计划、需求分析、概要设计(选择系统解决方案，规划子系统)、详细设计(设计子系统内部具体实现)<br>、编码、测试、维护。</p><ul><li>1.系统规划阶段:<br>任务是对组织的环境、目标及现行系统的状况进行初步调查，根据组织目标和发展战略确定信息系统的发展战略，对建设新系统的需求做出分析和预测，同时考虑建设新系统所受的各种约束，研究建设新系统的必要性和可能性。根据需要与可能，给出制建系统的备选方案。输出:<br>可行性研究报告、系统设计任务书。</li><li>2.系统分析阶段:<br>任务是根据系统设计任务书所确定的范围，对现行系统进行详细调查，描述现行系统的业务流程，指出现行系统的局限性和不足之处，确定新系统的基本目标和逻辑功能要求，即提出新系统的逻辑模型。系统分析阶段又称为逻辑设计阶段。这个阶段是整个系统建设的关键阶段，也是信息系统建设与一般工程项目的重要区别所在输出:<br>系统说明书。</li><li>3.系统设计阶段:<br>系统分析阶段的任务是回答系统“做什么”的问题，而系统设计阶段要回答的问题是“怎。该阶段的任务是根据系统说明书中规定的功能要求，具体设计实现逻辑模型的技术方案，也就是设计么做”新系统的物理模型。这个阶段又称为物理设计阶段，可分为总体设计(<br>概要设计)和详细设计两个子阶段。输出:系统设计说明书(概要设计、详细设计说明书)。</li><li>4.系统实施阶段:<br>是将设计的系统付诸实施的阶段。这一阶段的任务包括计算机等设备的购置、安装和调试程序的编写和调试、人员培训、数据文件转换、系统调试与转换等。这个阶段的特点是几个互相联系、互相制约的任务同时展开，必须精心安排、合理组织。系统实施是按实施计划分阶段完成的，每个阶段应写出实施进展报告。系统测试之后写出系统测试分析报告。输出:<br>实施进展报告、系统测试分析报告。</li><li>5.系统运行和维护阶段:<br>系统投入运行后，需要经常进行维护和评价，记录系统运行的情况，根据一定的规则对系统进行必要的修改，评价系统的工作质量和经济效益。</li></ul><h3 id="能力成熟度模型"><a href="#能力成熟度模型" class="headerlink" title="能力成熟度模型"></a>能力成熟度模型</h3><p>CMM</p><table><thead><tr><th>能力等级</th><th>特点</th><th>关键过程区域</th></tr></thead><tbody><tr><td>初始级(Initial)</td><td>软件过程的特点是杂乱无章，有时甚至很混乱，几乎没有明确定义的步骤，项目的成功完全依赖个人的努力和英雄式核心人物的作用。</td><td></td></tr><tr><td>可重复级(Repeatable)</td><td>建立了基本的项目管理过程和实践来跟踪项目费用、进度和功能特性，有必要的过程准则来重复以前在同类项目中的成功。</td><td>软件配置管理、软件质量保证软件子合同管理、软件项目跟踪与监督、软件项目策划、软件需求管理</td></tr><tr><td>已定义级(Defined)</td><td>管理和工程两方面的软件过程已经文档化、标准化，并综合成整个软件开发组织的标准软件过程。所有项目都采用根据实际情况修改后得到的标准软件过程来发和维护软件。</td><td>同行评审、组间协调、软件产品工程、集成软件管理、培训大纲组织过程定义、组织过程集点</td></tr><tr><td>已管理级(Managed)</td><td>制定了软件过程和产品质量的详细度量标准。对软件过程和产品质量有定量的理解和控制。</td><td>软件质量管理和定量过程管理</td></tr><tr><td>优化级(optimized)</td><td>加强了定量分析，通过来自过程质量反新技术的反馈使过程馈和来自新观念、能不断持续地改进</td><td>过程更改管理、技术改革管理和缺陷预防</td></tr></tbody></table><p>能力成熟度模型集成CMMI</p><p>是若干过程模型的综合和改进不仅仅软件，而是支持多个工程学科和领域的系统的、一致的过程改进框架，能适应现代工程的特点和需要，能提高过程的质量和工作效率。</p><p>CMMI两种表示方法:</p><ul><li><p>(1)阶段式模型:类似于CMM。它关注组织的成熟度，五个成熟度模型如下:</p><p>初始级、已管理级、已定义级、定量管理、优化级</p></li><li><p>(2)连续式模型:关注每个过程域的能力，一个组织对不同的过程域可以达到不同的过程域能力等级。</p></li></ul><h3 id="软件过程模型"><a href="#软件过程模型" class="headerlink" title="软件过程模型"></a>软件过程模型</h3><p>瀑布模型(SDLC):瀑布模型是一个经典的软件生命周期模型，一般将软件开发分为:可行性分析(计划)、需求分析、软件设计(<br>概要设计、详细设计)、编码(含单元测试)、测试、运行维护等几个阶段。</p><p>瀑布模型特点</p><ul><li>(1)从上一项开发活动接受该项活动的工作对象作为输入，</li><li>(2)利用这一输入，实施该项活动应完成的工作内容，</li><li>(3)给出该项活动的工作成果，作为输出传给下一项开发活动。</li><li>(4)对该项活动的实施工作成果进行评审。若其工作成果得到确认，则继续进行下一项开发活动;否则返回前一项，甚至更前项的活动。尽量减少多个阶段间的反复。以相对来说较小的费用来开发软件</li></ul><p>螺旋模型是一个演化软件过程模型，将原型实现的迭代特征与线性顺序(瀑布)模型中控制的和系统化的方面结合起来。<br>在螺旋模型中，软件开发是一系列的增量发布。</p><p>开发过程具有周期性重复的螺旋线状。四个象限分别标志每个周期所划分的四阶段:<br>制订计划、风险分析、实施工程和客户评估。螺旋模型强调了风险分析，特别适用于庞大而复杂的、高风险的系统</p><p>V模型从整体上看起来，就是一个V字型的结构，由左右两边组成。左边的下画线分别代表了需求分析、概要设计、详细设计、编码。右边的上画线代表了单元测试、集成测试、系统测试与验收测试。</p><p>V模型的特点如下:</p><ul><li>(1)单元测试的主要目的是针对编码过程中可能存在的各种错误:</li><li>(2)集成测试的主要目的是针对详细设计中可能存在的问题</li><li>(3)系统测试主要针对概要设计，检查系统作为一个整体是否有效地得到运行;</li><li>(4)验收测试通常由业务专家或者用户进行，以确认产品能真正符合用户业务上的需要</li><li>(5)V模型用于需求明确和需求变更不频繁的情形。</li></ul><p>原型化模型第一步就是创建一个快速原型，能够满足项目干系人与未来的用户可以与原型进行交互，再通过与相关干系人进行充分的讨论和分析，最终弄清楚当前系统的需求，进行了充分的了解之后，在原型的基础上开发出用户满<br>意的产品。</p><p>原型法认为在很难一下子全面准确地提出用户需求的情况下，原型应当具备的特点如下。</p><ul><li>实际可行</li><li>具有最终系统的基本特征</li><li>构造方便、快速，造价低。 原型法的特点在于原型法对用户的需求是动态响应、逐步纳入的。</li></ul><p>增量模型:首先开发核心模块功能，而后与用户确认之后再开发次核心模块的功能，即每次开发一部分功能，并与用户需求确认，最终完成项目开发，优先级最高的服务最先交付。</p><p>特点:但由于并不是从系统整体角度规划各个模块，因此不利于块划分难点在于如何将客户需求划分为多个增量。与原型不用的是增量型的每一次增量版本都可作为独立可操作的作品，而原型的构造一般是为了演示。</p><p>喷泉模型:是一种以用户需求为动力，以对象作为驱动的模型，适合于面向对象的开发方法。使开发过程具有迭代性和无间隙性。</p><p>基于构件的开发模型CBSD：利用预先包装的构件来构造应用系统。构件可以是组织内部开发的构件，也可以是商品化成品软件构件。特点是增强了复用性，在系统开发过程中，会构建一个构件库，供其他系统复用，因此可以提高可靠性，节省时间和成本。</p><p>形式化方法模型:建立在严格数学基础上的一种软件开发方法，主要活动是生成计算机软件形式化的数学规格说明。</p><h3 id="信息系统开发方法"><a href="#信息系统开发方法" class="headerlink" title="信息系统开发方法"></a>信息系统开发方法</h3><p>结构是指系统内各个组成要素之间的相互联系、相互作用的框架</p><p>结构化方法也称为生命周期法，是一种传统的信息系统开发方法，由结构化分析(Structured Analysis,SA)、结构化设计(Structured<br>Design,SD)和结构化程序设计(Structured Programming，SP)三部分有机组合而成，其精髓是自顶向下、逐步求精和模块化设计。</p><p>结构化方法的主要特点</p><ul><li>开发目标清晰化。结构化方法的系统开发遵循“用户第一”的原则。</li><li>开发工作阶段化。每个阶段工作完成后，要根据阶段工作目标和要求进行审查，这使各阶段工作有条不紊地进行，便于项目管理与控制。</li><li>开发文档规范化。结构化方法每个阶段工作完成后，要按照要求完成相应的文档，以保证各个工作阶段的衔接与系统维护工作的遍历。</li><li>设计方法结构化。在系统分析与设计时，从整体和全局考虑，自顶向下地分解;在系统实现时，根据设计的要求，先编写各个具体的功能模块，然后自底向上逐步实现整个系统。</li></ul><p>结构化方法的不足和局限</p><ul><li>(1)开发周期长:按顺序经历各个阶段，直到实施阶段结束后，用户才能使用系统。</li><li>(2)难以适应需求变化不适用于需求不明确或经常变更的项目。</li><li>(3)很少考虑数据结构:结构化方法是一种面向过程，面向数据流的开发方法，很少考虑数据结构。</li></ul><p>结构化方法常用工具：结构化方法一般利用图形表达用户需求，常用工具有数据流图、数据字典、结构化语言、判定表以及判定树等</p><p>面向对象(0bject-0riented，OO)<br>方法认为，客观世界是由各种对象组成的，任何事物都是对象，每一个对象都有自己的运动规律和内部状态，都属于某个对象类，是该对象类的一个元素。复杂的对象可由相对简单的各种对象以某种方式而构成，不同对象的组合及相互作用就构成了系统。</p><p>面向对象方法的特点</p><ul><li>(1)使用00方法构造的系统具有更好的复用性，其关键在于建立一个全面，合理、统一的模型(用例模型和分析模型)</li><li>(2)00方法也划分阶段，但其中的系统分析、系统设计和系统实现三个阶段之间已经没有“缝隙”。也就是说，这三个阶段的界限变得不明确，某项工作既可以在前一个阶段完成，也可以在后一个阶段完成;前一个阶段工作做得不够细，在后一个阶段可以补充。</li><li>(3)面向对象方法可以普遍适用于各类信息系统的开发</li></ul><p>面向对象方法的不足之处在大型项目的开发上具有一定的局限性必须依靠一定的面向对象技术支持，不能涉足系统分析以前的开发环节。</p><p>当前，一些大型信息系统的开发，通常是将结构化方法和00方法结合起来首先，使用结构化方法进行自顶向下的整体划分;然后，自底向上地采用00方法进行开发。因此，结构化方法和OO方法仍是两种在系统开发领域中相互依存的、不可替代的方法。</p><p>原型化方法也称为快速原型法，或者简称为原型法。它是一种根据用户初步需求，利用系统开发工具，快速地建立一个系统模型展示给用户，在此基础上与用户交流，最终实现用户需求的信息系统快速开发的方法。</p><p>按是否实现功能分类:分为水平原型(行为原型，功能的导航)、垂直原型(结构化原型，实现了部分功能)。</p><p>按最终结果分类:分为抛弃式原型、演化式原型</p><p>原型法的特点：原型法可以使系统开发的周期缩短、成本和风险降低、速度加快，获得较高的综合开发效益。</p><p>原型法是以用户为中心来开发系统的，用户参与的程度大大提高，开发的系统符合用户的需求，因而增加了用户的满意度，提高了系统开发的成功率。由于用户参与了系统开发的全过程，对系统的功能和结构容易理解和接受，有利于系统的移交，有利于系统的运行与维护。</p><p>原型法的不足之处</p><p>开发的环境要求高。管理水平要求高</p><p>由以上的分析可以看出，原型法的优点主要在于能更有效地确认用户需求。从直观上来看，原型法适用于那些需求不明确的系统开发。事实上，对于分析层面难度大、技术层面难度不大的系统，适合于原型法开发。</p><p>从严格意义上来说，目前的原型法不是一种独立的系统开发方法，而只是一种开发思想，它只支持在系统开发早期阶段快速生成系统的原型，没有规定在原型构建过程中必须使用哪种方法。因此，它不是完整意义上的方法论体系。这就注定了原型法必须与其他信息系统开发方法结合使用。</p><p>敏捷开发是一种以人为核心、迭代、循序渐进的开发方法，相对于传统软件开发方法的“非敏捷”，更强调程序员团队与业务专家之间的紧密协作、面对面的沟通(<br>认为比书面的文档更有效)、频繁交付新的软件版本、紧凑而自我组织型的团队、能够很好地适应需求变化的代码编写和团队组织方法，也更注重软件开发中人的作用。</p><p>敏捷软件开发宣言:</p><ul><li>1.个体和交互胜过过程和工具</li><li>2.可以工作的软件胜过面面俱到的文档</li><li>3.客户合作胜过合同谈判</li><li>4.响应变化胜过遵循计划</li></ul><p>结对编程:一个程序员开发，另一个程序在一旁观察审查代码，能够有效的提高代码质量，在开发同时对代码进行初步审查，共同对代码负责。</p><p>自适应开发:强调开发方法的适应性(Adaptive)。不象其他方法那样有很多具体的实践做法，它更侧重为软件的重要性提供最根本的基础，并从更高的组织和管理层次来阐述开发方法为什么要具备适应性。</p><p>水晶方法:每一个不同的项目都需要一套不同的策略、约定和方法论。</p><p>特性驱动开发:是一套针对中小型软件开发项目的开发模式。是一个型驱动的快速迭代开发过程，它强调的是简化、实用、易于被开发团队接受，适用于需求经常变动的项目。</p><p>极限编程XP:核心是沟通、简明、反馈和勇气。因为知道计划永远赶不上变化，XP无需开发人员在软件开始初期做出很多的文档。XP提倡测试先行，为了将以后出现bug的几率降到最低。</p><p>并列争球法SCRUM:是一种迭代的增量化过程，把每段时间(30天)一次的迭代称为一个“冲刺”，并按需求的优先级别来实现产品，多个自组织和自治的小组并行地递增实现产品。</p><p>统一过程(RUP)</p><p>提供了在开发组织中分派任务和责任的纪律化方法。”它的目标是在可预见的日程和预算前提下，确保满足最终用户需求的高质量产品。</p><p>3个显著特点:用例驱动、以架构为中心、迭代和增量</p><p>4个流程:初始阶段、细化阶段、构建阶段和交付阶段。每个阶段结束时都要安排一次技术评审，以确定这个阶段的目标是否已经达到。</p><p>适用:一个通用过程框架，可以用于种类广泛的软件系统、不同的应用领域不同的组织类型、不同性能水平和不同的项目规模。</p><h3 id="软件产品线"><a href="#软件产品线" class="headerlink" title="软件产品线"></a>软件产品线</h3><p>软件产品线是一个产品集合，这些产品共享一个公共的、可管理的特征集，这个特征集能满足特定领域的特定需求。软件产品线是一个十分适合专业的开发组织的软件开发方法，能有效地提高软件生产率和质量，缩短开发时间，降低总开发成本。核心资源:<br>包括所有产品所共用的软件架构，通用的构件、文档等。产品集合:产品线中的各种产品。</p><h3 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h3><p>软件复用是将已有软件的各种有关知识用于建立新的软件，以缩减软件开发和维护的花费。软件复用是提高软件生产力和质量的一种重要技术。早期的软件复用主要是代码级复用，被复用的知识专指程序，后来扩大到包括领域知识、开发经验、设计决定、体系结构、需求、设计、代码和文档等一切有关方面</p><p>逆向工程:<br>软件的逆向工程是分析程序，力图在比源代码更高抽象层次上建立程序的表示过程，逆向工程是设计的恢复过程。逆向工程的四个级别:<br>实现级:包括程序的抽象语法树、符号表、过程的设计表示。结构级:<br>包括反映程序分量之间相互依赖关系的信息，例如调用图、结构图、程序和数据结构。功能级:<br>包括反映程序段功能及程序段之间关系的信息，例如数据和控制流模型领域级:包括反映程序分量或程序诸实体与应用领域概念之间对应关系的信息，例如E-R模型。</p><p>其中，领域级抽象级别最高，完备性最低，实现级抽象级别最低，完备性最高</p><p>与逆向工程相关的概念有重构、设计恢复、再工程和正向工程。</p><ul><li>(1)重构是指在同一抽象级别上转换系统描述形式。</li><li>(2)设计恢复是指借助工具从已有程序中抽象出有关数据设计、总体结构设计和过程设计等方面的信息。</li><li>(3)<br>再工程是指在逆向工程所获得信息的基础上，修改或重构已有的系统，产生系统的一个新版本。再工程是对现有系统的重新开发过程，包括逆向工程、新需求的考虑过程和正向工程三个步骤。它不仅能从已存在的程序中重新获得设计信息，而且还能使用这些信息来重构现有系统，以改进它的综合质量。在利用再工程重构现有系统的同时，一般会增加新的需求，包括增加新的功能和改善系统的性能。</li><li>(4)正向工程是指不仅从现有系统中恢复设计信息，而且使用该信息去改变或重构现有系统，以改善其整体质量。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第十二章-系统规划</title>
    <link href="/2024/04/10/system_analyst12/"/>
    <url>/2024/04/10/system_analyst12/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·系统规划</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>上午选择题，下午论述题，还有可能考论文。挺重要的。</p><h3 id="系统规划步骤"><a href="#系统规划步骤" class="headerlink" title="系统规划步骤"></a>系统规划步骤</h3><ul><li>(1)对现有系统进行初步调查。根据企业战略和发展目标，从类似企业和本企业内部收集各种信息，站在管理层的高度观察企业的现状，分析现有系统的运行状况。</li><li>(2)分析和确定系统目标。系统目标应包括服务的质量和范围、政策、组织和人员等，”它不仅包括信息系统的目标，还要反映整个企业的目标，</li><li>(3)分析子系统的组成和基本功能。自顶向下对系统进行划分，并且详细说明各个子系统应该实现的功能。</li><li>(4)拟定系统的实施方案。可以对子系统的优先级进行设定，以便确定子系统的开发顺序。</li><li>(5)进行系统的可行性研究，编写可行性研究报告，召开可行性论证会</li><li>(6)制订系统建设方案。对可行性研究报告中提出的各项技术指标进行分析比较，落实各项假设的前提条件，制订系统建设方案，并根据该方案及其实施计划编写成系统设计任务书。系统设计任务书经上级主管部门批准后，正式作为系统建设的依据。</li></ul><h3 id="项目机会选择"><a href="#项目机会选择" class="headerlink" title="项目机会选择"></a>项目机会选择</h3><ul><li>(1)项目的立项目标和动机。进行基础研究;进行应用开发;提供技术服务产品的使用者。</li><li>(2)项目立项的价值判断。</li><li>(3)项目的选择和确定。选择有核心价值的项目;评估所选择的项目;项目优先级排序;评估项目的多种实施方式;平衡地选择合适的方案。</li><li>(4)初步调查。<ul><li>目标:掌握用户的概况，从整体上了解企业信息系统建设的现状，对用户提出的各种问题和初始需求进行识别，明确系统的初步目标，为可行性研究提供工作基础。</li><li>方式:最佳方式是与企业高层管理人员座谈，通过座谈了解企业高层对信息系统所设定的目标和系统边界，计划的资金投入和对工期的要求。</li><li>内容:初步需求分析，企业基本状况，管理方式和基础数据管理状况，现有系统状况。</li></ul></li><li>(5)可行性分析</li></ul><h3 id="可行性分析"><a href="#可行性分析" class="headerlink" title="可行性分析"></a>可行性分析</h3><p>可行性是指在企业当前的条件下，是否有必要建设新系统，以及建设新系统的工作是否具备必要的条件。也就是说，可行性包括必要性和可能性。</p><ul><li>复查系统目标和规模</li><li>分析现有系统</li><li>导出新系统的高层逻辑模型</li><li>用户复核</li><li>提出并评价解决方案</li><li>确定最终推荐的解决方案</li><li>草拟开发计划</li><li>编制和提交可行性分析报告</li></ul><p>在信息系统建设项目中，可行性研究通常从经济可行性、技术可行性、法律可行性和用户使用可行性四个方面来进行分析，其中经济可行性通常被认为是项目的底线。</p><p>经济可行性:<br>也称为投资收益分析或成本效益分析，主要评估项目的建设成本运行成本和项目建成后可能的经济收益。◆要注意的是，在系统开发初期，由于用户需求和候选系统方案还没有确定，成本不可能得到准确的估算。因此，此时的经济可行性分析只能大致估算系统的成本和收益，判断信息系统的建设是否值得。</p><p>技术可行性:<br>也称为技术风险分析，研究的对象是信息系统需要实现的功能和性能，以及技术能力约束。技术可行性主要通过考虑以下问题来进行论证:</p><ul><li>(1)技术:现有的技术能力和信息技术的发展现状是否足以支持系统目标的实现</li><li>(2)资源:现有的资源(例如，掌握技术的员工、企业的技术积累、构件库、软硬件条件等)是否足以支持项目的实施。</li><li>(3)目标:<br>由于在可行性研究阶段，项目的目标是比较模糊的，因此技术可行性最好与项目功能、性能和约束的定义同时进行。在可行性研究阶段，调整项目目标和选择可行的技术体系都是可以的，而一旦项目进入开发阶段，任何调整都意味着更多的开销。</li></ul><p>需要特别指出的是，技术可行性绝不仅仅是论证在技术手段上是否可实现，实际上包含了在当前资源条件下的技术可行性。</p><p>法律可行性:也称为社会可行性，具有比较广泛的内容，它需要从政策、法律、道德、制度等社会因素来论证信息系统建设的现实性。</p><p>用户使用可行性:也称为执行可行性，是从信息系统用户的角度来评估系统的可行性，包括企业的行政管理和工作制度、使用人员的素质和培训要求等可以细分为管理可行性和运行可行性。</p><ul><li>(1)<br>管理可行性。管理可行性是指从企业管理上分析系统建设可行性。主管领导不支持的项目一般会失败，中高层管理人员的抵触情绪很大，就有必要等一等，先积极做好思想工作，创造条件。另外，还要考虑管理方法是否科学，相应的管理制度改革的时机是否成熟，规章制度是否齐全等。</li><li>(2)运行可行性。运行可行性也称为操作可行性，是指分析和测定信息系统在(2)<br>确定环境中能够有效工作，并被用户方便使用的程度和能力。例如，ERP系统建成后的数据采集和数据质量问题，企业工作人员没有足够的IT技能等。</li></ul><h3 id="成本效益分析"><a href="#成本效益分析" class="headerlink" title="成本效益分析"></a>成本效益分析</h3><p>成本按照投资时间分类:</p><ul><li>(1)基础建设投资。例如，房屋和设施、办公设备、平台软件、必须的工具软件等购置成本。基础建设投资既可以是一次性投资，也可以是分期付款。</li><li>(2)其他一次性投资。例如，研究咨询成本、调研费、管理成本、培训费、差旅费等，以及其他一次性杂费。</li><li>(3)其他非一次性投资。主要是指系统的运行与维护成本。例如，设备租金和定期维护成本、定期消耗品支出、通信费、、人员工资与奖金、房屋租金、公共设施维护等，以及其他经常性的支出项目，</li></ul><p>按照成本性态分类:</p><ul><li>(1)固定成本。固定成本是指其总额在一定期间和一定业务量范围内，不受业务量变动的影响而保持固定不变的成本。例如，管理人员的工资、办公费、固定资产折旧费、员工培训费等。</li><li>(2)变动成本。变动成本也称为可变成本，是指在一定时期和一定业务量范围内其总额随着业务量的变动而成正比例变动的成本。例如，直接材料费、产品包装费、外包费用、开发奖金等。</li><li>(3)混合成本。混合成本就是混合了固定成本和变动成本的性质的成本。例，如水电费、电话费等。这些成本通常有一个基数，超过这个基数就会随业务量的增大而增大。</li></ul><p>按计入方式分类:</p><ul><li>(1)直接成本:与产品生产工艺直接有关的成本，，如原料、主要材料、外购半成品、生产工人工资、机器设备折旧等。</li><li>(2)间接成本:与产品生产工艺没有直接关系的成本，如机物料消耗、辅助工人和车间管理人员工资、车间房屋折旧等。<br>沉没成本:指以往发生的，但与当前决策无关的费用。</li></ul><p>收益分类</p><ul><li>(1)有形收益也称为经济收益，可以用货币的时间价值、投资回收期、投资回收率等指标进行度量。</li><li>(2)无形收益也称为不可定量的收益，主要是从性质上、心理上进行衡量，很难直接进行量上的比较。</li></ul><h3 id="盈亏平衡点"><a href="#盈亏平衡点" class="headerlink" title="盈亏平衡点"></a>盈亏平衡点</h3><p>利润&#x3D;销售额-成本&#x3D;销售额-(固定成本+可变成本)</p><p>当利润&gt;0，即公司挣钱，当利润&lt;<br>0，即公司亏本，当利润&#x3D;0时，就是盈亏平衡点，此时不亏不赚，公式如下:</p><p>盈亏平衡点销售额&#x3D;总固定成本+总可变成本&#x3D;总固定成本+[可变成本占销售额的比例*盈亏平衡点销售额</p><p>注意:可变成本和销售收入成正比。</p><h3 id="净现值计算"><a href="#净现值计算" class="headerlink" title="净现值计算"></a>净现值计算</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第十章-企业信息化战略与实施</title>
    <link href="/2024/04/09/system_analyst10/"/>
    <url>/2024/04/09/system_analyst10/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·企业信息化战略与实施</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>上午选择题，下午论述题，还有可能考论文。挺重要的。</p><h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><p>信息是客观事物状态和运动特征的一种普遍形式，客观世界中大量地存在产生和传递着以这些方式表示出来的各种各样的信息。</p><p>控制论创始人维纳认为:信息就是信息，既不是物质也不是能量</p><p>香农是信息论的奠基者，提出信息是“用以消除随机不确定性的东西’，确定了信息量的单位为比特(bit)</p><p>信息具有价值，而价值的大小决定于信息的质量，这就要求信息满足一定的质量属性，包括:</p><ul><li>精确性，对事物状态描述的精准程度</li><li>完整性，对事物状态描述的全面程度，完整信息应包括所有重要事实。</li><li>可靠性。指信息的来源、采集方法、传输过程是可以信任的，符合预期。</li><li>及时性指获得信息的时刻与事件发生时刻的间隔长短。昨天的天气信息不论怎样精确、完整，对指导明天的穿衣并无帮助，从这个角度出发，这个信<br>息的价值为零</li><li>经济性，指信息获取、传输带来的成本在可以接受的范围之内。</li><li>可验证性，指信息的主要质量属性可以被证实或者证伪的程度。</li><li>安全性，指在信息的生命周期中，信息可以被非授权访问的可能性，可能性越低，安全性越高。</li></ul><h3 id="信息系统"><a href="#信息系统" class="headerlink" title="信息系统"></a>信息系统</h3><p>信息系统的组成部件包括硬件、软件、数据库、网络、存储设备、感知设备外设、人员以及把数据处理成信息的规程等。</p><ul><li>硬件:由执行输入、处理和输出行为的计算机设备组成。</li><li>软件:由管理计算机运行的程序构成。</li><li>数据库:是经过机构化、规范化组织后的事实和信息的集合。数据库是信息系统中最有价值和最重要的一部分。</li></ul><h3 id="信息技术发展趋势"><a href="#信息技术发展趋势" class="headerlink" title="信息技术发展趋势"></a>信息技术发展趋势</h3><p>我国在“十三五”规划纲要中，将培育人工智能、移动智能终端、第五代移动通信(5G)、先进传感器等作为新一代信息技术产业创新重点发展，拓展新兴产业发展空间。</p><p>当前，信息技术发展的总趋势是从典型的技术驱动发展模式向应用驱动与技术驱动相结合的模式转变，信息技术发展趋势和新技术应用主要包括以下几个方面:</p><ul><li>高速度大容量。</li><li>集成化和平台化。</li><li>智能化</li><li>虚拟计算。</li><li>通信技术。</li><li>遥感和传感技术。</li><li>移动智能终端。</li><li>以人为本。</li><li>信息安全。</li></ul><p>工业化与信息化“两化融合”的含义:</p><ul><li>一是信息化与工业化发展战略的融合，即信息化发展战略与工业化发展战略要协调一致，信息化发展模式与工业化发展模式要高度匹配，信息化规划与工业化发展规划、计划要密切配合;</li><li>二是指信息资源与材料、能源等工业资源的融合;</li><li>三是指虚拟经济与工业实体经济融合;</li><li>四是指信息技术与工业技术、IT设备与工业装备的融合。</li></ul><p>互联网+是两化融合的升级，是互联网+各种传统行业</p><h3 id="国家信息化体系六要素"><a href="#国家信息化体系六要素" class="headerlink" title="国家信息化体系六要素"></a>国家信息化体系六要素</h3><ul><li>信息技术应用::是信息化体系六要素中的<strong>龙头</strong>，化建设的主阵地，集中体现了国家信息化建设的需求与利益:</li><li>信息资源:其开发利用是国家信息化的<strong>核心</strong>任务，是国家信息化建设取得实效的关键，也是我国信息化的薄弱环节;</li><li>信息网络:是信息资源开发利用和信息技术应用的基础，是信息传输、交换、共享的必要<strong>手段</strong></li><li>信息技术和产业:是我国进行信息化建设的<strong>基础</strong></li><li>信息化人才:是国家信息化成功之<strong>本</strong>，对其他各要素的发展速度和质量起着决定性的影响，是信息化建设的关键;</li><li>信息化政策法规和标准规范:用于规范和协调信息化体系六要素之间关系，是国家信息化快速、持续、有序、健康发展的根本<strong>保障</strong></li><li>助记:上鹰，下鸡，左人，右龟，中间织张网</li></ul><h3 id="电子政务"><a href="#电子政务" class="headerlink" title="电子政务"></a>电子政务</h3><p>喜欢考个选择题，也不一定考。别搞错就行了。</p><ul><li>政府对政府G2G:政府之间上级对下级，</li><li>政府对企业G2B:企业到政府办事，</li><li>政府对公众G2C:公众对政府信息的查询。</li><li>政府对公务员G2E:政府内部工作人员自动化办公，是其他模式的基础。</li></ul><h3 id="信息化战略体系"><a href="#信息化战略体系" class="headerlink" title="信息化战略体系"></a>信息化战略体系</h3><p>企业战略规划利用机会和威胁评价现在和未来的环境，用优势和劣势评价企业现状，进而选择和确定企业的总体和长远目标，制定和抉择实现目标的行动方案。</p><p>信息系统战略规划关注如何通过信息系统来支撑业务流程的运作，进而实现企业的关键业务目标，其重点在于对信息系统远景、组成架构、各部分逻辑关系进行规划。</p><p><img src="/../images/img_3.png" alt="img_3.png"></p><p>信息技术战略规划:通常简称为IT战略规划，是在信息系统规划的基础上，对支撑信息系统运行的硬件、软件、支撑环境等进行具体的规划，它更关心技术层面的问题。</p><p>信息资源规划是在以上规划的基础上，为开展具体的信息化建设项目而进行的数据需求分析、信息资源标准建立、信息资源整合工作。</p><p>系统规划:<br>单个项目的立项分析，是信息系统生命周期的第一个阶段，期任务是对企业的环境、目标及现有系统的状况进行初步调查，根据企业目标和发展战略，确定信息系统的发展战略，对建设新系统的需求做出分析和预测，同时考虑建设新系统所受的各种约束，在研究建设新系统的必要性和可能性。</p><h3 id="信息系统战略规划"><a href="#信息系统战略规划" class="headerlink" title="信息系统战略规划"></a>信息系统战略规划</h3><p>可以分为三个阶段</p><ul><li><p>第一阶段：以数据处理为核心、围绕职能部门需求</p><ul><li>企业系统规划法(BSP) – CU矩阵</li><li>关键成功因素法(CSF)</li><li>战略集合转化法(SST)</li></ul></li><li><p>第二阶段：以企业内部MIS为核心、围绕企业整体需求</p><ul><li>战略数据规划法(SDP)  – 企业模型建立、主题数据库</li><li>信息工程法(IE)     – 信息战略规划、业务领域分析系统设计、系统构建</li><li>战略栅格法(SG)</li></ul></li><li><p>第三阶段：综合考虑企业内外环境、以集成为核心，围绕企业战略需求</p><ul><li>价值链分析法(VCA)</li><li>战略一致性模型(SAM)</li></ul></li><li><p>第一阶段:以数据处理为核心，围绕职能部门需求</p><ul><li>企业系统规划法BSP:<br>自上而下地识别企业目标、企业过程和数据，然后对数据进行分析，自下而上地设计信息系统。重视数据的创建和使用，以数据的创建和使用归类，提供一个信息系统规划，建立CU矩阵(<br>创建使用矩阵)<ul><li>关键成功因素法CSF:重视关键因素，每个企业在某阶段都有关键因素，抓住关键信息。</li><li>战略集合转化法SST:将企业的战略信息(环境、目标等)收集起来，当成一个“信息集合”，并且转换为信息系统的战略信息，全方位的注重企业的战略信息。</li></ul></li></ul></li><li><p>第二阶段:以企业内部MIS(管理信息系统)为核心，围绕企业整体需求</p><ul><li>战略数据规划法SDP:强调建立企业模型和主题数据库(重点和关键，是面向业务主题，整个企业的)，数据类基本上是稳定的，而业务和流程是多变的。</li><li>信息工程法IE:<br>第一次提出以工程的方法来建立信息系统，信息工程是面向企业计算机信息系统建设，以数据为中心的开发方法。信息工程方法认为，与企业的信息系统密切相关的三要素是:<br>企业的各种信息、企业的业务过程和企业采用的信息技术。信息工程自上而下地将整个信息系统的开发过程划分为四个实施阶段，分别是信息规划阶段、业务领域分析阶段、系统设计阶段和系统构建阶段。</li><li>战略栅格法SG:建立-一个2*2的矩阵，每个矩阵元素代表过程对数据类的创建和使用等。栅格即划分矩阵</li></ul></li><li><p>第三阶段:综合考虑企业内外环境，以集成为核心，围绕企业战略需求</p><ul><li>价值链分析法VCA:将所有对企业有影响的信息作为一个个活动，其都有可能对企业造成增值，分析其中对企业增值最大的信息。</li><li>战略一致性模型SAM:保证企业战略和信息系统战略要一致.</li></ul></li></ul><h3 id="企业信息化"><a href="#企业信息化" class="headerlink" title="企业信息化"></a>企业信息化</h3><p>企业信息化程度是国家信息化建设的基础和关键，企业信息化就是企业利用现代信息技术，通过信息资源的深入开发和广泛利用，实现企业生产过程的自动化管理方式的网络化、决策支持的智能化和商务运营的电子化，不断提高生产、经营、管理、决策的效率和水平，进而提高企业经济效益和企业竞争力的过程。企业信息化方法主要包括业务流程重构、核心业务应用、信息系统建设、主题数据库、资源管理和人力资本投资方法</p><p>企业信息化一定要建立在企业战略规划基础之上，以企业战略规划为基础建立的企业管理模式是建立企业战略数据模型的依据。企业信息化就是技术和业务的融合。这个“融合”并不是简单地利用<br>信息系统对手工的作业流程进行自动化，而是需要从企业战略的层面、业务运作层面、管理运作层面这3个层面来实现。</p><p>企业信息化涉及到对企业管理理念的创新，管理科学的核心就是应用科学的方法实施管理，按照市场发展的要求，对企业现有的管理流程重新整合，从作为管理核心的财务、资金管理，向技术、物资、人力资源的管理，并延伸到企业技术创新、工艺设计、产品设计、生产制造过程的管理，进而扩展到客户关系管理、供应链的管理乃至发展电子商务，形成企业内部向外部扩散的全方位管理。</p><h3 id="企业资源计划ERP"><a href="#企业资源计划ERP" class="headerlink" title="企业资源计划ERP"></a>企业资源计划ERP</h3><p>企业资源计划ERP:由MRP(物料需求计划)逐步演变并结合计算机技术的快速发展而来，大致经历了以下四个阶段:</p><ul><li>(1)基本MRP:<br>聚焦于相关物资需求问题，根据生产计划、物料清单、库存信息制定出相关的物资需求时间表，从而及时采购所需物资，降低库存。不足:<br>没有考虑企业现有生产能力和采购约束。</li><li>(2)闭环MRP:在基本MRP基础上，增加了生产能力计划、:<br>车间作业计划和采购作业计划，将整个生产管理过程纳入计划;并且在计划执行中根据反馈信息平衡和调整计划，使得生产的各个方面协调统一，形成一个环形回路。不足:<br>没有充分考虑资金流。</li><li>(3)MRPⅡ指的是制造资源计划，将生产、财务、销售、工程技术和采购等各个子系统集成为一个一体化的系统。不足:主要侧重于企业内部人力、财务管理。</li><li>(4)ERP是一个以财务会计为核心的信息系统，把客户需求和企业内部的制造活动以及供应商的制造资源整合在一起，形成一个完整的供应链并对供应链上的所有环节进行有效管理。从而达到最佳资源组合，使企业利润最大化。</li></ul><p>ERP功能:</p><ul><li>(1)财会管理:会计核算、财务管理。</li><li>(2)生产控制管理:主生产计划、物料需求计划、能力需求计划、车间控制、制造标准。</li><li>(3)物流管理:销售管理、库存控制、采购管理。</li><li>(4)人力资源管理:人力资源规划的辅助决策、招聘管理、工资核算、工时管理、差旅核算。</li></ul><p>ERP特点:</p><ul><li>是统一的集成系统</li><li>是面向业务流程的系统</li><li>是模块化可配置的</li><li>是开放的系统。</li></ul><p>企业有三大资源:物流(物流管理)、资金流(财务管理)信息流(生产控制管理)现在一般认为人力资源(人力资源管理)是企业第四大资源。</p><p>企业的资源计划可从下面三点来理解:</p><ul><li>管理思想:ERP首先是一种管理思想，将企业资源分类管理，是管理思想的变革。</li><li>软件产品:其次，ERP是个软件产品，为企业用户提供一体化的解决方案。</li><li>管理系统:ERP最后是一个管理系统，存在众多的子系统，这些子系统有统一的规划，是互联互通的，便于事前事中监控。</li></ul><p>ERP的五个层次</p><ul><li>生产计划大纲是根据经营计划的生产目标制定的，是对企业经营计划的细化，用以描述企业在可用资源的条件下，在一定时期中的产量计划。</li><li>主生产计划是对企业生产计划大纲的细化，说明在一定时期内的如下计划:生产什么，生产多少和什么时候交货。</li><li>物料需求计划是对主生产计划的各个项目所需的全部制造件和全部采购件的网络支持计划和时间进度计划。</li><li>能力需求计划是对物料需求计划所需能力进行核算的一种计划管理方法。旨在通过分析比较MRP的需求和企业现有生产能力，及早发现能力的瓶所在。</li><li>车间作业计划是在MRP所产生的加工制造订单(即自制零部件生产计划)<br>的基础上，按照交货期的前后和生产优先级选择原则以及车间的生产资源情况(如设 备、人员、物料的可用性、加工能力的大小等)<br>，将零部件的生产计划以订单的形式下达给适当的车间。</li></ul><h3 id="客户关系管理CRM"><a href="#客户关系管理CRM" class="headerlink" title="客户关系管理CRM"></a>客户关系管理CRM</h3><p>客户关系管理CRM:以客户为中心，提高客户满意度、增加客户的忠诚度CRM是一个集成化的信息管理系统，它存储了企业现有和潜在客户的信息，并且对这些信息进行自动的处理从而产生更人性化的市场管理策略</p><p>CRM涵盖的要素主要有:</p><ul><li>第一，CRM以信息技术为手段，但是CRM绝不仅仅是某种信息技术的应用，它更是一种以客户为中心的商业策略，CRM注重的是与客户的交流，企业的经营是以客户为中心，而不是传统的以产品或以市场为中心。</li><li>第二，CRM在注重提高客户的满意度的同时，一定要把帮助企业提高获取利润的能力作为重要指标。</li><li>第三，CRM的实施要求企业对其业务功能进行重新设计，并对工作流程进行重组(BPR)，将业务的中心转移到客户，同时要针对不同的客户群体有重点地采取不同的策略</li></ul><p>CRM系统的主要模块包括销售自动化、营销自动化、客户服务与支持、商业智能。</p><p>CRM的功能</p><ul><li>客户服务:是CRM的关键内容，对客户提供的服务，可以提高客户忠诚度</li><li>市场营销:包括商机产生、商机获取和管理、商业活动管理和电话营销等;销售人员与潜在客户的互动行为、将潜在客户发展为真正客户并保持其忠诚度是使<br>企业赢利的核心因素。</li><li>共享的客户资料库:是企业的一种重要信息资源，将市场营销和客户服务连接起来。也是CRM的基础和依托。◆分析能力:<br>CRM的一个重要方面在于它具有使客户价值最大化的分析能力。对上述获取的资料库进行分析。</li><li>市场营销和客户服务是CRM的支柱性功能</li></ul><p>一个有效的CRM解决方案应该具备以下要素:</p><ul><li>畅通有效的客户交流渠道(触发中心)</li><li>对所获信息进行有效分析(挖掘中心)</li><li>CCRM必须能与ERP很好地集成</li></ul><p>CRM的实现过程</p><ul><li>客户服务与支持，即通过控制服务品质以赢得顾客的忠诚度，</li><li>客户群维系，即通过与顾客的交流实现新的销售。</li><li>商机管理，即利用数据库开展销售。</li></ul><h3 id="供应链管理SCM"><a href="#供应链管理SCM" class="headerlink" title="供应链管理SCM"></a>供应链管理SCM</h3><p>供应链管理SCM:<br>是一种集成的管理思想和方法，是在满足服务水平要求的同时，为了使系统成本达到最低而采用的将供应商、制造商、仓库和商店有效地结合成一体来生产商品，有效地控制和管理各种信息流、资金流和物流，并把正确数量的商品在正确的时间配送到正确的地点的一套管理方法。</p><ul><li>(1)以客户为中心。SCM追求的目标首先是满足客户的需求;衡量SCM绩效的最重要的指标就是客户满意度。</li><li>(2)集成化管理。SCM的本质在于集成化管理</li><li>(3)扩展性管理。现代的SCM使传统的企业向扩展性企业发展</li><li>(4)合作管理。SCM非常强调企业之间的合作，打破传统的封闭的经营意识通过供应链中各个节点企业之间建立起新型的合作关系。</li><li>(5)多层次管理。包括公司战略层次、战术层次和作业层次上的活动，主要目标是通过系统的观点，对多个职能和各个层次的供应商进行整合。</li></ul><p>供应链节点:供应商、制造商、分销商、零售商、仓库、配送中心、客户等</p><p>每个企业内部都有一条或者几条供应链，每个企业也都处于一条供应链的某个节点中，SCM要注意的就是供应网络的构造，处于供应链中的企业是利益共同体，如何实现协作运营。</p><p>SCM包括计划、采购、制造、配送、退货五大基本内容。</p><ul><li>计划:<br>这是SCM的策略部分，企业需要有一个策略来管理所有的资源，以满足客户对产品的需求。好的计划是建立一系列的方法监控供应链。采购:<br>选择能为企业提供产品和服务的供应商。</li><li>制造:安排生产、测试、打包和准备送货所需的活动，是供应链中测量内容最多的部分。</li><li>配送:即物流，是调整用户的订单收据、建立仓库网络、拍递送人员提货并送货、建立产品计价系统、接收付款。</li><li>退货:是供应链中的问题处理部分</li></ul><h3 id="决策支持系统DSS"><a href="#决策支持系统DSS" class="headerlink" title="决策支持系统DSS"></a>决策支持系统DSS</h3><p>帮助决策者提高决策水平和质量，起到辅助作用</p><p><img src="/../images/img_4.png" alt="img_4.png"></p><p>DSS系统由四个子系统组成:</p><ul><li>数据库子系统:建立与决策相关的信息;</li><li>推理部分:知识库，包含智能推理分析算法</li><li>模型库子系统:是最复杂的子系统，一系列应用场景模型，用户主要根据模型来决策;</li><li>用户接口子系统:是一个人机交互界面，完美的集合上述三个子系统，供用户使用。</li></ul><p>决策支持可以分为结构化决策半结构化决策和非结构化决策其中，结构化决策是指对某一决策过程的规则进行确定性描述与建模，以适当的算法产生决策方案，并能从多种方案中选择最优解;非结构化决策的决策过程复杂，不可能用确定的模型和语言描述其决策过程更无所谓最优解。</p><p>半结构化和非结构化决策一般用于企业的中、高级管理层。一般来说，决策往往不可能一次完成，而是一个迭代的过程</p><h3 id="知识管理"><a href="#知识管理" class="headerlink" title="知识管理"></a>知识管理</h3><p>明确知识和信息的区别，知识是由信息推导出来的，人类智慧和经验的集合。</p><p>显性知识:例如文档、资料、视频等能够看得见的知识。</p><p>隐性知识:存在于人脑海中的知识，包括人的记忆与经验技巧，理想抱负等。</p><p>知识管理应该探寻如何将隐性知识转化为显性知识，达到共享的目的，有如下三种工具可以实现:</p><ul><li>知识生成工具:获取知识的工具，包括知识获取、知识合成、知识创新</li><li>知识编码工具:如何表达知识的工具。</li><li>知识转移工具:知识需要传播，达到共享的目的，传播过程中会遇到困难和差异，包括时间差异、空间差异和社会差异。</li></ul><h3 id="企业门户"><a href="#企业门户" class="headerlink" title="企业门户"></a>企业门户</h3><p>企业网站:注重消息的单向传送展示，缺乏信息互动，是企业门户的雏形。</p><p>企业信息门户EIP:在互联网模式下，将企业的各种应用系统、数据资源和互联网资源统一集成在企业门户下，提供企业的产品和用户的信息，达到信息共享，使得企业相关的供应链、客户通过此门户获得所需的信息，快速了解企业文化。</p><p>企业知识门户EKP:企业网站的基础上增加知识性内容，企业员工可通过EKP了解今天企业所发生的事情，找到与自己相关的项目资源信息，建立了一个企业知识库，能够提高企业员工的工作效率。</p><p>企业应用门户EAP:对企业业务流程的集成，以业务流程和企业应用为核心把业务流程中功能不同的应用模块通过门户技术集成在一起，企业员工和合作伙伴可以通过EAP访问相应的应用系统，实现移动办公</p><p>企业通用门户:将上述四者有机的融合在一起</p><h3 id="企业应用"><a href="#企业应用" class="headerlink" title="企业应用"></a>企业应用</h3><p>企业应用集成EAI，可以适用于大多数要实施电子商务的企业，以及企业之间的应用集成。</p><ul><li>(1)表示集成:即界面集成，是最原始的集成，黑盒集成。将多个信息系统的界面集成在一起，统一入口，为用户提供一个看上去统一，但是由多个系统组成的应用系统的集成，例如桌面。</li><li>(2)数据集成:白盒集成，把不同来源、格式、特点性质的数据在逻辑上或者物理上有机的集中，从而为企业提供全面的数据共享。如数据仓库。</li><li>(3)控制集成(功能集成、应用集成):<br>黑盒集成，业务逻辑层次的集成，可以借助于远程过程调用或远程方法调用、面向消息的中间件等技术，将多个应用系统功能进行绑定，使之像一个实时运行的系统一样接受信息输入和产生数据输出，实现多个系统功能的叠加。如钉钉。</li><li>(4)业务流程集成:<br>即过程集成，最彻底的、综合的集成，这种集成超越了数据和系统，由一系列基于标准的、统一数据格式的工作流组成。当进行业务流程集成时，企业必须对各种业务信息的交换进行定义、授权和管理，以便于改进操作、减少成本、提高响应速度。<br>它包括应用集成、B2B集成、自动化业务流程管理、人工流程管理、企业门户以及对所有应用系统和流程的管理和监控等<br>如电子购物网站-第三方支付平台-银行-物流等流程集成</li></ul><p>应用集成数据交换方式</p><ul><li>共享数据库:在应用集成时，让多个应用系统通过直接共享数据库的方式来进行数据交换，实时性强，可以频繁交互，属于同步方式;但是安全性、并<br>发控制、死锁等问题突出。</li><li>消息传递:消息是软件对象之间进行交互和通信时所使用的一种数据结构可以独立于软件平台而存在，适用于数据量小、但要求频繁、立即、可靠、异步地数据交换场合。</li><li>文件传输:是指在进行数据交换时，直接将数据文件传送到相应位置，让目标系统直接读取数据，可以一次性传送大量信息，但不适合频繁进行数据传送适用于数据量大、交换频度小、即时性要求低的情况。</li></ul><p>企业集成平台集成平台是支持企业集成的支撑环境，包括硬件、软件、软件工具和系统，通过集成各种企业应用软件形成企业集成系统。由于硬件环境和应用软件的多样性，企业信息系统的功能和环境都非常复杂，因此，为了能够较好地满足企业的应用需求，作为企业集成系统支持环境的集成平台，其基本功能主要有:</p><ul><li>(1)通信服务 它提供分布环境下透明的同步&#x2F;异步通信服务功能，使用户和应用程序无需关心具体的操作系统和应用程序所处的网络物理位置，而以透明的函数调用或对象服务方式完成它们所需的通信服务要求。</li><li>(2)信息集成服务<br>它为应用提供透明的信息访问服务，通过实现异种数据库系统之间数据的交换、互操作、分布数据管理和共享信息模型定义(<br>或共享信息数据库的建立)，使集成平台上运行的应用、服务或用户端能够以一致的语义和接口实现对数据(<br>数据库、数据文件、应用交互信息)的访问与控制。</li><li>(3)应用集成服务 它通过高层应用编程接口来实现对相应应用程序的访问，这些高层应用编程接口包含在不同的适配器或代理中，它们被用来连接不同的应用程序。</li><li>(4)二次开发工具 是集成平台提供的一组帮助用户开发特定应用程序(如实现数据转换的适配器或应用 封装服务等)<br>的支持工具，其目的是简化用户在企业集成平台实施过程中(特定应用程序接口)的开发工作。</li><li>(5)平台运行管理工具 它是企业集成平台的运行管理和控制模块，负责企业集成平台系统的静态和动态配置、集成平台应用运行管理和维护、事件管理和出错管理等。</li></ul><p>企业信息集成分为企业内部的信息集成和外部的信息集成两个方面。</p><ul><li><p>1.按集成内容，企业内部的信息集成一般可分为以下四个方面:</p><ul><li>(1)技术平台的集成 系统底层的体系结构、软件、硬件以及异构网络的特殊需求首先必须得到集成。</li><li>(2)数据的集成 为了完成应用集成和业务流程集成，需要解决数据和数据库的集成问题。数据集成的目的是实现不同系统的数据交流与共享，是进行其他更进一步集成的基础。</li><li>(3)应用系统的集成是实现不同系统之间的互操作，使得不同应用系统之间能够实现数据和方法的共享。它为进一步的过程集成打下了基础。</li><li>(4)业务过程的集成 使得在不同应用系统中的流程能够无缝连接，实现流程的协调运作和流程信息的充分共享。</li></ul></li><li><p>2.企业外部的信息集成主要包括以下两个部分:</p><ul><li>(1)通过门户网站和互联网实现公众、社会团体、社会和客户的互动，实现企业内外部信息资源的有效交流和集成;</li><li>(2)通过与合作伙伴信息系统的对接，建立动态的企业联盟，发展基于竞争合作机制的虚拟企 业，重塑企业的战略模式和竞争优势。</li></ul></li></ul><h3 id="集成电子商务"><a href="#集成电子商务" class="headerlink" title="集成电子商务"></a>集成电子商务</h3><p>电子商务分三个方面:电子商情广告、电子选购和交易;电子交易凭证的交换、电子支付与结算;网上售后服务等。</p><p>参与电子商务的实体有四类:顾客(个人消费者或集团购买)、商户(包括销售商、制造商和储运商)、银行(包括发卡行和收单行)及认证中心。</p><p>按照交易对象，电子商务模式包括:</p><ul><li>(1)B2B模式，企业对企业。</li><li>(2)B2C模式，企业对消费者</li><li>(3)C2C，消费者对消费者。</li><li>(4)020即0nline To Offline，含义是线上购买线下的商品和服务，实体店提货或享受服务。</li></ul><p>电子商务的基础设施包括:网络基础设施、多媒体内容和网络出版的基础设施、报文和信息传播的基础设施、商业服务的基础设施。此外，技术标准，政策法律等是电子商务系统的重要保障和应用环境。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第九章-知识产权和标准化</title>
    <link href="/2024/04/09/system_analyst9/"/>
    <url>/2024/04/09/system_analyst9/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·知识产权和标准化</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>每年两分选择题，很简单</p><h3 id="知识产权概述"><a href="#知识产权概述" class="headerlink" title="知识产权概述"></a>知识产权概述</h3><p>知识产权是指公民、法人、非法人单位对自己的创造性智力成果和其他科技成果依法享有的民事权。是智力成果的创造人依法享有的权利和在生产经营活动中标记所有人依法所享有的权利的总称。包含著作权、专利权、商标权、商业秘密权、植物新品种权、集成电路布图设计权和地理标志权等</p><ul><li>无体性:知识产权的对象是没有具体形体，是智力创造成果，是一种抽象的财富。</li><li>专有性:指除权利人同意或法律规定外，权利人以外的任何人不得享有或使用该项权利。</li><li>地域性:指知识产权只在授予其权利的国家或确认其权利的国家产生，并且只能在该国范围内受法律保护，而其他国家则不受保护。</li><li>时间性:仅在法律规定的期限内受到保护，一旦超过期限，权利自行消灭相关知识产品即成为整个社会的共同财富，为全人类所共同使用。</li></ul><h3 id="保护期限"><a href="#保护期限" class="headerlink" title="保护期限"></a>保护期限</h3><p>知识产权具有地域限制，保护期限等</p><p>喜欢考年限</p><h3 id="知识产权人的确定"><a href="#知识产权人的确定" class="headerlink" title="知识产权人的确定"></a>知识产权人的确定</h3><p>喜欢考</p><h3 id="侵权判断"><a href="#侵权判断" class="headerlink" title="侵权判断"></a>侵权判断</h3><p>喜欢考</p><h3 id="标准划分"><a href="#标准划分" class="headerlink" title="标准划分"></a>标准划分</h3><p>不喜欢考</p><p>根据标准制定机构和适用范围的不同，可分为国际标准、国家标准、行业标准、区域&#x2F;地方标准和企业标准</p><ul><li>(1)国际标准:是指国际标准化组织(ISO)、国际电工委员会(IEC)和国际电信联盟(ITU)<br>制定的标准以及国际标准化组织确认并公布的其他国际组织制定的标准。国际标准在世界范围内统一使用,提供各国参若。</li><li>(2)国家标准:<br>是指由国家标准化主管机构制定或批准发布，在全国范围内统一适用的标准。比如:<br>GB.中华人民共和国国家标准;强制性国家标准代号为GB，推荐性国家标准代号为GB&#x2F;T，国家标准指导性文件代号为GB&#x2F;Z，国军标代号为GJB。ANSl(<br>American National Standards Institute)..美国国家标准协会标准;</li><li>(3)行业标准:<br>是由某个行业机构、团体等制定的，适用于某个特定行业业务领域的标准。比如:<br>IEEE-美国电气电子工程师学会标准;GA—公共安全标准;YD—通信行业标准;</li><li>(4)区域&#x2F;地方标准:<br>是由某一区域&#x2F;地方内的标准化主管机构制定、批准发布的，适用于某个特定区域&#x2F;地方的标准。比如:EN—欧洲标准;</li><li>(5)企业标准:<br>是企业范围内根据需要协调、统一的技术要求、管理要求和工作要求所制定的标准，适用于本企业内部的标准。一般以Q字开头，比如Q&#x2F;320101RER007–2012，其中320101代表地区，RER代表企业名称代号，001代表该企业该标准的序号，2012代表年号。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第八章-网络安全</title>
    <link href="/2024/04/08/system_analyst8/"/>
    <url>/2024/04/08/system_analyst8/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·网络安全</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>考过一次国密，很简单应该是，但是我不会，没看过。</p><h3 id="信息安全和信息系统安全"><a href="#信息安全和信息系统安全" class="headerlink" title="信息安全和信息系统安全"></a>信息安全和信息系统安全</h3><p><strong>信息安全系统的体系架构</strong></p><ul><li>X轴是“安全机制”，为提供某些安全服务，利用各种安全技术和技巧，所形成的一个较为完善的机构体系。</li><li>Y轴是“OSI网络参考模型’</li><li>Z轴是“安全服务”。就是从网络中的各个层次提供给信息应用系统所需要的安全服务支持。</li></ul><p>由X、Y、Z三个轴形成的信息安全系统三维空间就是信息系统的“安全空间”</p><p>随着网络逐层扩展，这个空间不仅范围逐步加大，安全的内涵也就更丰富，达到具有认证、权限、完整、加密和不可否认五大要素，也叫作“安全空间”的五大属性。</p><p><strong>信息安全含义及属性</strong>:保护信息的保密性、完整性、可用性，另外也包括其他属性，如:真实性、可核查性、不可抵赖性和可靠性。</p><ul><li>保密性:信息不被泄漏给未授权的个人、实体和过程或不被其使用的特性包括:(1)最小授权原则(2)防暴露(3)信息加密(4)物理保密</li><li>完整性:信息未经授权不能改变的特性。影响完整性的主要因素有设备故障误码、人为攻击和计算机病毒等。保证完整性的方法包括:<ul><li>协议:通过安全协议检测出被删除、失效、被修改的字段。</li><li>纠错编码方法:利用校验码完成检错和纠错功能。</li><li>密码校验和方法。</li><li>数字签名:能识别出发送方来源。</li><li>公证:请求系统管理或中介机构证明信息的真实性</li></ul></li><li>可用性:需要时，授权实体可以访问和使用的特性。一般用系统正常使用时间和整个工作时间之比来度量。</li></ul><p>其他属性:</p><ul><li>真实性:指对信息的来源进行判断，，能对伪造来源的信息予以鉴别。</li><li>可核查性:系统实体的行为可以被独一无二的追溯到该实体的特性，这个特性就是要求该实体对其行为负责，为探测和调查安全违规事件提供了可能性。</li><li>不可抵赖性:是指建立有效的责任机制，防止用户否认其行为，这一点在电子商务中是极其重要的。</li><li>可靠性:系统在规定的时间和给定的条件下，无故障地完成规定功能的概率</li></ul><p><strong>安全需求</strong></p><p>可划分为物理线路安全、网络安全、系统安全和应用安全;</p><p>从各级安全需求字面上也可以理解:</p><ul><li>物理线路就是物理设备、物理环境</li><li>网络安全指网络上的攻击、入侵</li><li>系统安全指的是操作系统漏洞、补丁等;</li><li>应用安全就是上层的应用软件，包括数据库软件</li></ul><h3 id="信息安全技术"><a href="#信息安全技术" class="headerlink" title="信息安全技术"></a>信息安全技术</h3><p><strong>加密技术</strong><br>一个密码系统，通常简称为密码体制(Cryptosystem)，由五部分组成:</p><ul><li>明文空间M，它是全体明文的集合</li><li>密文空间C，它是全体密文的集合。</li><li>密钥空间K，它是全体密钥的集合。其中每一个密钥K均由加密密钥Ke 和解密密钥Kd组成，即K&#x3D;&lt;Ke，Kd&gt;</li><li>加密算法E，它是一组由M 至C的加密变换。</li><li>解密算法D，它是一组由C到M 的解密变换。</li></ul><p>对于明文空间M 中的每一个明文M，加密算法E在密钥Ke的控制下将明文M 加密成密文C:C&#x3D;E(M,Ke)</p><p>而解密算法D 在密钥Kd的控制下将密文C解密出同一明文M:M&#x3D;D (C, Kd )&#x3D;D (E (M, Ke),Kd)</p><p><strong>对称加密技术</strong><br>数据的加密和解密的密钥(密码)是相同的，属于不公开密钥加密算法。其缺点是加密强度不高(因为密钥位数少)且密钥分发困难(<br>因为密钥还需要传输给接收方，也要考虑保密性等问题)。优点是加密速度快，适合加密大数据</p><p>常见的对称密钥加密算法如下:</p><ul><li>DES:替换+移位、56位密钥、64位数据块、速度快，密钥易产生</li><li>3DES:三重DES，两个56位密钥K1、K2。<ul><li>加密:K1加密-&gt;K2解密-&gt;K1加密</li><li>解密:K1解密-&gt;K2加密-&gt;K1解密</li></ul></li><li>AES:是美国联邦政府采用的一种区块加密标准，这个标准用来替代原先的DES。对其的要求是“至少像3DES一样安全”</li><li>RC-5:RSA数据安全公司的很多产品都使用了RC-5。</li><li>IDEA:128位密钥，64位数据块，比DES的加密性好，对计算机功能要求相对低</li></ul><p><strong>非对称加密技术</strong></p><p>数据的加密和解密的密钥是不同的，分为公钥和私钥。是公开密钥加密算法其缺点是加密速度慢。优点是安全性高，不容易破解。</p><p>非对称技术的原理是:发送者发送数据时，使用接收者的公钥作加密密钥私钥作解密密钥，这样只有接收者才能解密密文得到明文。安全性更高，因为无需传输密钥。但无法保证完整性。</p><p>常见的非对称加密算法如下:RSA:512位(或1024位)密钥，计算机量极大，难破解。Elgamal、ECC(椭圆曲线算法)、背包算法、Rabin、D-H等。</p><p>相比较可知，对称加密算法密钥一般只有56位，因此加密过程简单，适合加密大数据，也因此加密强度不高;而非对称加密算法密钥有1024位，相应的解密计算量庞大，难以破解，却不适合加密大数据，一般用来加密对称算法的密钥，这样，就将两个技术组合使用了，这也是数字信封的原理:</p><p>数字信封原理:信是对称加密的密钥，数字信封就是对此密钥进行非对称加密，具体过程:<br>发送方将数据用对称密钥加密传输，而将对称密钥用接收方公钥加密发送给对方。接收方收到数字信封，用自己的私钥解密信封，取出对称密钥解密得原文。</p><p>数字信封运用了对称加密技术和非对称加密技术，本质是使用对称密钥加密数据，非对称密钥加密对称密钥，解决了对称密钥的传输问题。</p><p><strong>信息摘要</strong></p><p>所谓信息摘要，就是一段数据的特征信息，当数据发生了改变，信息摘要也会发生改变，发送方会将数据和信息摘要一起传给接收方，<br>接收方会根据接收到的数据重新生成一个信息摘要，若此摘要和接收到的摘要相同，则说明数据正确。信息摘要是由哈希函数生成的，</p><p>信息摘要的特点:不算数据多长，都会产生固定长度的信息摘要;任何不同的输入数据，都会产生不同的信息摘要;单向性，即只能由数据生成信息摘要不能由信息摘要还原数据，</p><p>信息摘要算法:MD5(产生128位的输出)、SHA-1(安全散列算法，产生160位的输出，安全性更高)。</p><p><strong>数字签名</strong>:唯一标识一个发送方:<br>发送者发送数据时，使用发送者的私钥进行加密，接收者收到数据后，只能使用发送者的公钥进行解密这样就能唯一确定发送方，这也是数字签名的过程但无法保证机密性。</p><p>公钥基础设施PKI:是以不对称密钥加密技术为基础，以数据机密性、完整性身份认证和行为不可抵赖性为安全目的，来实施和提供安全服务的具有普适性的安全基础设施。</p><ul><li><p>(1)数字证书:<br>一个数据结构，是一种由一个可信任的权威机构签署的信息集合。在不同的应用中有不同的证书。如X.509证书必须包含下列信息:(1)<br>版本号(2)序列号(3)签名算法标识符(4)认证机构(5)有效期限(6)主题信息(7)认证机构的数字签名(8)<br>公钥信息。公钥证书主要用于确保公钥及其与用户绑定关系的安全。这个公钥就是证书所标识的那个主体的合法的公钥。任何一个用户只要知道签证机构的公钥，就能检查对证书的签名的合法性。如果检查正确，那么用户就可以相信那个证书所携带的公钥是真实的，而且这个公钥就是证书所标识的那个主体的合法的公钥例如驾照62</p></li><li><p>(2)签证机构CA:负责签发证书、管理和撤销证书。是所有注册用户所信赖的权威机构，CA在给用户签发证书时要加上自己的数字签名，以保证证书信息的真实性。任何机构可以用CA的公钥来验证该证书的合法性</p></li></ul><h3 id="网络安全技术"><a href="#网络安全技术" class="headerlink" title="网络安全技术"></a>网络安全技术</h3><p><strong>防火墙</strong>是在内部网络和外部因特网之间增加的一道安全防护措施，分为网络级防火墙和应用级防火墙。</p><p>网络级防火墙层次低，但是效率高，因为其使用包过滤和状态监测手段，般只检验网络包外在(起始地址、状态)<br>属性是否异常，若异常，则过滤掉不与内网通信，因此对应用和用户是透明的。</p><p>但是这样的问题是，如果遇到伪装的危险数据包就没办法过滤，此时，就要依靠应用级防火墙，层次高，效率低，因为应用级防火墙会将网络包拆开，具体检查里面的数据是否有问题，会消耗大量时间，造成效率低下，但是安全强度高。</p><p><strong>入侵检测系统</strong>IDS防火墙技术主要是分隔来自外网的威胁，却对来自内网的直接攻击无能为力此时就要用到入侵检测IDS技术，位于防火墙之后的第二道屏障，作为防火墙技术的补充。</p><p>原理:<br>监控当前系统&#x2F;用户行为，使用入侵检测分析引擎进行分析，这里包含一个知识库系统，囊括了历史行为、特定行为模式等操作，将当前行为和知识库进行匹配，就能检测出当前行为是否是入侵行为，如果是入侵，则记录证据并上报给系统和防火墙，交由它们处理。</p><p>不同于防火墙，IDS入侵检测系统是一个监听设备，没有跨接在任何链路上无须网络流量流经它便可以工作。因此，对IDS的部署，唯一的要求是:<br>IDS应当挂接在所有所关注流量都必须流经的链路上。因此，IDS在交换式网络中的位置一般选择在:(1)尽可能靠近攻击源(2)尽可能靠近受保护资源</p><p><strong>入侵防御系统IPS</strong>:IDS和防火墙技术都是在入侵行为已经发生后所做的检测和分析，而IPS是能够提前发现入侵行为，在其还没有进入安全网络之前就防御。在安全网络之前的链路上挂载入侵防御系统IPS，可以实时检测入侵行为，并直<br>接进行阻断，这是与IDS的区别，要注意。</p><p><strong>杀毒软件</strong>用于检测和解决计算机病毒，与防火墙和IDS要区分，计算机病毒要靠杀毒软件防火墙是处理网络上的非法攻击。</p><p><strong>蜜罐系统</strong>:<br>伪造一个蜜罐网络引诱黑客攻击蜜罐网络被攻击不影响安全网络，并且可以借此了解黑客攻击的手段和原理，从而对安全系统进行升级和优化。</p><p><strong>网络攻击与威胁</strong></p><p>被动攻击</p><ul><li>窃听</li><li>业务流攻击</li><li>非法登录</li></ul><p>主动攻击</p><ul><li>假冒身份</li><li>抵赖</li><li>旁路控制</li><li>重放攻击</li><li>DDOS</li></ul><p><strong>计算机病毒和木马</strong>（之前挺喜欢考一下，送分）</p><p>病毒:编制或者在计算机程序中插入的破坏计算机功能或者破坏数据，影响计算机使用并且能够自我复制的一组计算机指令或者程序代码，</p><p>木马:是一种后门程序，常被黑客用作控制远程计算机的工具，隐藏在被控制电脑上的一个小程序监控电脑一切操作并盗取信息。</p><p>代表性病毒实例</p><ul><li>蠕虫病毒(感染EXE文件):熊猫烧香，罗密欧与朱丽叶，恶鹰，尼姆达，冲击波，欢乐时光。</li><li>木马:QQ消息尾巴木马，特洛伊木马，X底。</li><li>宏病毒(感染word、excel等文件中的宏变量):美丽沙，台湾1号。</li><li>CIH病毒:史上唯一破坏硬件的病毒。</li><li>红色代码:蠕虫病毒+木马。</li></ul><h3 id="网络安全协议"><a href="#网络安全协议" class="headerlink" title="网络安全协议"></a>网络安全协议</h3><p>物理层主要使用物理手段，隔离、屏蔽物理设备等，其它层都是靠协议来保证传输的安全。</p><p>物理链路层：L2TP、PPTP、链路加密</p><p>网络层：防火墙、IPSec</p><p>传输层：TLS、SET</p><p>应用层：PGP、HTTPS</p><p>SSL：横跨传输层、会话层、表示层、应用层</p><p>SSL协议:安全套接字协议，被设计为加强Web安全传输(HTTP&#x2F;HTTPS&#x2F;)的协议安全性高，和HTTP结合之后，形成HTTPS安全协议，端口号为443.</p><p>SSH协议:安全外壳协议，被设计为加强Telnet&#x2F;FTP安全的传输协议</p><p>SET协议:安全电子交易协议主要应用于B2C模式(电子商务)<br>中保障支付信SET协议本身比较复杂，设计比较严格，安全性高，它能保证信息息的安全性。传输的机密性、真实性、完整性和不可否认性。SET协议是PKI框架下的一个典型实现，同时也在不断升级和完善，如SET2.0将支持借记卡电子交易。</p><p>Kerberos协议:<br>是一种网络身份认证协议，该协议的基础是基于信任第三方它提供了在开放型网络中进行身份认证的方法，认证实体可以是用户也可以是用户服务。这种认证不依赖宿主机的操作系统或计算机的P地址，不需要保证网络上所有计算机的物理安全性，并且假定数据包在传输中可被随机窃取和篡改。</p><p>PGP协议:使用RSA公钥证书进行身份认证，使用IDEA(128位密钥)进行数据加密，使用MD5进行数据完整性验证。发送方A有三个密钥:<br>A的私钥、B的公钥、A生成的一次性对称密钥;接收方B有两个密钥:B的私钥、A的公钥。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第七章-多媒体技术</title>
    <link href="/2024/04/06/system_analyst7/"/>
    <url>/2024/04/06/system_analyst7/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·多媒体技术</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>不太重要</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="媒体分类"><a href="#媒体分类" class="headerlink" title="媒体分类"></a>媒体分类</h4><p>媒体可分为下面五类:</p><ul><li>感觉媒体:直接作用于人的感觉器官，使人产生直接感觉的媒体。常见的感觉媒体分为文本、图形、图像、动画、音频和视频。</li><li>表示媒体:指传输感觉媒体的中介媒体，即用于数据交换的编码。如:如文本编码、声音编码和图像编码等。</li><li>表现媒体:进行信息输入和信息输出的媒体。也即输入输出设备，如:键盘、鼠标和麦克风;显示器、打印机和音响等。</li><li>存储媒体:存储表示媒体的物理介质。如磁盘、光盘和内存等。</li><li>传输媒体:传输表示媒体的物理介质。如电缆、光纤、双绞线等，</li></ul><h4 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h4><p>以声音的带宽来衡量声音的大小，单位是HZ。<br>声音是一种模拟信号，要对其进行处理，就必须将其转化为数字信号。转换过程有三个步骤:<br>采样、量化、编码。</p><p>人耳能听到的音频信号的频率范围是20Hz~20KHz。</p><p>声音的采样频率一般为最高频率的两倍，才能保证不失真。</p><p>声音文件格式:.wav、.snd、.au、.aif、.voc、.mp3、.ra、.mid等。</p><h4 id="图像-颜色"><a href="#图像-颜色" class="headerlink" title="图像&amp;颜色"></a>图像&amp;颜色</h4><p>颜色三要素</p><ul><li>亮度:彩色明暗深浅程度。</li><li>色调(红、绿):颜色的类别。</li><li>饱和度:某一颜色的深浅程度。<br>彩色空间<br>即设备显示图片所使用的色彩空间，普通的电脑显示器是RGB色彩空间，除了红、绿、蓝三原色外，其他颜色都是通过这三原色叠加形成的;</li></ul><p>电视中使用yUV色彩空间，主要是为了兼容黑白电视，使用的是亮度原理，即调不同的亮度显示不同的颜色;</p><p>CMY(CMYK)，印刷书籍时采用的色彩空间，这个采用的是和RGB相反的减法原理，浅蓝、粉红、黄三原色的印刷颜料实际上是吸收除了本身色彩之外的其他颜色的，因此，印刷出来才是这些颜色;</p><p>HSV(HSB)，艺术家彩色空间，是从艺术的角度划分的。</p><h4 id="多媒体计算"><a href="#多媒体计算" class="headerlink" title="多媒体计算"></a>多媒体计算</h4><p>图像容量计算：像素<em>位数 或者 像素</em>色数</p><p>音频容量计算：采样频率(Hz)x量化&#x2F;采样位数(位)x声道数:8</p><p>视频容量计算：每帧图像容量(Byte)x每秒帧数x时间+音频容量x时间</p><h3 id="多媒体标准"><a href="#多媒体标准" class="headerlink" title="多媒体标准"></a>多媒体标准</h3><h4 id="JPEG-MPEG"><a href="#JPEG-MPEG" class="headerlink" title="JPEG&amp;MPEG"></a>JPEG&amp;MPEG</h4><p><img src="/../images/img_2.png" alt="img_2.png"></p><h4 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h4><p>能够压缩的前提是有冗余，几余分类如下:</p><ul><li>空间冗余(几何冗余):<br>对于一副画面中的同样的信息，在压缩时，不需要重复存储，只记录一次信息内容，而后记录这些相同信息出现的位置即可。</li><li>时间冗余:<br>在压缩视频时，对于一帧和下一帧，只记录变化的部分，不变的部分不记录。</li><li>视觉冗余:<br>例如JPEG标准，就是有损压缩，对于人眼关注不到的细节就不存储，找到一个临界值，达到视觉欺骗的效果。</li><li>信息熵冗余:不同的信息编码的冗余效率是不同的，可以通过改变信息编码来改变冗余。</li><li>结构冗余:对于结构相同的模块，只记录一次。和空间几余有点类似。</li><li>知识冗余:从知识角度来说，有些可以根据常识推导出来的东西，可以不用记录。</li></ul><p>有损压缩和无损压缩</p><ul><li>压缩后能够还原的编码方式称为无损压缩(熵编码法):例如WINRAR压缩等，最终可以还原出原数据，最经典的就是哈夫曼编码，是无损压缩。</li><li>压缩后无法还原的编码方式就是有损压缩(熵压缩法):例如JPEG格式的图片。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第六章-计算机网络</title>
    <link href="/2024/04/06/system_analyst6/"/>
    <url>/2024/04/06/system_analyst6/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·计算机网络</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="网络功能和分类"><a href="#网络功能和分类" class="headerlink" title="网络功能和分类"></a>网络功能和分类</h3><p>计算机网络是计算机技术与通信技术相结合的产物，它实现了远程通信、远程信息处理和资源共享。</p><p>计算机网络的功能:数据通信、资源共享、负载均衡、高可靠性。</p><p>计算机网络按分布范围：这个按照书上的划分较为落后了，就不记录了。</p><p>计算机网络拓扑结构</p><ul><li>总线型(利用率低、干扰大、价格低)</li><li>星型(交换机形成的局域网、中央单元负荷大)</li><li>环型(流动方向固定、效率低扩充难)</li><li>树型(总线型的扩充、分级结构)</li><li>分布式(任意节点连接管理难成本高)</li></ul><h3 id="0SI七层模型"><a href="#0SI七层模型" class="headerlink" title="0SI七层模型"></a>0SI七层模型</h3><table><thead><tr><th>层</th><th>功能</th><th>单位</th><th>协议</th><th>设备</th></tr></thead><tbody><tr><td>物理层</td><td>在链路上透明地传输位。需要完成的工作包括线路配置、确定数据传输模式、确定信号形式、对信号进行编码、连接传输介质。为此定义了建立、维护和拆除物理链路所具备的机械特性、电气特性、功能特性以及规程特性。</td><td>比特</td><td>EIA&#x2F;TIA RS-232、RS-449、V.35、RJ-45、FDDI</td><td>中继器、集线器</td></tr><tr><td>数据链路层</td><td>把不可靠的信道变为可靠的信道。为此将比特组成帧，在链路上提供点到点的帧传输，并进行差错控制、流量控制等。</td><td>帧</td><td>SDLC、HDLC、LAPB、PPP,STP、帧中继等、IEEE802、ATM</td><td>交换器、网桥</td></tr><tr><td>网络层</td><td>在源节点-目的节点之间进行路由选择、拥塞控制、顺序控制、传送包，保证报文的正确性。网络层控制着通信子网的运行，因而它又称为通信子网层</td><td>IP分组</td><td>IP、ICMP、IGMP、ARP 、RARP</td><td>路由器</td></tr><tr><td>传输层</td><td>提供端-端间可靠的、透明的数据传输，保证报文顺序的正确性、数据的完整性。</td><td>报文段</td><td>TCP、UDP</td><td>网关</td></tr><tr><td>会话层</td><td>建立通信进程的逻辑名字与物理名字之间的联系，提供进程之间建立、管理和终止会话的方法，处理同步与恢复问题。</td><td></td><td>RPC、SQL、NFS</td><td>网关</td></tr><tr><td>表示层</td><td>实现数据转换(包括格式转换、压缩、加密等)，提供标准的应用接口、公用的通信服务、公共数据表示方法。</td><td></td><td>DES、JPEG、ASCII、GIF、MPEG</td><td>网关</td></tr><tr><td>应用层</td><td>对用户不透明的提供各种服务，如E-mail。</td><td>数据</td><td>Telnet、FTP、HTTP、SMTPPOP3、DNS、DHCP等</td><td>网关</td></tr></tbody></table><p>以太网规范IEEE 802.3 是重要的局域网协议，包括:</p><table><thead><tr><th>IEEE 802.3</th><th>标准以太网</th><th>1OMb&#x2F;s</th><th>传输介质为细同轴电缆</th></tr></thead><tbody><tr><td>IEEE 802.3u</td><td>快速以太网</td><td>1O0Mb&#x2F;s</td><td>双绞线</td></tr><tr><td>IEEE 802.3z</td><td>千兆以太网</td><td>1O00Mb&#x2F;s</td><td>光纤或双绞线</td></tr><tr><td>IEEE 802.3ae</td><td>万兆以太网</td><td>10Gb&#x2F;s</td><td>光纤</td></tr></tbody></table><p>无线局域网WLAN技术标准:IEEE 802.11</p><p>广域网协议包括: PPP 点对点协议、ISDN 综合业务数字网、xDSL(DSL数字用户线路的统称HDSL、SDSL、MVL、ADSL)、DDN<br>数字专线、x.25、FR帧中继、ATM异步传输模式。</p><h3 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP&#x2F;IP协议"></a>TCP&#x2F;IP协议</h3><p>语义部分规定所要完网络协议三要素:语法、语义、时序。其中语法部分规定传输数据的格式，成的功能，时序部分规定执行各种操作的条件、顺序关系等。</p><p>网络层协议:</p><ul><li>IP:网络层最重要的核心协议，在源地址和目的地址之间传送数据报，无连接、不可靠。</li><li>ICMP:因特网控制报文协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。</li><li>ARP和RARP:地址解析协议，ARP是将IP地址转换为物理地址，RARP是将物理地址转换为IP地址。</li><li>IGMP:网络组管理协议，允许因特网中的计算机参加多播，是计算机用做向相邻多目路由器报告多目组成员的协议，支持组播。</li></ul><p>传输层协议:</p><ul><li>TCP:整个TCP&#x2F;IP协议族中最重要的协议之一，在IP协议提供的不可靠数据数据基础上，采用了重发技术，为应用程序提供了一个可靠的、面向连接的、全双工的数据传输服务。一般用于传输数据量比较少，且对可靠性要求高的场合。</li><li>UDP:是一种不可靠、无连接的协议，有助于提高传输速率，一般用于传输数据量大，对可靠性要求不高，但要求速度快的场合。</li></ul><p>应用层协议:基于TCP的FTP、HTTP等都是可靠传输。基于UDP的DHCP、DNS等都是不可靠传输。</p><ul><li>FTP:可靠的文件传输协议，用于因特网上的控制文件的双向传输。</li><li>HTTP:超文本传输协议，用于从wW服务器传输超文本到本地浏览器的传输协议。使用SSL加密后的安全网页协议为HTTPS。</li><li>SMTP和POP3:简单邮件传输协议，是一组用于由源地址到目的地址传送邮件的规则，邮件报文采用ASCII格式表示。</li><li>Telnet:远程连接协议，是因特网远程登录服务的标准协议和主要方式◆TFTP:不可靠的、开销不大的小文件传输协议。</li><li>SNMP:简单网络管理协议，由一组网络管理的标准协议，包含一个应用层协议、数据库模型和一组资源对象。该协议能够支持网络管理系统，泳衣监测连接到网络上的设备是否有任何引起管理师行关注的情况。</li><li>DHCP:动态主机配置协议，基于UDP，基于C&#x2F;S模型，为主机动态分配IP地址，有三种方式:固定分配、动态分配、自动分配。</li><li>DNS:域名解析协议，通过域名解析出IP地址。</li></ul><p>协议端口号对照表:</p><ul><li>20-文件传输协议(数据)</li><li>21-文件传输协议(控制)</li><li>23-Telnet 终端仿真协议</li><li>67-DHCP(服务端)</li><li>25-SMTP简单邮件发送协议</li><li>53-域名服务器(DNS)</li><li>80-超文本传输协议(HTTP)</li><li>110-POP3服务器(邮箱接收服务器)</li><li>69-简单文件传输协议(TFTP)</li><li>68-DHCP(客户端)</li><li>161-SNMP(轮询)</li><li>162-SNMP(陷阱)</li></ul><h3 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h3><p>双绞线:将多根铜线按规则缠绕在一起，能够减少干扰;分为无屏蔽双绞线UTP和屏蔽双绞线STP，都是由一对铜线簇组成。也即我们常说的网线;双绞线的传输距离在100m以内。</p><p>无屏蔽双绞线UTP:价格低，安装简单，但可靠性相对较低，分为CAT3(3类UTP，速率为CAT4(4类UTP，与3类差不多，无应用)、CAT5(<br>5类UTP，速率为100Mbps，用于快速10Mbps)以太网)、CAT5E(超5类UTP，速率为1000Mbps)、CAT6(6类UTP，用来替代CAT5E，速率也是1000Mbps)</p><p>屏蔽双绞线STP:比之UTP增加了一层屏蔽层，可以有效的提高可靠性，但对应的价格高，安装麻烦，一般用于对传输可靠性要求很高的场合。</p><p>网线有如下两种安装标准:都是八根不同颜色的网线，按照不同的顺序排序，插入水晶头中区分在第1236四根网线的位置不同。</p><ul><li>T568A</li><li>T568B</li></ul><p>光纤:由纤芯和包层组成，传输的光信号在纤芯中传输，然而从PC端出来的信号都是电信号，要经过光纤传输的话，就必须将电信号转换为光信号。</p><p>多模光纤MMF:<br>纤芯半径较大，因此可以同时传输多种不同的信号，光信号在光纤中以全反射的形式传输，采用发光二极管LED为光源，成本低，但是传输的效率和可靠性都较低，适合于短距离传输其传输距离与传输速率相关，速率为100Mbps时为2KM，速率为1000Mbps时为550m。</p><p>单模光纤SMF:纤芯半径很小，一般只能传输一种信号，采用激光二极管LD作为光源，并且只支持激光信号的传播，同样是以全反射形式传播，只不过反射角很大，看起来像一条直线，成本高，但是传输距离远，可靠性高。传输距离可达5KM。</p><p>无线信道:分为无线电波和红外光波</p><h3 id="通信方式和交换方式IP地址"><a href="#通信方式和交换方式IP地址" class="headerlink" title="通信方式和交换方式IP地址"></a>通信方式和交换方式IP地址</h3><p>通信方向:数据通信是指发送方发送数据到接收方，这个传输过程可以分类如下:</p><ul><li>单工:只能由设备A发给设备B，即数据流只能单向流动。</li><li>半双工:设备A和设备B可以互相通信，但是同一时刻数据流只能单向流动。</li><li>全双工:设备A和设备B在任意时刻都能互相通信。</li></ul><p>同步方式：</p><p>异步传输:发送方每发送一个字符，需要约定一个起始位和停止位插入到字符的起始和结尾处这样当接收方接收到该字符时能够识别，但是这样会造成资源浪费，传输效率降低。当发送方要发送数据时，先发送一个同步帧，接收方收。</p><p>同步传输:以数据块为单位进行传输，到后做好接收准备，开始接收数据块，结束后又会有结束帧确认，这样一次传输一个数据块，效率高。</p><p>串行传输:只有一根数据线，数据只能1bit挨个排队传送，适合低速设备、远距离的传送，一般用于广域网中。</p><p>并行传输:有多根数据线，可以同时传输多个bit数据，适合高速设备的传送，常用语计算机内部各硬件模块之间。</p><p>交换方式</p><p>电路交换:通信一方进行呼叫，另一方接收后，在二者之间会建立一个专用电路，特点为面向连接、实时性高、链路利用率低，一般用于语音视频通信。</p><p>报文交换:以报文为单位，存储转发模式，接收到数据后先存储，进行差错校验，没有错误则转发，有错误则丢弃，因此会有延时，但可靠性高，是面向无连接的。</p><p>分组交换:以分组为单位，也是存储转发模式，因为分组的长度比报文小，所以时延小于报文交换，又可分为三种方式:</p><ul><li>数据报:是现在主流的交换方式，各个分组携带地址信息，自由的选择不同的路由路径传送到接收方，接收方接收到分组后再根据地址信息重新组装成原数据，是面向无连接的，但是不可靠的</li><li>虚电路:发送方发送一个分组，接收方收到后二者之间就建立了一个虚拟的通信线路，二者之间的分组数据交互都通过这条线路传送，在空闲的时候这条线路也可以传输其他数据，是面向连接的，可靠的。</li><li>信元交换:异步传输模式ATM采用的交换方式，本质是按照虚电路方式进行转发，只不过信元是固定长度的分组，共53B，其中5B为头部，48B为数据域，也是面向连接的，可靠的。</li></ul><h3 id="IPv6-v4"><a href="#IPv6-v4" class="headerlink" title="IPv6&amp;v4"></a>IPv6&amp;v4</h3><p>IP地址表示</p><ul><li>分类编址</li><li>无分类编址</li><li>特殊IP地址</li><li>子网划分</li><li>v4-v6过渡技术</li></ul><h3 id="网络规划和设计"><a href="#网络规划和设计" class="headerlink" title="网络规划和设计"></a>网络规划和设计</h3><p>三层模型将网络划分为核心层、汇聚层和接入层，每一层都有着特定的作用。</p><ul><li>核心层提供不同区域之间的最佳路由和高速数据传送;汇聚层将网络业务连接到接入层，并且实施与安全、流量、负载和路由相关的策略:</li><li>接入层为用户提供了在本地网段访问应用系统的能力，还要解决相邻用户之间的互访需要。</li><li>接入层要负责一些用户信息(例如用户IP地址、MAC地址和访问 日志等)的收集工作和用户管理功能(包括认证和计费等)。</li></ul><p>建筑物综合布线系统PDS:</p><ol><li>工作区子系统:实现工作区终端设备到水平子系统的信息插座之间的互联。</li><li>水平布线子系统:实现信息插座和管理子系统之间的连接。</li><li>设备间子系统:实现中央主配线架与各种不同设备之间的连接。</li><li>垂直干线子系统:实现各楼层设备间子系统之间的互连。</li><li>管理子系统:连接各楼层水平布线子系统和垂直干缆线，负责连接控制其他子系统为连接其他子系统提供连接手段。</li><li>建筑群子系统:各个建筑物通信系统之间的互联，</li></ol><h3 id="网络存储技术"><a href="#网络存储技术" class="headerlink" title="网络存储技术"></a>网络存储技术</h3><p>廉价磁盘冗余阵列</p><p>RAID0、RAID1、RAID2、RAID3、RAID4、RAID5、RAID01、RAID10、RAID6</p><p>直接附加存储(DAS):是指将存储设备通过SCSI接口直接连接到一台服务器上使用，其本身是硬件的堆叠，存储操作依赖于服务器，不带有任何存储操作系统。<br>在问题:在传递距离、连接数量、传输速率等方面都受到限制。容量难以扩展升级;数据处理和传输能力降低;服务器异常会波及存储器。</p><p>网络附加存储(NAS):<br>通过网络接口与网络直接相连，由用户通过网络访问，有独立的存储系统如下图所示。NAS存储设备类似于一个专用的文件服务器，去掉了通用服务器大多数计算功能，而仅仅提供文件系统功能。以数据为中心，将存储设备与服务器分离，其存储设备在功能上完全独立于网络中的主服务器。客户机与存储设备之间的数据访问不再需要文件服务器的干预，同时它允许客户机与存储设备之间进行直接的数据访问，所以不仅响应速度快，而且数据传输速率也很高。<br>NAS的性能特点是进行小文件级的共享存取;支持即插即用;可以很经济的解决存储容量不足的问题，但难以获得满意的性能。</p><p>存储区域网 (SAN):SAN是通过专用交换机将磁盘阵列与服务器连接起来的高速专用子网。它没有采用文件共享存取方式，而是采用块(<br>block)级别存储。SAN是通过专用高速网将一个或多个网络存储设备和服务器连接起来的专用存储系统，其最大特点是将存储设备从传统的以太网中分离了出来，成为独立的存储区域网络SAN<br>的系统结构。根据数据传输过程采用的协议，其技术划分为FC<br>SAN(光纤通道)、IPSAN(IP网络)和IBSAN(无线带宽)技术。</p><h3 id="其他考点补充"><a href="#其他考点补充" class="headerlink" title="其他考点补充"></a>其他考点补充</h3><p>网络地址翻译NAT:<br>公司内有很多电脑，在公司局域网内可以互联通信，但是要访问外部因特网时，只提供固定的少量IP地址能够访问因特网，将公司所有电脑这个大的地址集合映射到能够访问因特网的少量IP地址集合的过程就称为NAT。很明显，使用了NAT后，一个公司只有少量固定IP地址可以上网，大大减少了IP地址的使用量。</p><p>默认网关:<br>一台主机可以有多个网关。默认网关的意思是一台主机如果找不到可用的网关，就把数据包发给默认指定的网关，由这个网关来处理数据包。现在主机使用的网关，一般指的是默认网关。默认网关的IP地址必须与本机IP地址在同一个网段内，即同网络号。</p><p>虚拟局域网VLAN:<br>是一组逻辑上的设备和用户，这些设备和用户并不受物理位置的限制，可以根据功能、部门及应用等因素将它们组织起来，相互之间的通信就好像它们在同一个网段中一样。VLAN工作在0SI参考模型的第2层和第3层，一个VLAN就是一个广播域，VLAN之间的通信是通过第3层的路由器来完成的。</p><p>与传统的局域网技术相比较，VLAN技术更加灵活，它具有以下优点: 网络设备的移动、添加和修改的管理开销减少;可以控制广播活动;可提高网络的安全性。</p><p>虚拟专用网VPN:<br>是在公用网络上建立专用网络的技术。其之所以称为虚拟网，主要是因为整个VPN网络的任意两个节点之间的连接并没有传统专网所需的端到端的物理链路，而是架构在公用网络服务商所提供的网络平台，如Internet、ATM(<br>异步传输模式〉、FrameRelay(帧中继)等之上的逻辑网络，用户数据在逻辑链路中传输。</p><p>PPP:安全认证介绍:PPP的NCP可以承载多种协议的三层数据包。PPP使用LCP控制多种链路的参数(建立、认证、压缩、回拨)。</p><p>PPP的认证类型:<br>pap认证是通过二次握手建立认证(明文不加密)，chap挑战握手认证协议，通过三次握手建立认证(密文采用MD5加密)<br>。PPP的双向验证，采用的是chap的主验证风格。PPP的加固验证，采用的是两种(pap，chap)验证同时使用</p><p>冲突域和广播域:路由器可以阻断广播域和冲突域，交换机只能阻断冲突域，因此一个路由器下可以划分多个广播域和多个冲突域；<br>一个交换机下整体是一个广播域，但可以划分多个冲突域;而物理层设备集线器下整体作为一个冲突域和一个广播域。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI 论文阅读</title>
    <link href="/2024/04/03/paper/"/>
    <url>/2024/04/03/paper/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>AI 论文收集</code>。</p><span id="more"></span><h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><p>在学习Ai的过程中，需要阅读大量的论文，我在此记录我所阅读过的关于AI的论文，如果您好更好的见解，欢迎到仓库的<a href="https://github.com/AllenDEricDAlexander/AllenDEricDAlexander.github.io/issues">Issue</a><br>提交，我会进行合并处理（署名为你的GitHub Name和主页）。</p><h3 id="论文推荐"><a href="#论文推荐" class="headerlink" title="论文推荐"></a>论文推荐</h3><h3 id="DL"><a href="#DL" class="headerlink" title="DL"></a>DL</h3><h4 id="Deep-learning"><a href="#Deep-learning" class="headerlink" title="Deep learning"></a>Deep learning</h4><p>doi:10.1038&#x2F;nature14539</p><p>这篇论文价值极高，论文最后一章关于深度学习未来的探讨，和当今的发展高度吻合，作为学术考古和初学者来说，相信可以带来很大的启发。</p><p>摘要：深度学习允许由多个处理层组成的计算模型学习具有多个抽象级别的数据表示。这些方法极大地提高了语音识别、视觉对象识别、对象检测和许多其他领域（如药物发现和基因组学）的技术水平。深度学习通过使用反向传播算法来指示机器应该如何改变其内部参数，从而发现大型数据集中复杂的结构，这些参数用于从前一层的表示计算每一层的表达。深度卷积网络在处理图像、视频、语音和音频方面取得了突破，而递归网络则在文本和语音等序列数据方面大放异彩。</p><ul><li>引言<ul><li>机器学习技术在现代社会中发挥着重要作用，涵盖了从网络搜索到社交网络内容过滤，再到电子商务网站的推荐等多个方面，越来越多地应用于消费类产品如相机和智能手机中。</li><li>传统的机器学习技术在处理原始数据方面存在局限性，需要经过精心设计的特征提取器将原始数据转换为适当的内部表示或特征向量，以便进行模式识别或分类。</li><li>表征学习是一组方法，允许机器使用原始数据并自动发现用于检测或分类的表示。深度学习是具有多层表示的表征学习方法，通过组合简单但非线性的模块，将每个层次的表示转换为更高、稍微抽象的层次。</li><li>深度学习在解决长期困扰人工智能社区的问题方面取得了重大进展，特别擅长发现高维数据中的复杂结构，可应用于科学、商业和政府等多个领域。</li><li>深度学习在图像识别、语音识别、药物分子活性预测、粒子加速器数据分析、大脑回路重建等多个领域取得了突破性成果，并在自然语言理解方面表现出极大的潜力，尤其在主题分类、情感分析、问答和语言翻译等任务上表现出色。</li><li>预计深度学习在未来会取得更多成功，因为它几乎不需要手工工程，能够轻松利用计算和数据量的增加，并且当前正在开发的新学习算法和架构将加速这一进展。</li></ul></li><li>监督学习<ul><li>监督学习使得在AI训练的过程中，实现了自学习。</li><li>简要介绍了一下训练方法和迭代过程及效果。</li></ul></li><li>反向传播算法<ul><li>反向传播（backpropagation）是一种计算多层模块权重相对于目标函数梯度的实用方法，其核心思想是利用导数的链式法则。</li><li>反向传播过程中的梯度下降训练过程中的问题。</li></ul></li><li>卷积神经网络<ul><li>卷积神经网络背后的四个关键思想利用了自然信号的特性：局部连接、共享权重、池化和多层次使用。前几个阶段由两种类型的层组成：卷积层和池化层。</li><li>ConvNets的成功得益于其对自然信号特性的深刻理解，并且通过构建层次化的特征表示来实现对复杂数据模态的高效处理和识别。</li></ul></li><li>基于深度卷积神经网络的图片理解<ul><li>介绍正则化在DL中的应用</li></ul></li><li>分布表示和语言模型<ul><li>学习分布式表示：这允许模型泛化到看不见的特征组合，从而获得更好的性能。层的组成：堆叠多层表示可以进行更强大的学习。</li><li>DL模型学习捕获语义特征的词向量。这些特征不是预定义的，而是由网络在训练期间发现的。相似的单词具有相似的矢量表示，从而可以进行泛化。</li></ul></li><li>循环神经网络<ul><li>循环神经网络是一种特殊的人工神经网络，能够处理序列化的输入数据。RNN<br>在处理序列数据时，会将历史信息存储在一个叫做“状态向量”的隐藏单元中。通过反向传播算法，我们可以训练 RNN<br>模型，使其能够预测序列中的下一个元素</li><li>由于梯度爆炸和消失问题，早期 RNN 模型的训练难度较大。近年来，随着 RNN 架构和训练方法的改进，RNN 模型在各种序列处理任务上取得了显著成效。</li></ul></li><li>深度学习的未来<ul><li>从91-98年的无监督学习开始，深度学习重新引起了人们对人工智能的兴趣，但后来纯粹的监督学习取得了更大的成功，导致了对无监督学习的忽视。</li><li>虽然本文没有专门讨论无监督学习，但我们预计在长期内，无监督学习会变得更加重要。人类和动物的学习很大程度上是无监督的：我们通过观察世界来发现其结构，而不是被告知每个对象的名称。</li><li>人类视觉是一种主动过程，使用小型、高分辨率的中央凹区和大型、低分辨率的周围区域以智能、任务特定的方式顺序采样视觉阵列。<br>我们预计未来视觉领域的进展将来自于端到端训练的系统，将卷积神经网络与循环神经网络相结合，并使用强化学习来决定注视点的位置。</li><li>结合深度学习和强化学习的系统处于初期阶段，但它们已经在分类任务上胜过了被动视觉系统，并在学习玩许多不同视频游戏方面取得了令人印象深刻的成果。</li><li>自然语言理解是另一个深度学习即将在未来几年产生巨大影响的领域。我们期望使用循环神经网络理解句子或整个文档的系统，在学习逐步关注一部分内容的策略时会变得更加优秀。</li><li>最终，人工智能领域的重大进展将通过将表示学习与复杂推理相结合的系统实现。尽管深度学习和简单推理长期以来一直用于语音和手写识别，但需要新的范例来取代基于规则的符号表达式操作，而是使用大型向量的操作。</li></ul></li></ul><h3 id="CV"><a href="#CV" class="headerlink" title="CV"></a>CV</h3><h3 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h3><h4 id="Efficient-Estimation-of-Word-Representations-in-Vector-Space"><a href="#Efficient-Estimation-of-Word-Representations-in-Vector-Space" class="headerlink" title="Efficient Estimation of Word Representations in Vector Space"></a>Efficient Estimation of Word Representations in Vector Space</h4><p>arXiv.1301.3781v3</p><ul><li>author: google team</li></ul><p>总结：验证word2vector的重要性。</p><p>碎碎念：目前基本上做NLP的入门阶段必读此论文。对NLP领域的贡献是毋庸置疑的。</p><ul><li>Introduction<ul><li>介绍 word embedding 背景，本文目标，前人工作</li></ul></li><li>Model Architecture<ul><li>介绍前人工作</li><li>LSA&#x2F;LDA、前向神经网络、循环神经网络、并行神经网络；</li></ul></li><li>New Log-liner Models<ul><li>介绍CBOW 和 Skip-grams</li></ul></li><li>Results<ul><li>评价任务描述;最大化正确率;模型结构比较;</li><li>模型上大量数据的并行计算;微软研究院句子完成比赛</li></ul></li><li>Examples of the LearnedRelationships<ul><li>例子:学习到的词与词之间的关系</li></ul></li><li>Conclusion<ul><li>高质量词向量;高效率训练方式;作为预训练词向量作用于其他nlp任务能提升效果</li></ul></li><li>Follow-Up Work<ul><li>后续工作:C++单机代码</li></ul></li></ul><h3 id="LLM"><a href="#LLM" class="headerlink" title="LLM"></a>LLM</h3><h4 id="ShortGPT-Layers-in-Large-Language-Models-are-More-Redundant-Than-You-Expect"><a href="#ShortGPT-Layers-in-Large-Language-Models-are-More-Redundant-Than-You-Expect" class="headerlink" title="ShortGPT: Layers in Large Language Models are More Redundant Than You Expect"></a>ShortGPT: Layers in Large Language Models are More Redundant Than You Expect</h4><p>arXiv.2403.03853v2</p><ul><li>author : 百川智能 - 中科院软件所</li></ul><p>总结：提出层去除和度量冗余层的方法，减少25%的层将会导致模型性能大幅下降。效果看起来还是很不错的，还可以和量化结合。</p><p>碎碎念：不失是一个好方法，在LLM小型化的方向上，模型设计小型化、量化&amp;剪枝。属于剪枝创新。我感觉是挺索然无味的，质量不够啊，还得再加加。</p><ul><li>Introduction<ul><li>简单说了点 LLM 现状、量化、剪枝</li><li>工作内容：通过 BI 分析层冗余、删除冗余层剪枝</li></ul></li><li>Methodology<ul><li>层冗余：分析词嵌入矩阵。（想基于retnet开展吧可能）</li><li>层重要性：提出 BI 新指标</li><li>层去除</li></ul></li><li>Experiments<ul><li>模型选择：llama-2；benchmark &amp; baseline : 自己看论文吧</li><li>结果：有用</li></ul></li><li>Analysis<ul><li>剪枝比例的影响</li><li>深度冗余 与 宽度冗余</li><li>对非TF架构的LLM的效果探究</li><li>BI标准</li></ul></li><li>Limitation<ul><li>层去除25% 性能严重下滑。研究存在局限，需要更多的验证。</li></ul></li><li>Related works<ul><li>受前人工作启发：模型剪枝 &amp; 知识蒸馏 &amp; 量化 &amp; 低秩分解 &amp; 模型冗余</li></ul></li><li>Conclusion<ul><li>提出BI这种度量标准和层冗余、层去除的方法。对探索DNN&amp;LLM都有帮助。</li></ul></li></ul><h4 id="Leave-No-Context-Behind-Efficient-Infinite-Context-Transformers-with-Infini-attention"><a href="#Leave-No-Context-Behind-Efficient-Infinite-Context-Transformers-with-Infini-attention" class="headerlink" title="Leave No Context Behind: Efficient Infinite Context Transformers with Infini-attention"></a>Leave No Context Behind: Efficient Infinite Context Transformers with Infini-attention</h4><p>arXiv.2404.07143v1</p><ul><li>author : Google</li></ul><p>总结：提出一种 infini-attention 的架构，为attention家族添砖加瓦。类似LLMs内部的RAGSys-思路清晰。</p><p>碎碎念：和Ring-Attention属于同一个课题。上下文限制的主要原因还是计算成本，一个是并行计算方向努力，一个是降低单机成本，提高单机效果。<br>有趣的是，做测试均测试的 1m 的token，这个是 2404 发的。ring-attention 是 2310 发的，后续工作是 LWM 2402 发的（验证 1m token）。</p><ul><li>Introduction<ul><li>对与 transformers 及 LLMs 来说，长上下文的计算和内存成本很高。前人提出一种压缩记忆的方法。</li><li>基于此，提出 infini-attention。将旧的KV状态压缩存储，检索召回，聚合计算。效果&#x2F;实验结果描述-阿巴阿巴。</li></ul></li><li>Methods<ul><li>每层attention都有全局压缩状态和局部状态</li><li>与 multi-attention 方法类似、每层都是并行压缩。缩放点积注意力、压缩存储、检索、更新。几个关键步骤讲了一下。</li><li>支持无限上下文、详细说了一下压缩存储状态。</li></ul></li><li>Experiments<ul><li>长上下文建模、LLM持续预训练</li></ul></li><li>Related works<ul><li>描述了一些前人工作和自己所受的启发。</li></ul></li><li>Conclusion<ul><li>记忆(压缩存储召回)对于长上下文、推理、计划和适应性都有价值。1m的token。</li></ul></li></ul><h4 id="Retentive-Network-A-Successor-to-Transformer-for-Large-Language-Models"><a href="#Retentive-Network-A-Successor-to-Transformer-for-Large-Language-Models" class="headerlink" title="Retentive Network: A Successor to Transformer for Large Language Models"></a>Retentive Network: A Successor to Transformer for Large Language Models</h4><p>arXiv.2307.08621v4</p><ul><li>author : Microsoft Research - Tsinghua University</li></ul><p>总结：算了，没看到模型怎么搞的。目前这个模型好像并没有爆炸性扩散。[2024-4]</p><p>碎碎念：[一年后重读]。</p><ul><li>Introduction<ul><li>TF一家独大，但是RetNet有望实现“不可能三角”，介绍了三种前人工作，均不能实现不可能三角。</li><li>简要介绍RetNet。测试结果还不错。</li></ul></li><li>Retentive Networks<ul><li>理论介绍与实现：看不懂。</li></ul></li><li>Experiments<ul><li>语言建模性能与Zero&#x2F;few-shot学习 &amp; 速度、内存消耗、延迟。</li><li>Setup | 与tf比较 | 训练消耗 | 推理消耗 | 与tf变体比较 | 消融实验</li></ul></li><li>Conclusion<ul><li>性能不错，可能会成为tf的理想继承者。</li></ul></li></ul><h4 id="Ring-Attention-with-Blockwise-Transformers-for-Near-Infinite-Context"><a href="#Ring-Attention-with-Blockwise-Transformers-for-Near-Infinite-Context" class="headerlink" title="Ring Attention with Blockwise Transformers for Near-Infinite Context"></a>Ring Attention with Blockwise Transformers for Near-Infinite Context</h4><p>arXiv.2310.01889v4</p><ul><li>author : 加州大学伯克利分校</li></ul><p>总结：文中提出了一种 Ring-Attention 的扩展上下文进行并行计算的新的TF内存高效计算架构。具有卓越的性能和上下文扩展能力。这种架构具有广阔的前景。</p><p>碎碎念：TF架构并行计算领域的一大扩展。降低训练瓶颈，原本需要A100，现在多搞点4090就行了。颇有三个臭皮匠，顶个诸葛亮的感觉。<br>这项工作已经被验证了对 LLMs （arXiv.2402.08268v2 - LWM 已经验证 同 UC Berkeley）具有卓越的影响。新的多模态大模型时代即将到来。而这，只是<br>AI 时代的序章。</p><p><a href="https://docs.google.com/presentation/d/180lS8XbeR1_bTMaldg21LKYQkjXftHuh9VnZ3xk27qQ/edit#slide=id.p">相关演讲的PPT</a></p><ul><li>Introduction<ul><li>tf架构很成功，但是显存成本比较高。提出了 Ring-Attention 分布式训练。<ul><li>当我们逐块计算注意力时，结果对于这些块计算的顺序是不变的。我们的方法在主机之间分配计算块注意力的外循环，每个设备管理其各自的输入块。<br>对于内部循环，每个设备计算特定于其指定输入块的块式注意力和前馈操作。主机设备形成一个概念环，其中在内循环期间，每个设备将用于分块计算的键值块的副本发送到环中的下一个设备，同时从前一个设备接收键值块。<br>只要块计算比块传输花费更长的时间，与标准转换器相比，重叠这些过程就不会增加开销。但是有可以接受的通信开销。</li></ul></li><li>评估：Ring-Attention 是有价值的。此结构，理论上可以实现 无限制的context size</li></ul></li><li>Large Context Memory Constraint<ul><li>论述了一下 tf 架构需要大量现存</li></ul></li><li>Ring Attention with Blockwise Parallel Transformers<ul><li>提出 Ring-Attention 并简要介绍一下。</li><li>分析了一下这样并行计算所需的开销。</li><li>贴出伪代码实现</li></ul></li><li>Setting<ul><li>benchmark setting：model、baselines、training configuration。介绍了一下。</li></ul></li><li>Results<ul><li>评估最大上下文：有个表、性能提升很多。</li><li>评估模型浮点计算率：有个表、可以训练很大的模型。</li><li>对上下文强化学习性能的影响：有个表、对于长序列和推理有优势。</li><li>对于LLM的影响：扩展LLM的上下文长度（arXiv.2402.08268v2 - LWM 已经验证 同 UC Berkeley）</li></ul></li><li>Related works<ul><li>这个工作属于TF高效内存计算类别。建议后续研究关于attention本身、更多的并行方法（数据并行、张量并行、序列并行、FSDP）</li><li>这个工作可以有效的提高并行计算能力并减少通信开销。（比较前人的一些工作）</li></ul></li><li>conclusion<ul><li>这个方法允许上下文随着设备数量线性扩展，并保持性能，消除单个设备带来的性能瓶颈。</li><li>通过大量训练证明了广阔的前景。</li></ul></li></ul><h4 id="LWM-WORLD-MODEL-ON-MILLION-LENGTH-VIDEO-ANDLANGUAGE-WITH-BLOCKWISE-RINGATTENTION"><a href="#LWM-WORLD-MODEL-ON-MILLION-LENGTH-VIDEO-ANDLANGUAGE-WITH-BLOCKWISE-RINGATTENTION" class="headerlink" title="LWM - WORLD MODEL ON MILLION-LENGTH VIDEO ANDLANGUAGE WITH BLOCKWISE RINGATTENTION"></a>LWM - WORLD MODEL ON MILLION-LENGTH VIDEO ANDLANGUAGE WITH BLOCKWISE RINGATTENTION</h4><p>arXiv.2402.08268v2</p><ul><li>author : 加州大学伯克利分校</li></ul><p>总结：这篇论文主要介绍了一种结合视频和语言的模型，通过使用Blockwise RingAttention和Blockwise<br>Transformer来训练长篇视频和书籍的数据集，并逐渐增加序列长度，从32K到1M<br>tokens，以提高模型对复杂任务的理解能力。论文还介绍了一种构建QA数据集的方法，以便训练模型进行长序列对话。最后，论文展示了该模型在理解长视频和语言序列方面的出色表现。</p><p>碎碎念：个人认为LWM开启了一个新的训练方式（也可能是我孤陋寡闻，论文看少了）。这种训练方式方式带来的多模态大模型，从32K到1M的token，渐进式训练方式，化是渐化，变是顿变。<br>变，言其著；化，言其渐。这种训练方式可能会帮助以后的 LLM 读取更长的token，这种方式也比较合乎成长规律。文中也介绍了一些作者们训练时候的小技巧，提到了一种使用<br>Pallas 将<br>Blockwise Transformer 和 RingAttention 融合到一起的技巧，和他们的QA数据集。结合开源数据集有很好的效果。我强烈建议将 弱智吧<br>数据也加进去。<br>文中关于 Encoder 层做了较多的描述。但是对于 Decoder 层并没有做过多的描述。基于TF来说，如果能将 BERT(Encoder) 和 GPT(<br>Decoder) 这两种类型融合一下，</p><ul><li>Introduction<ul><li>介绍了一下这个领域当前的工作和挑战。</li><li>通过文本和长视频联合建模，提高模型对多模态和长文本的理解能力。</li><li>使用blockwise ring-attention技术降低计算成本，渐进式训练，混合训练，设计了一种屏蔽序列打包方式，多模态混合训练的平衡很重要，开发了一种QA训练方式。</li><li>贡献：context转换器、长视频理解、平衡性问题、QA数据集、开源。</li></ul></li><li>Overview<ul><li>基于llama-2训练了一个自回归tf模型，将context扩展到1M，对多模态序列进行联合训练。</li></ul></li><li>阶段1：训练long-context 语言模型<ul><li>使用 Blockwise RingAttention 扩展上下文，并行将 Blockwise RingAttention 与 FlashAttention 融合。渐进训练。</li><li>分五个阶段，渐进训练。构建QA数据集，并微调，UltraChat和论文自建的QA数据集，很好的配合训练。</li><li>评估：Multi-Needle Retrieval、基于上下文评估、聊天评估</li></ul></li><li>阶段2：训练long-context vision-language 模型<ul><li>基于阶段1 输入video序列，进行训练。稍微修改了一下输入数据的架构。</li><li>用阶段1 的模型进行训练，混合渐进式训练。</li><li>评估：长视频理解、图像理解、短视频理解、图像和视频生成</li></ul></li><li>更多细节<ul><li>描述了一下，训练所需资源，超参数</li></ul></li><li>相关工作<ul><li>工作涉及扩展语言模型的上下文窗口以允许更多tokens。跟CLIP架构做了一下对比。</li></ul></li><li>结论<ul><li>效果很好，开创了一个需要资源少的、渐进式的训练方式，希望以后token可以更长、多模态能力更强。</li></ul></li></ul><h3 id="RAG"><a href="#RAG" class="headerlink" title="RAG"></a>RAG</h3><h4 id="Adaptive-RAG-Learning-to-Adapt-Retrieval-Augmented-Large-Language-Models-through-Question-Complexity"><a href="#Adaptive-RAG-Learning-to-Adapt-Retrieval-Augmented-Large-Language-Models-through-Question-Complexity" class="headerlink" title="Adaptive-RAG: Learning to Adapt Retrieval-Augmented Large Language Models through Question Complexity"></a>Adaptive-RAG: Learning to Adapt Retrieval-Augmented Large Language Models through Question Complexity</h4><p>arXiv.2403.14403v2</p><ul><li>author : 韩国高级科学技术研究院</li></ul><p>总结：提出了一种自适应增强检索模型，再次为 Prompt Engineering 加一分。</p><p>碎碎念：根据我的判断，这个项目是有价值的，后续我个人认为扩展方向可以往拓扑图及存储方向努力。<br>但是我已经提出了一种树形结构，来辅助检索召回，这份工作，我可以进行复现并进一步整合到我的工作中。<br>前段时间还有另外一篇论文论述了关于召回的不精确性问题，那个好像是二次召回。这两篇可以进一步整合到RAGSys。</p><ul><li>Introduction<ul><li>大模型很强，但是也有很严重的幻觉问题。基于RAG的LLM在QAsys上有很大的作用。但是检索是较为复杂的过程。</li><li>提出了一个基于pre-train LM 的选择&#x2F;分类器，预测所需的数据集。自适应选择数据包。增强效率和准确性。结果证明，很有用。</li></ul></li><li>Related works<ul><li>QA 系统很大的问题就是幻觉现象。RAG一定程度上优化了这个情况。但是复杂问题需要多跳RAG-QA，效率不高。前人也有一些思维链和自适应检索的工作。基于这些work，</li><li>Adaptive-RAG 是预先确定复杂度并调整LLM的操作。</li></ul></li><li>Method<ul><li>介绍一下QA-RAG-LLM 主要是多跳情况。</li><li>Adaptive-RAG：介绍一下和说明运行逻辑。</li></ul></li><li>实验<ul><li>数据集、模型、评估指标、实现细节</li><li>结果分析：Adaptive-RAG 表现出色。效果和效率都不错。<ul><li>分类器性能、分类器效率、分类器训练数据分析、分类器大小分析、案例研究</li></ul></li></ul></li><li>Conclusion<ul><li>设计目的是根据遇到的 查询的复杂性，在统一检索增强的 LLM 中动态调整其查询处理策略。</li><li>基于开放域 QA 数据集的集合，涵盖多种查询复杂性，包括单跳和多跳问题。</li><li>Adaptive-RAG 提高了 QA 系统的整体准确性和效率，分配更多的资源来处理复杂的查询，同时有效地处理更简单的查询。最大化的过度查询复杂性。</li></ul></li><li>Limitations<ul><li>自标记的模型可能会错误标记、分类器的可解释性问题、</li></ul></li><li>道德声明：阿巴阿巴</li><li>致谢：阿巴阿巴</li></ul><h4 id="RAG-鼻祖-Retrieval-Augmented-Generation-for-Knowledge-Intensive-NLP-Tasks"><a href="#RAG-鼻祖-Retrieval-Augmented-Generation-for-Knowledge-Intensive-NLP-Tasks" class="headerlink" title="RAG 鼻祖 - Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks"></a>RAG 鼻祖 - Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks</h4><p>arXiv.2005.11401v4</p><ul><li>author : 伦敦大学 - 纽约大学 - facebook AI 研究院</li></ul><p>总结：这篇论文介绍了检索增强生成（Retrieval-Augmented Generation，RAG）模型的研究。<br>这些模型结合了预训练的参数化记忆和非参数化记忆，用于语言生成任务。作者提出了两种RAG模型的形式，一种是在整个生成序列中条件于相同的检索到的段落，另一种是可以针对每个标记使用不同的段落。<br>他们在广泛的知识密集型自然语言处理任务上进行了微调和评估，并在三个开放领域问答任务上取得了最先进的结果，优于参数化的seq2seq模型和特定任务的检索和提取架构。<br>对于语言生成任务，研究发现RAG模型生成的语言比最先进的仅参数化的seq2seq基线更具体、更多样化和更符合事实。</p><p>个人一点小想法：RAG从如今来看，无疑是带来了巨大反响。基于RAG的应用，层出不穷，后面又出现的LangChain，我感觉扩展了RAG的定义，不再拘泥于文本任务，结合Function<br>Call和Memory，LLM-Agent等，<br>相信 Robot+Multi-RAGSys 将会重塑世界。</p><ul><li>Introduce<br>提出Pre-train神经语言模型的可以用，但是难以扩展，存在幻觉情况，通过参数记忆和非参数(检索)记忆可以检查并解释。提出了RAG模型，配图挺有意思的。效果还行。</li><li>Method<ul><li>提出两个模型，一个是基于Sequence，一个是基于Token。</li><li>检索使用DPR。</li><li>生成使用BERT。</li><li>训练方法简要介绍</li><li>解码的话，知识储备不够，看不懂</li></ul></li><li>Experiments<ul><li>开放QA场景</li><li>抽象QA场景</li><li>危险问题生成：评估真实性和特异性</li><li>事实审查：从wiki检索，然后对其进行推理审查。</li></ul></li><li>Results<ul><li>简述对以上测试场景进行测评的结果</li><li>RAG之后，比原模型，完胜。</li></ul></li><li>Related Work<ul><li>单任务检索：功能更强大。</li><li>NLP通用架构：增强原模型功能。</li><li>学习检索：获得更强大的性能。</li><li>基于存储架构：记忆。</li><li>检索和编辑方法：针对输出要求指定格式。RAG未来可能有更好的应用。</li></ul></li><li>Discussion<ul><li>工作表明，RAG更加真实、具体。可以热插拔检索功能。为NLP领域探究了一个新方向（现在来看，确实如此，甚至，不仅NLP）</li><li>解决幻觉问题</li><li>缺点：容易受检索到的知识的影响，比如wiki或者web的内容有失偏颇。</li></ul></li></ul><h4 id="Social-Skill-Training-with-Large-Language-Models"><a href="#Social-Skill-Training-with-Large-Language-Models" class="headerlink" title="Social Skill Training with Large Language Models"></a>Social Skill Training with Large Language Models</h4><p><a href="https://arxiv.org/pdf/2404.04204.pdf">https://arxiv.org/pdf/2404.04204.pdf</a></p><ul><li>author : 斯坦福大学 - 佐治亚理工学院</li></ul><p>总结：这篇论文为社交恐惧症患者设计了一个交互应用，旨在帮助此类人群培养社交语言艺术，论文中提到了一个新模型 <strong>APAM</strong><br>，有两个不同性格的角色，帮助用户训练对话能力，设计了 2 + 3 种 Agent ，应对多种场景。文中也对 AI<br>带来的伦理道德问题进行了研究，对模型进行了测试。并针对一些问题，提出了解决方案，例如 LLM 幻觉问题，人文相关风险等。<br>最终对他们的工作进行了总结，对模型的未来发展进行了一定的论述，比如法律风险，对受众提供无风险实践机会等。</p><p>我个人感觉还是很有价值的，目前市场来说是有空缺的，提出的新模型也有一定的优势。但是感觉不够深入，还是基于Prompt工程进行LLM应用开发设计。</p><ul><li>简介<br>对当前现状进行了分析，目前是基于心理咨询师等进行沟通，提出如果基于大模型来说，成本将很低，风险也低。</li><li>用于性格植入和模拟的LLMs<br>论述了很多相关技术如RAG和一些心理学上的理论。提出：模型是将重点 关注基于 LLM 的模拟，将其作为更灵活和可扩展的解决方案。提示的<br>LLM 可以有效地扮演可信的角色。</li><li>APAM framework<ul><li>AI partner：用户对话对象</li><li>AI monitor：扮演一个哲学家、心理学家的角色进行辅导用户</li><li>APAM插图很形象，可以到论文里面看一看</li><li>方法论：了解用户，然后设计一个partner进行对话， 创建一个monitor导师进行辅助，将这两个AI agent 植入到场景中，辅助用户开始训练。</li><li>示例：有个表，可以到论文里看看。</li></ul></li><li>Vision for Safe Deployment<ul><li>AI Partner Continuum： 提出了几个partner的设计。基于模拟学习的、基于角色扮演的、标准版。</li><li>AI Mentor Continuum：提出了几个monitor的设计。基于对话内容的、基于心理学理论体系的、结构化反馈的。</li></ul></li><li>Technical Challenge<ul><li>长对话优化：多轮对话不忘记问题、不幻想-基于对话互动、因人而异-因材施教。</li><li>集成专家框架：系统、有效、安全。基于APAM，模型应该进行反思并优化自己。</li><li>基于用户控制的设计：允许用户微调。</li><li>个性化：基于用户情况进行针对性设计接下来的交互节奏。</li></ul></li><li>Evaluation<ul><li>完成以上挑战和愿景很有困难。进行了全自动评估和用户评估两种方式，参考指标例如困惑度或 Kullback-Leibler 散度。</li><li>开发人员进行了保证一致性等内容的prompt工程，解决评估问题，需要用户参与，不能单靠系统。</li><li>对于系统，存在一些风险，如 模拟失败、幻觉、过度依赖等问题，问题要详细暴露，不能汇总后传阅。（我猜，详细文本更有利于fitting，毕竟nlp就这样）。</li></ul></li><li>讨论<ul><li>社会影响：很有用，帮助人学会换位思考等等。成本低，利好穷人。</li><li>担忧：法律风险和人文风俗风险。</li><li>Distributional Shifts：应该让用户意识到，他们对话的只是AI，不是真人，现实中，应该随机应变。</li><li>Job Risks：APAM不是为了代替人的工作，而是减轻心理咨询师的工作。针对偏远地区，进行普惠。</li></ul></li><li>总结<ul><li>阿巴阿巴。</li></ul></li></ul><h4 id="Chain-of-thought-prompting-elictis-reasoning-in-LLMs"><a href="#Chain-of-thought-prompting-elictis-reasoning-in-LLMs" class="headerlink" title="Chain of thought prompting elictis reasoning in LLMs"></a>Chain of thought prompting elictis reasoning in LLMs</h4><p>TODO 4-7</p><p>鸽子了、有空再说吧</p><h3 id="prompt-engineering"><a href="#prompt-engineering" class="headerlink" title="prompt engineering"></a>prompt engineering</h3><h4 id="LARGE-LANGUAGE-MODELS-ARE-HUMAN-LEVEL-PROMPT-ENGINEERS"><a href="#LARGE-LANGUAGE-MODELS-ARE-HUMAN-LEVEL-PROMPT-ENGINEERS" class="headerlink" title="LARGE LANGUAGE MODELS ARE HUMAN-LEVEL PROMPT ENGINEERS"></a>LARGE LANGUAGE MODELS ARE HUMAN-LEVEL PROMPT ENGINEERS</h4><p>arXiv.2211.01910v2 ICLR-2023</p><ul><li>author : 多伦多大学 - Vector Institute - 滑铁卢大学</li></ul><p>总结：这篇论文主要介绍了一种自动化生成指令的方法，称为 Automatic Prompt Engineer (APE)，通过搜索一组指令候选项来最大化所选的评分函数，从而选择最合适的指令。<br>实验结果表明，与人类生成的指令相比，利用APE生成的指令在各种任务上都能够取得更好的性能。论文提出，APE可以帮助LLM在 few&#x2F;zero<br>shot 上取得更好的学习效果。</p><p>个人想法：算是为prompt工程领域添砖加瓦吧。AI时代，终将大量AI替代这些繁琐的工作，且具备高效性和高质量。<br>工业革命本就是机器代替人，去标准化作业。电气时代，是电气设备的标准作业。信息时代是信息软件的标准作业。AI时代，换成了AI进行标准作业。<br>目的均是追求生产统一的标准化产品。把误差控制在一定范围，越小越代表实力。不过，这个世界<strong>没有银弹</strong>，一切都要根据需求进行权衡。</p><ul><li>Introduction<ul><li>从LLM时代以来，一直在探索如何挖掘处LLM的指令。由于黑盒的特性，很难发掘出为什么看似相似的文本却让LLM的输出有较大的差异。为什么解决这个问题，设计了APE结构去进行探索。</li><li>使用LLM生成prompt指令，使用启发式搜索（迭代蒙特卡洛搜索方法）去筛选，作为黑盒优化。（关于可解释性问题，在其他论文中有提及，但是不多。）</li></ul></li><li>Related Work<ul><li>作者将LLM视作黑盒计算机，进行探索如何使用LLM生成指令来控制LLM行为。</li><li>简单介绍了一下 prompt engineering 和 程序实现，主要是叙述了一下前人的工作和自己的做法。</li></ul></li><li>具体工作<ul><li>prompt：首先LLM提出一些prompt文本。采用 前向生成 与 反向生成。通过反向生成模型，自定义补充提示。有一些插图，和一个代码流程伪代码，可以看看。</li><li>score：<ul><li>精度：采用的一个前人工作。</li><li>对数概率</li><li>分数评估：提出一种自适应过滤（高质量的接收多一点输入，低质量的少接受，类似ResNet概念的拓展）降低计算成本。</li></ul></li><li>迭代蒙特卡洛搜索方法：不懂</li></ul></li><li>LLM 是类人工程师<ul><li>从四个角度进行研究：零样本性能、少样本上下文学习性能、零样本思维链推理和真实性。我们的实验表明，APE<br>可以找到提高任务绩效的提示，其表现与人类编写的提示相同甚至更好。</li><li>任务效果：好。</li><li>大bench：好。</li><li>零样本思维链：好。</li><li>问答的真实性：很高。</li></ul></li><li>定量分析<ul><li>增大模型，效果更好。</li><li>他们这个效果挺好，小模型多练练，效果也还行。评估指标也挺好。吹一下。</li><li>迭代蒙特卡洛搜索：迭代是有用的。</li></ul></li><li>总结：这项工作为控制和引导生成人工智能奠定了基础。<ul><li>笔者：确实，现在这方面做的还是不够好，虽然有 LangChain 这么方便的工具，但是 LangChain 没有引入 APE 进行自动生成<br>prompt。<code>2023-4-11</code></li></ul></li></ul><h3 id="Robot-Agent"><a href="#Robot-Agent" class="headerlink" title="Robot Agent"></a>Robot Agent</h3><h4 id="Learning-Agile-Soccer-Skills-for-a-Bipedal-Robot-with-Deep-Reinforcement-Learning"><a href="#Learning-Agile-Soccer-Skills-for-a-Bipedal-Robot-with-Deep-Reinforcement-Learning" class="headerlink" title="Learning Agile Soccer Skills for a Bipedal Robot with Deep Reinforcement Learning"></a>Learning Agile Soccer Skills for a Bipedal Robot with Deep Reinforcement Learning</h4><p>arXiv.2304.13653v1</p><ul><li>author : DeepMind - Google - University of Oxford</li></ul><p>总结：这项工作对未来大型机器人的具身智能训练指导了方向。对于后续小型机器人也可以进一步研究。对于未来的讨论很具有启发性。</p><p>碎碎念：什么时候研发色情服务机器人？</p><ul><li>Introduction<ul><li>介绍具身智能、介绍历史与前人工作</li><li>这项工作研究动态多智能体环境中小型人形机器人的全身控制和对象交互。结论：效果很好。Agent的训练是通过重放和端到端训练和简单奖励实现的。证明了由虚拟仿真迁移到物理机器人也是可行的。</li></ul></li><li>Experimental Setup<ul><li>介绍用于训练代理的模拟和真实足球环境以及机器人硬件。</li></ul></li><li>Methods<ul><li>目标是训练一个智能体，将足球所需的各种技能（包括走、踢、起身、得分和防守）转化为长期战略行为，然后我们可以将其转移到真正的机器人上。</li><li>训练分两个阶段：1、针对某一技能特定训练（如走、踢球、防卫等）2、基于第一阶段学会了走进行战术和策略学习。对打越来越强的对手。考虑噪声情况以增强模型能力。</li><li>3.1 概述 - 看不懂。</li><li>3.2 训练 - 详细介绍了一下训练方式。</li><li>3.3 simulation to real world</li></ul></li><li>Results<ul><li>1v1 robot agent 表现了很优秀的能力（如：跌倒快速恢复、转身、移动踢球、战略行为等）</li><li>和 baseline 比较：1、定量分析（速度、跌倒起身能力、踢球 - DRL效果很好）2、skill embedding</li><li>定位球：7&#x2F;10 - real</li><li>Value Function Analysis：研究了学习到的价值函数，以便直接验证代理对球、球门和对手的观察是否敏感</li><li>自我对弈：很重要。类似GAN的思想吧。</li></ul></li><li>Related works<ul><li>1、robot learning 2、Skill and Transfer Learning 3、Multi-agent Reinforcement Learning 4、RoboCup and Other<br>Competitive Games : 介绍了一下历史和现状</li></ul></li><li>Discussion<ul><li>局限：可以进一步均衡稳定性和活动。训练数据存在局限性，不利于用真实数据进行pre-train。控制方法有待优化。仅用于小型机器人，大型机器人未考虑。</li><li>Comparison to RoboCup：灵感来自 RoboCup，未来工作的一个令人兴奋的方向是培训由两个或更多代理组成的团队。</li><li>Playing Soccer from Raw Vision：对环境的交互能力可以进一步提升。</li></ul></li><li>Conclusion<ul><li>sim to real 得到了令人惊讶的良好表现。本次实验了在小型机器人上的可行性，后续可以推广到大型机器人。</li></ul></li><li>Acknowledgements:阿巴阿巴</li></ul><h3 id="Software-Engineering"><a href="#Software-Engineering" class="headerlink" title="Software Engineering"></a>Software Engineering</h3><h4 id="AutoDev-Automated-AI-Driven-Development"><a href="#AutoDev-Automated-AI-Driven-Development" class="headerlink" title="AutoDev: Automated AI-Driven Development"></a>AutoDev: Automated AI-Driven Development</h4><p>arXiv.2403.08299v1</p><ul><li>author : Microsoft Redmond USA</li></ul><p>总结：吹牛逼居多。是一个方向，但是任务艰巨。目前的AI尚无此能力。看看GPT-5出来之后啥情况吧。如果GPT-5结合Ring-Attention<br>大幅扩展上下文，还是有机会十年内的。</p><p>碎碎念：协作是一个不错的方向，但是精细化控制是做不到的。AI没这种能力。后续持续优化此方向吧，厚积薄发，还是要看 Pre-train<br>Model的能力。 2077年或许可以完全AI化。</p><ul><li>Introduction<ul><li>现在的AI助手基本上还是 Copilot 这种类型。AutoDev 是全流程管理。基于Auto Gen 的灵感，基于Auto GPT。</li></ul></li><li>AutoDev Design<ul><li>Rules, Actions, and Objective Configuration ： Yaml文件</li><li>Conversation Manager：人机交互，随机决策。<ul><li>Parser、Output Organizer、Conversation Conclusion、</li></ul></li><li>Agent Scheduler：编排 agent 协同工作。<ul><li>Agents：LLM &amp; SLM</li></ul></li><li>Tools Library：供 Function Call<ul><li>File Editing、Retrieval、Build &amp; Execution、Testing &amp; Validation、Git、Communication</li></ul></li><li>Evaluation Environment：Docker中</li><li>Putting Everything Together：以上部分综合到一起，组合成AutoDev</li></ul></li><li>Empirical Design<ul><li>Research Question：代码生成效果、测试任务生成效果、效率</li><li>AutoDev Settings：无人工干预效果怎么样</li></ul></li><li>Empirical Results<ul><li>代码生成任务：好；测试任务生成：还行；效率：还行；（大概率是测试集的问题导致还不错，目前AI并没有复杂工程能力[2024.4]）</li></ul></li><li>Discussion<ul><li>AutoDev in Action：有几张演示图</li><li>Multi-Agent Collaboration：协同效果会更好。联邦学习？</li><li>Human in the Loop：人机交互通过ask和talk进行传递指令，后续进行扩展。</li><li>AutoDev Integrations：未来希望集成到IDE中，目前还是命令行。</li></ul></li><li>Related Works<ul><li>AI in Software Engineering : 本文介绍了 AutoDev framework</li><li>Evaluation of LLMs in Software Engineering : 后续进行更复杂任务的训练</li><li>AI in Software Engineering Interactions : 总结了一下前人工作，可以看看。<ul><li>AutoDev 将这些想法专门用于软件工程领域，提供了一个灵活的框架，允许人工智能代理完全自主地完成复杂的 SE<br>任务。我们的工作旨在弥合传统软件工程实践和人工智能驱动的自动化之间的差距，促进开发人员和人工智能代理之间的协作。通过引入多功能工具库，AutoDev<br>使人工智能代理能够自主执行复杂的任务，从而在人工智能辅助软件开发领域取得了有希望的进步。</li></ul></li></ul></li><li>Conclusion : 阿巴阿巴</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><h3 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h3><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>paper</category>
      
    </categories>
    
    
    <tags>
      
      <tag>paper</tag>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黄油</title>
    <link href="/2024/04/01/yellow/"/>
    <url>/2024/04/01/yellow/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>黄油</code>，慎入，不喜勿看，小圈子内部娱乐。</p><span id="more"></span><h2 id="黄油"><a href="#黄油" class="headerlink" title="黄油"></a>黄油</h2><ul><li><p>名称：滥交女 <del>我妹妹是bitch bitch biiiitch</del>（PC中文版.亲测畅玩）</p><p>描述：深山家的两亲和兄妹3人每天都愉♂悦♀的生活着。但就在长男圭已经很习惯了父亲再婚后和母親与义妹们之间平凡的高中生生活之时──某天，忘记带钥匙的圭走后门回家，在那里看见了像小偷一样摸索着圭内裤的妹妹诗帆・奈绪。对于圭理所当然的问询，诗帆的回答是──</p><p>链接：<a href="https://www.alipan.com/s/peQz9m3szYa">https://www.alipan.com/s/peQz9m3szYa</a></p></li><li><p>名称：DEVILS DEVEL CONCEPT（PC中文版.亲测畅玩）</p><p>描述：《DEVILS DEVEL<br>CONCEPT》是暁WORKS开发的一款游戏，发行时间为2009年。人类、怪物、非人类――“世界”不容许这些人的存在。奇异事件频发的不知名街道“鶴伎町”。这里是汇集了各种各样“灾难”，“诅咒”的战场。持有被称作“エンジャ”的能力的异能者。以及，那种族──“恶魔”。被无形的漩涡卷入的这些人们，汇集到了一起，厮杀着。時雨楚良，是个エンジャ少年。数年前，双亲亡故，现在独自生活着。就读于私立白嶺学园的他的日常生活，被平凡、安定以及破坏，镀上了一层色彩。和朋友们过着平凡的校园生活。每夜都会做的不可思议的梦。和在夜晚的街道上出现的恶魔殊死搏斗。他所拥有的“契约”，将他引入了悲剧、争斗、杀戮的地狱。同时，他又邂逅了新的“契约”。以及拥有这些契约的少女们。</p><p>链接：<a href="https://www.alipan.com/s/2UywTj2pvvq">https://www.alipan.com/s/2UywTj2pvvq</a></p></li><li><p>名称：美女 请别影响我学习Build.13867681+全DLC 解压即撸</p><p>描述： 《美女，请别影响我学习》是一款恋爱模拟类的全动态真人互动影像作品。你将阴差阳错之下成为“女子大学唯一男生”，以第一视角开启一段甜蜜与欢笑交织的校园恋爱之旅！</p><p>链接：<a href="https://pan.quark.cn/s/e33a4273bc1f">https://pan.quark.cn/s/e33a4273bc1f</a></p></li></ul><h2 id="不正经影视"><a href="#不正经影视" class="headerlink" title="不正经影视"></a>不正经影视</h2><h2 id="正经影视"><a href="#正经影视" class="headerlink" title="正经影视"></a>正经影视</h2><h3 id="喜剧"><a href="#喜剧" class="headerlink" title="喜剧"></a>喜剧</h3><ul><li><p>名称：豆瓣高分喜剧20部</p><p>描述：豆瓣高分喜剧20部</p><p>链接：<a href="https://pan.quark.cn/s/65abd25e9096">https://pan.quark.cn/s/65abd25e9096</a></p></li></ul><h3 id="动漫"><a href="#动漫" class="headerlink" title="动漫"></a>动漫</h3><ul><li><p>名称：姜子牙 (2020) 4K 60帧</p><p>描述：该片讲述了昆仑弟子姜子牙率领众神伐纣，赢得封神大战胜利，却因一时过失引得昆仑大乱，从此被贬北海，为世人所唾弃，十年后，为重回昆仑，姜子牙踏上旅途寻回自我，也发现了当年一切真相的故事。</p></li></ul><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><ul><li><p>名称：新猫和老鼠 3季全 1080P 国语 中字硬字幕</p><p>描述：在过去的半个多世纪，汤姆和杰瑞培养了一代又一代忠实影迷。进入2014年，令坚实粉丝们振奋的消息传来。汤姆和杰瑞全新制作的新番上阵，这两个活宝自然不会缺席，而大狗斯派克、黑猫等老朋友也会悉数登场。总共52部全新短片上映，久别重逢的老朋友们将为我们带来新的快乐和感动！</p></li></ul><h3 id="不便于归类视频"><a href="#不便于归类视频" class="headerlink" title="不便于归类视频"></a>不便于归类视频</h3><ul><li><p>名称：《曾仕强》系列最全合集 视频+图文+音频共32个类目</p><p>描述：曾仕强，著名易学大师、国学大师、中国式管理大师，全球华人中国式管理第一人，被称为”中国式管理之父”，曾任台湾交通大学教授，台湾兴国管理学院校长。英国牛津大学管理哲学荣誉博士、英国莱斯特大学管理哲学博士、美国杜鲁门大学行政管理硕士、国立台湾师范大学教育学学士;著有《胡雪岩的启示》《易经的奥秘》《中国式管理》《家庭教育》《孙子兵法与人力自动化》等，而最让大家熟悉的是他在《百家讲坛》中的演讲。</p><p>链接：<a href="https://pan.quark.cn/s/f1c555d00675">https://pan.quark.cn/s/f1c555d00675</a></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RestFulAPI</title>
    <link href="/2024/03/30/RESTfulAPI/"/>
    <url>/2024/03/30/RESTfulAPI/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>RestFulApi</code>的学习分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="chapter-1"><a href="#chapter-1" class="headerlink" title="chapter 1"></a>chapter 1</h3><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="API的用户体验优先"><a href="#API的用户体验优先" class="headerlink" title="API的用户体验优先:"></a>API的用户体验优先:</h4><p>将用户体验置于首位，API设计不仅要满足功能性需求，还要关注非功能性需求，如响应速度、交互体验、API文档的易读性等。</p><h4 id="资源导向"><a href="#资源导向" class="headerlink" title="资源导向:"></a>资源导向:</h4><p>资源为中心:RESTùI API应围绕资源(如用户、订单、文章、事件等)设计，每个资源都有一个唯一的URl(Uniform Resource ldentifier)<br>，如&#x2F;users&#x2F;123 表示特定用户的资源。</p><h4 id="API的资源粒度"><a href="#API的资源粒度" class="headerlink" title="API的资源粒度:"></a>API的资源粒度:</h4><p>精细把控API资源的粒度，既要避免资源过于细化导致调用复杂，也要防止资源过大导致的性能问题，找到最适合业务场景的平衡点。</p><p>在API设计中，资源粒度指的是你定义API接口时，对业务对象划分的细致程度。</p><p>比如，如果你有一个用户管理的API，你可以设计成:</p><ul><li><p>粗粒度:一个接口返回所有用户的信息;</p></li><li><p>中粒度:一个接口返回单个用户的所有信息;</p></li><li><p>细粒度:多个接口分别返回单个用户的基本信息、订单记录、活动参与情况等不同部分的信息。</p></li></ul><p>选择合适的资源粒度很重要，因为它直接影响到API的灵活性、可扩展性和性能。粒度过粗可能导致获取数据时冗余信息多，粒度过细则可能会导致频繁调用接口，增加网络延迟和服务器负担。<br>理想的粒度应该是既能满足业务需求，又能保持API易用且高效。</p><h4 id="HTTP方法的使用"><a href="#HTTP方法的使用" class="headerlink" title="HTTP方法的使用:"></a>HTTP方法的使用:</h4><p>根据HTTP协议的语义，正确地使用不同的HTTP方法来执行CRUD(Create,Read,Update,Delete)操作:</p><ul><li>GET:用于获取资源或资源列表，一般不应有副作用。</li><li>POST:用于新建资源，常出现在集合资源的末端，如 &#x2F;users，附带资源数据在请求体中。</li><li>PUT:用于替换整个资源，需提供完整的资源表示，URI指向的是要更新的具体资源。</li><li>PATCH:用于部分更新资源，仅需提供要修改的属性。</li><li>DELETE:用于删除指定资源，</li></ul><table><thead><tr><th>Resource</th><th>Post</th><th>Get</th><th>Put</th><th>Delete</th></tr></thead><tbody><tr><td>&#x2F;customers</td><td>创建新客户</td><td>返回所有客户</td><td>批量更新客户</td><td>删除所有客户</td></tr><tr><td>&#x2F;customers1</td><td>Error</td><td>返回1号客户明细</td><td>1号客户已存在时</td><td>删除1号客户</td></tr><tr><td>&#x2F;customers&#x2F;1&#x2F;orders</td><td>创建1号客户的新订单</td><td>返回1号客户的所有订单</td><td>批量更新1号客户的订单</td><td>删除1号客户所有订单</td></tr></tbody></table><h4 id="无状态性"><a href="#无状态性" class="headerlink" title="无状态性:"></a>无状态性:</h4><p>每个请求都包含处理请求所需的所有信息，服务器不需要存储会话状态。客户端可以通过标准的认证机制(如OAuth、JWT)来维护状态。</p><h4 id="层级化结构"><a href="#层级化结构" class="headerlink" title="层级化结构:"></a>层级化结构:</h4><p>在更复杂的系统中，可能会倾向于提供能够让客户端通过多层关系进行导航的URI，如&#x2F;customers&#x2F;1&#x2F;orders&#x2F;99&#x2F;products，这是错误的做法。</p><p>尽量保持URI相对简洁。一旦应用有了某个资源的引用，应能够使用该引用找到与该资源相关的项目。可以通过&#x2F;customers&#x2F;1&#x2F;orders找到客户1的所有订单，然后通过&#x2F;orders&#x2F;99&#x2F;products找到该订单中的产品。</p><h4 id="超媒体作为引擎信息"><a href="#超媒体作为引擎信息" class="headerlink" title="超媒体作为引擎信息:"></a>超媒体作为引擎信息:</h4><p>API响应中包含链接和其他元数据(如链接关系、操作选项)，帮助客户端发现和导航到其他相关资源。</p><h4 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理:"></a>版本管理:</h4><p>API版本管理可以有不同的策略，但常见做法是在URI或请求头中指明版本。</p><ul><li>基于URI</li><li>基于HTTP header</li></ul><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理:"></a>错误处理:</h4><p>提供统一格式的错误响应，如使用HTTP状态码表示错误类型，并在响应体中包含详细的错误信息。</p><h4 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性:"></a>幂等性:</h4><p>对于同一请求多次发送应该产生相同的效果(除非资源状态本身已改变)，这对于PUT、DELETE等操作尤其重要。</p><h4 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商:"></a>内容协商:</h4><p>支持客户端与服务器之间协商数据格式，如JSON、XML或其他内容类型，通过Content-Type和Accept头部来决定请求和响应的内容格式。</p><h4 id="过滤与排序："><a href="#过滤与排序：" class="headerlink" title="过滤与排序："></a>过滤与排序：</h4><p>提供对资源列表的过滤与排序功能，通常通过查询参数实现。</p><h4 id="分页与限制"><a href="#分页与限制" class="headerlink" title="分页与限制:"></a>分页与限制:</h4><p>当资源列表过长时，应提供分页功能，常见的做法是通过查询参数传递页码和每页数量</p><h4 id="字段选择"><a href="#字段选择" class="headerlink" title="字段选择:"></a>字段选择:</h4><p>允许客户端指定需要返回的资源字段，减少不必要的数据传输，提升性能</p><h4 id="必要时提供客户端SDK"><a href="#必要时提供客户端SDK" class="headerlink" title="必要时提供客户端SDK"></a>必要时提供客户端SDK</h4><p>简化开发流程:SDK充当了API与客户端应用程序之间的桥梁，通过预先封装好HTTP请求、响应处理、身份验证机制、错误处理等复杂的网络交互逻辑，降低了开发者直接调用API的难度和复杂性，提高了开发效率。</p><p>增强易用性:SDK通常会提供与目标编程语言更为契合的API接口和方法，使得开发者能以更加自然和便捷的方式调用API，从而专注于业务逻辑的开发，而不是处理低层级的技术细节。</p><p>标准化和一致性:SDK可以确保客户端与服务器间的交互遵循一致的标准和最佳实践，避免因开发者自行实现造成的不一致性问题，有利于保证API服务的安全性和稳定性。</p><p>提高用户体验:通过SDK可以实现诸如缓存、离线支持等功能，提升客户端应用的性能和用户体验，尤其是对于移动应用和弱网络环境下的表现尤为重要。</p><p>快速迭代与支持:当后台API发生变化或新增功能时，通过提供更新的SDK版本，可以让客户更容易地进行升级和适应，避免因API变动而导致的大量代码重构工作。</p><h4 id="测试与监控"><a href="#测试与监控" class="headerlink" title="测试与监控:"></a>测试与监控:</h4><p>设计API的同时应考虑到测试的便捷性，提供Swagger&#x2F;OpenAPI规范或类似的API描述文件可以帮助自动化测试。同时，为API添加日志记录、性能监控等功能，以便后期维护和优化。实现全面的API性能监控，包括但不限于响应时间、错误率、吞吐量等指标，以便及时发现并解决问题，同时，建立详细的日志系统，记录所有API调用行为及其相关数据，这对于排查问题和审计追踪至关重要。</p><h4 id="向后兼容与升级策略"><a href="#向后兼容与升级策略" class="headerlink" title="向后兼容与升级策略:"></a>向后兼容与升级策略:</h4><p>随着业务发展，API可能需要迭代更新。在设计初期就要考虑如何在不影响现有客户端的情况下升级API这可能涉及到版本控制、逐步弃用旧版本API及过渡策略等问题。在实际的RESTfuIAPI设计中，向后兼容和升级策略可能包括:</p><p>版本控制:就像手机系统会有1.0版、2.0版一样，API也可以加上版本号。当有重大更改时，可以发布一个<br>新的API版本，老版本维持运行一段时间，让开发者逐渐迁移到新版API上。</p><p>显式版本号:在APIURL中包含版本号，如https:<br>&#x2F;&#x2F;api.example.com&#x2F;v1&#x2F;users和<a href="https://api.example.com/v2/users%E5%88%86%E5%88%AB%E4%BB%A3%E8%A1%A8%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E7%9A%84%E7%94%A8%E6%88%B7%E6%8E%A5%E5%8F%A3%E3%80%82">https://api.example.com/v2/users分别代表不同版本的用户接口。</a></p><p>非破坏性变更:<br>尽可能地在不改变原有接口行为的前提下进行升级，比如新增字段但不删除原有的字段或者新增API路径而不是修改已有路径的行为。</p><p>兼容模式:在新版本中暂时保留一些旧的行为模式，即使它们已经被优化或替换，直到大部分用户完成迁移。</p><h4 id="标准化约束"><a href="#标准化约束" class="headerlink" title="标准化约束:"></a>标准化约束:</h4><p>尽量遵循现有的网络标准和最佳实践，例如RFC723x系列HTTP规范，确保API的行为可预测且与其他系统兼容。</p><h4 id="速率限制"><a href="#速率限制" class="headerlink" title="速率限制:"></a>速率限制:</h4><p>对于高负载的API，实施合理的速率限制策略，避免因恶意或过度的请求导致服务崩溃。应在API响应中提供有关剩余配额的信息，便于客户端做出相应的调整。</p><h4 id="认证与授权"><a href="#认证与授权" class="headerlink" title="认证与授权:"></a>认证与授权:</h4><p>引入多种认证方式，如基本认证、OAuth、JWT等，根据场景选择合适方案。授权方面，基于角色的访问控制(RBAC)或基于权限的访问控制(ABAC)<br>可以帮助定义不同用户或客户端对资源的操作权限。</p><h4 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作:"></a>批量操作:</h4><p>对于批处理操作，提供API支持，允许一次调用执行多个相关的操作，降低客户端与服务器间的通信开销。</p><p>你有一个电商应用，平常可能需要一次次发送请求去创建、更新或删除多个订单。采用批量操作的话，就可以在一个API请求中包含多个订单的数据，一次性完成这些操作，这样能大大提高效率，减少网络传输的开销。在RESTful<br>API设计中，批量操作可能体现为一个特定的接口，接收一个包含多个资源数据的集合作为输入参数，然后统一进行相应的操作处理。<br>不过要注意的是，批量操作虽然高效，但设计时也需要考虑其复杂性和可能带来的风险，例如错误处理和事务一致性等问题。</p><h4 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理:"></a>异步处理:</h4><p>有时POST、PUT、PATCH或DELETE操作可能需要一段时间才能完成的处理。如果等待处理完成再向客户端发送响应，可能会导致不可接受的延迟。<br>在这种情况下，应考虑将操作变为异步。返回HTTP状态码202(Accepted)，表示请求已被接受进行处理，但尚未完成。</p><p>应公开一个检查异步请求状态的端点，以便客户端可以通过轮询状态端点来监控状态。将状态端点的URI包含在202响应的Location头中。</p><p>客户端可以通过定期向上述Location头中提供的状态端点发送GET请求来获取异步操作的最新状态。当操作最终完成时，状态端点应返回适当的HTTP状态码(<br>如200或201表示成功，或者错误代码表示失败)，以及操作结果(如果适用)的相关信息。</p><h4 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略:"></a>缓存策略:</h4><p>对于那些不会频繁变动且计算成本较高的资源，适当引入缓存机制可以显著提升API性能。通过设置合适的HTTP缓存头(<br>如Cache-Control、ETag等)，让客户端和服务端协同实现高效的缓存管理。</p><p>Cache-Control</p><p>Cache-Control是HTTP头部的一个指令，用于控制缓存机制如何存储和检索缓存响应。它可以由服务器端或客户端设置，指示缓存何时可以使用已存储的响应，以及缓存应该保留多长时间。常见的一些指令包括:</p><p>max-age:定义从服务器响应发出开始，响应在客户端可以被认为是新鲜的最长时间(以秒为单位)。</p><p>no-cache: 告诉中间缓存不能直接使用存储的响应，必须先向服务器验证是否有更新版本。</p><p>public: 表明响应可以被任何缓存存储，即使是公共中间代理也可以。</p><p>private: 表示响应只能被单个用户私有缓存存储，不应由共享缓存(如CDN)存储。</p><p>must-revalidate:在缓存项过期后，要求缓存强制向原始服务器验证资源是否仍然有效。</p><p>ETagETag 全称为实体标签(Entity Tag)，是一种独特的服务器生成的资源版本标识符。</p><p>ETag的主要目的是帮助确认资源内容是否发生改变，从而决定是否可以从缓存中提供响应，或是需要从服务器获取新的副本，当服务器首次发送资源时，会在响应头部包含一个ETag值。</p><p>客户端在后续请求同一资源时，可以在请求头部包含If-None-Match头，附带之前收到的ETaq值。服务器收到请求后，对比请求中的If-None-Match与当前资源的ETag。如果二者匹配，说明资源内容未变，服务器将返回304<br>Not Modified响应，<br>告知客户端可以继续使用本地缓存的资源;如果不匹配，则说明资源已更新，服务器会发送新的资源内容及新的ETag值。</p><h4 id="安全性强化"><a href="#安全性强化" class="headerlink" title="安全性强化:"></a>安全性强化:</h4><p>加密通信:强制要求HTTPS连接，确保数据传输过程中的隐私和完整性。</p><p>防止跨站请求伪造(CSRF)攻击:对于需要用户身份验证的AP1，采取措施防范这类攻击，比如添加CSRF 令牌。</p><h4 id="健康检查与可用性"><a href="#健康检查与可用性" class="headerlink" title="健康检查与可用性:"></a>健康检查与可用性:</h4><p>提供一个专门的健康检查API端点，用于快速验证服务是否正常运行，这对于自动化的运维和故障恢复十分有用。</p><h4 id="API分层与网关"><a href="#API分层与网关" class="headerlink" title="API分层与网关:"></a>API分层与网关:</h4><p>在复杂的系统架构中，可能需要引入API网关来实现统一的安全策略、路由管理、限流熔断等功能，并且可以根据不同的层级划分内部服务接口和对外公开的API。</p><h4 id="回滚策略"><a href="#回滚策略" class="headerlink" title="回滚策略:"></a>回滚策略:</h4><p>在API发布新版本后，如果出现严重问题，应有一套快速回滚至先前稳定版本的预案，确保业务连续性</p><h4 id="API的可发现性"><a href="#API的可发现性" class="headerlink" title="API的可发现性:"></a>API的可发现性:</h4><p>通过目录服务或者API门户提供API清单，使开发者能够轻松查找和了解所有可用的API资源，从而提高API的利用率和推广效果。</p><h4 id="API性能优化"><a href="#API性能优化" class="headerlink" title="API性能优化:"></a>API性能优化:</h4><p>通过数据库索引优化、缓存策略、CDN加速、APl Gateway的负载均衡等方式提升API的性能表现，为用户提供更快捷的服务</p><h4 id="API的实时统计分析"><a href="#API的实时统计分析" class="headerlink" title="API的实时统计分析:"></a>API的实时统计分析:</h4><p>实施API调用实时统计和数据分析，洞察API的使用趋势、热点路径、潜在瓶颈等，为优化决策提供数据支持。</p><h4 id="API的自动化测试"><a href="#API的自动化测试" class="headerlink" title="API的自动化测试"></a>API的自动化测试</h4><p>编写单元测试、集成测试和契约测试，确保API的功能正确性，随着API的演变，保持测试覆盖率并及时更新测试用例。<br>API的文档更新同步:确保对应的API文档、示例代码和SDK等资料能及时更新，避免开发者依据过时文档编当API发生变化时，写代码导致的问题</p><h4 id="API的合规性考虑"><a href="#API的合规性考虑" class="headerlink" title="API的合规性考虑:"></a>API的合规性考虑:</h4><p>在设计API时要考虑法律法规的要求，例如GDPR对于数据隐私的规定，确保API的设计和使用符合相关法 规标准。</p><h4 id="API的扩展性设计"><a href="#API的扩展性设计" class="headerlink" title="API的扩展性设计:"></a>API的扩展性设计:</h4><p>考虑未来的业务拓展和技术变革，设计API时预留一定的扩展性，例如通过URL路径参数或查询参数灵活控制资源范围，或采用模块化设计以便后续增加新的功能组件。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>RestFulAPI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>后端开发</tag>
      
      <tag>求职</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tgBot建设指南</title>
    <link href="/2024/02/18/tgbot/"/>
    <url>/2024/02/18/tgbot/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>tg机器人自定义建设</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="tg"><a href="#tg" class="headerlink" title="tg"></a>tg</h2><h3 id="bot-father"><a href="#bot-father" class="headerlink" title="bot father"></a>bot father</h3><p><code>BotFather</code>是所有tg机器人的管理超集。自建所有机器人都需要你去关注。通过它去申请。命令行输入<code>/help</code>，帮助你快速入门。</p><ul><li>&#x2F;newbot：根据提示输入一个名字，命名你的bot。</li><li>&#x2F;mybot：显示你所有的bot。选择你要编辑的bot，根据提示，可以进行修改信息。</li><li>回声机器人示例：<a href="https://api.telegram.org/bot%E8%BF%99%E9%87%8C%E6%94%BE%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84token/setWebhook?url=%E8%BF%99%E9%87%8C%E6%94%BEurlEncode%E8%BF%87%E7%9A%84%E8%B0%B7%E6%AD%8C%E7%9A%84%E5%8F%91%E5%B8%83%E9%93%BE%E6%8E%A5">https://api.telegram.org/bot这里放机器人的token/setWebhook?url=这里放urlEncode过的谷歌的发布链接</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 回声机器人example code， 在script.google.com 发布web应用</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">doGet</span>(<span class="hljs-params">e</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">HtmlService</span>.<span class="hljs-title function_">createHtmlOutput</span>(<span class="hljs-string">&quot;Hello World!! No, this link should be hidden!!!&quot;</span>);<br>&#125;<br> <br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">doPost</span>(<span class="hljs-params">e</span>)&#123;<br>  <span class="hljs-keyword">var</span> dataFromTelegram = &#123;<br>    <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>    <span class="hljs-string">&quot;payload&quot;</span>: e.<span class="hljs-property">postData</span>.<span class="hljs-property">contents</span><br>  &#125;<br>  <span class="hljs-keyword">var</span> body = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(e.<span class="hljs-property">postData</span>.<span class="hljs-property">contents</span>);<br>   <br>  body.<span class="hljs-property">message</span>.<span class="hljs-property">chat</span>.<span class="hljs-property">id</span> = body.<span class="hljs-property">message</span>.<span class="hljs-property">chat</span>.<span class="hljs-property">id</span> + <span class="hljs-string">&#x27;&#x27;</span>;<br> <br>  <span class="hljs-keyword">var</span> payload = <span class="hljs-title function_">preparePayload</span>(body);<br>  <span class="hljs-keyword">var</span> data = &#123;<br>    <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>    <span class="hljs-string">&quot;payload&quot;</span>: payload<br>  &#125;<br>   <br>  <span class="hljs-keyword">var</span> dataToTelegram = &#123;<br>    <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>    <span class="hljs-string">&quot;payload&quot;</span>: payload<br>  &#125;<br><br>    <span class="hljs-title class_">UrlFetchApp</span>.<span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;https://api.telegram.org/bot6304269456:AAGuHC11OZtYZ6fPUbeNOXa2CneIo5M05jE/&quot;</span>, data);<br>    <span class="hljs-comment">// UrlFetchApp.fetch(&quot;https://api.telegram.org/bot-- 此处填入你的bot token--/&quot;, data);</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">preparePayload</span>(<span class="hljs-params">body</span>)&#123;<br>  <span class="hljs-keyword">var</span> payload;<br>   <br>  <span class="hljs-keyword">if</span> (body.<span class="hljs-property">message</span>.<span class="hljs-property">text</span>)&#123;<br>      payload = &#123;<br>          <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;sendMessage&quot;</span>,<br>          <span class="hljs-string">&quot;chat_id&quot;</span>: body.<span class="hljs-property">message</span>.<span class="hljs-property">chat</span>.<span class="hljs-property">id</span>,<br>          <span class="hljs-string">&quot;text&quot;</span>: body.<span class="hljs-property">message</span>.<span class="hljs-property">text</span>,<br>      &#125; <br>     <br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (body.<span class="hljs-property">message</span>.<span class="hljs-property">sticker</span>)&#123;<br>    payload = &#123;<br>      <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;sendSticker&quot;</span>,<br>      <span class="hljs-string">&quot;chat_id&quot;</span>: body.<span class="hljs-property">message</span>.<span class="hljs-property">chat</span>.<span class="hljs-property">id</span>,<br>      <span class="hljs-string">&quot;sticker&quot;</span>: body.<span class="hljs-property">message</span>.<span class="hljs-property">sticker</span>.<span class="hljs-property">file_id</span><br>    &#125;<br>   &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (body.<span class="hljs-property">message</span>.<span class="hljs-property">photo</span>)&#123;<br>    array = body.<span class="hljs-property">message</span>.<span class="hljs-property">photo</span>;<br>    text = array[<span class="hljs-number">1</span>];<br>    payload = &#123;<br>      <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;sendPhoto&quot;</span>,<br>      <span class="hljs-string">&quot;chat_id&quot;</span>: body.<span class="hljs-property">message</span>.<span class="hljs-property">chat</span>.<span class="hljs-property">id</span>,<br>      <span class="hljs-string">&quot;photo&quot;</span>: text.<span class="hljs-property">file_id</span><br>    &#125;<br>   &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>    payload = &#123;<br>      <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;sendMessage&quot;</span>,<br>      <span class="hljs-string">&quot;chat_id&quot;</span>: body.<span class="hljs-property">message</span>.<span class="hljs-property">chat</span>.<span class="hljs-property">id</span>,<br>      <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Try other stuff&quot;</span><br>    &#125;<br>   &#125;<br>  <span class="hljs-keyword">return</span> payload<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// code.gs 去tuling123.com 注册账号。开通机器人，到script.google.com 发布下面代码，按照提示修改。</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">doPost</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">var</span> body = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(e.<span class="hljs-property">postData</span>.<span class="hljs-property">contents</span>);<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">checkIsMyMessage</span>(body))&#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br> <br>  <span class="hljs-keyword">if</span> (body.<span class="hljs-property">message</span> &amp;&amp; body.<span class="hljs-property">message</span>.<span class="hljs-property">chat</span>)&#123;<br>    body.<span class="hljs-property">message</span>.<span class="hljs-property">chat</span>.<span class="hljs-property">id</span> = body.<span class="hljs-property">message</span>.<span class="hljs-property">chat</span>.<span class="hljs-property">id</span> + <span class="hljs-string">&#x27;&#x27;</span>;<br>  &#125;<br> <br>  <span class="hljs-keyword">var</span> payload = <span class="hljs-title function_">tulinBotPayload</span>(body);<br>  <span class="hljs-keyword">var</span> payloads;<br> <br>  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(payload))&#123;<br>    payloads = payload;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    payloads = [payload]<br>  &#125;<br> <br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; payloads.<span class="hljs-property">length</span>; i++)&#123;<br>    payload = payloads[i];<br>    <span class="hljs-keyword">if</span> (payload)&#123;<br>      <span class="hljs-keyword">var</span> res = <span class="hljs-title class_">PostTelegram</span>(payload);<br>    &#125;<br>  &#125;<br> <br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">tulinBotPayload</span>(<span class="hljs-params">body</span>) &#123;<br>  <span class="hljs-keyword">var</span> payload;<br>  <span class="hljs-keyword">var</span> chatId = body.<span class="hljs-property">message</span>.<span class="hljs-property">chat</span>.<span class="hljs-property">id</span>;<br>  payload = &#123;<br>    <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;sendMessage&quot;</span>,<br>    <span class="hljs-string">&quot;chat_id&quot;</span>: chatId,<br>    <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;disable_web_page_preview&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;reply_to_message_id&quot;</span>: body.<span class="hljs-property">message</span>.<span class="hljs-property">message_id</span>,<br>  &#125;;<br> <br>  <span class="hljs-keyword">var</span> tulinReq = &#123;<br>    <span class="hljs-string">&quot;reqType&quot;</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-string">&quot;perception&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;inputText&quot;</span>: &#123;<br>              <span class="hljs-comment">// tulinjiqirenbot 改成你自己机器人的名字</span><br>              <span class="hljs-string">&quot;text&quot;</span>: body.<span class="hljs-property">message</span>.<span class="hljs-property">text</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;@tulinjiqirenBot&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>          &#125;<br>          <br>      &#125;,<br>      <span class="hljs-string">&quot;userInfo&quot;</span>: &#123;<br>        <span class="hljs-comment">// 改成你自己的图灵机器人的apikey 和 userId</span><br>          <span class="hljs-string">&quot;apiKey&quot;</span>: <span class="hljs-string">&quot;4e8395e7721046e38e9c610de725edd7&quot;</span>,<br>          <span class="hljs-string">&quot;userId&quot;</span>: <span class="hljs-string">&quot;339657&quot;</span><br>      &#125;<br>  &#125;;<br> <br> <br>  <span class="hljs-keyword">var</span> data = &#123;<br>    <span class="hljs-string">&#x27;contentType&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>    <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>    <span class="hljs-string">&quot;payload&quot;</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(tulinReq)<br>  &#125;;<br> <br>  <span class="hljs-keyword">var</span> response = <span class="hljs-title class_">UrlFetchApp</span>.<span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://openapi.tuling123.com/openapi/api/v2&quot;</span>, data);<br>  <span class="hljs-keyword">var</span> res = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(response);<br> <br>  <span class="hljs-keyword">if</span> (res.<span class="hljs-property">results</span> &amp;&amp; res.<span class="hljs-property">results</span>[<span class="hljs-number">0</span>].<span class="hljs-property">values</span> &amp;&amp; res.<span class="hljs-property">results</span>[<span class="hljs-number">0</span>].<span class="hljs-property">values</span>.<span class="hljs-property">text</span>) &#123;<br>    payload.<span class="hljs-property">text</span> = res.<span class="hljs-property">results</span>[<span class="hljs-number">0</span>].<span class="hljs-property">values</span>.<span class="hljs-property">text</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> payload;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isPrivate</span>(<span class="hljs-params">body</span>) &#123;<br>  <span class="hljs-keyword">var</span> share =  <span class="hljs-title function_">getShareObject</span>(body);<br>  <span class="hljs-keyword">var</span> chat = share.<span class="hljs-property">chat</span>;<br>  <span class="hljs-keyword">if</span> (chat.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;private&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">PostTelegram</span>(<span class="hljs-params">payload</span>) &#123;<br>  <span class="hljs-keyword">var</span> data = &#123;<br>    <span class="hljs-string">&#x27;contentType&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>    <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>    <span class="hljs-string">&quot;payload&quot;</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(payload)<br>  &#125;;<br> <br>  <span class="hljs-comment">// 改成你自己机器人的 API token</span><br>  <span class="hljs-keyword">var</span> response = <span class="hljs-title class_">UrlFetchApp</span>.<span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;https://api.telegram.org/bot750371992:AAGTJC08Gg3g9I-gVm6BkAb30wsMVyQMbUI/&quot;</span>, data);<br>  <span class="hljs-keyword">var</span> res = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(response);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkIsMyMessage</span>(<span class="hljs-params">body</span>)&#123;<br>  <span class="hljs-keyword">var</span> text = body.<span class="hljs-property">message</span>.<span class="hljs-property">text</span>;<br> <br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isPrivate</span>(body))&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br> <br>  <span class="hljs-keyword">if</span> (body.<span class="hljs-property">message</span>.<span class="hljs-property">reply_to_message</span>) &#123;<br><span class="hljs-comment">//这里的ＩＤ要改成你自己机器人的ＩＤ， 之前视频里忘讲了</span><br>    <span class="hljs-keyword">if</span> (body.<span class="hljs-property">message</span>.<span class="hljs-property">reply_to_message</span>.<span class="hljs-property">from</span>.<span class="hljs-property">id</span> == <span class="hljs-number">750371992</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;<br> <br><span class="hljs-comment">// 如果找不到机器人的ID， 可以用以下这段代码代替， 换成你自己机器人的名字</span><br> <span class="hljs-comment">// if (body.message.reply_to_message) &#123;</span><br>  <span class="hljs-comment">//  if (body.message.reply_to_message.from.username == &quot;tulinjiqirenBot&quot;) &#123;</span><br>  <span class="hljs-comment">//    return true;</span><br>  <span class="hljs-comment">//  &#125;</span><br> <span class="hljs-comment">// &#125;﻿</span><br> <br>  <span class="hljs-keyword">if</span> (text) &#123;<br>    <span class="hljs-keyword">var</span> paras = text.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>);<br>    <span class="hljs-keyword">if</span> (paras[<span class="hljs-number">0</span>] &amp;&amp; paras[<span class="hljs-number">0</span>].<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;@&quot;</span>) &gt;= <span class="hljs-number">0</span>)&#123;<br>      <span class="hljs-comment">// tulinjiqirenbot 改成你自己机器人的名字， 全部小写</span><br>      <span class="hljs-keyword">if</span>  (paras[<span class="hljs-number">0</span>].<span class="hljs-title function_">toLowerCase</span>().<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;tulinjiqirenbot&quot;</span>) &gt;= <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getShareObject</span>(<span class="hljs-params">body</span>) &#123;<br>  <span class="hljs-keyword">var</span> payload;<br>  <span class="hljs-keyword">var</span> <span class="hljs-keyword">from</span>;<br>  <span class="hljs-keyword">var</span> chat;<br>  <span class="hljs-keyword">var</span> messageId;<br>  <span class="hljs-keyword">var</span> callback_query_id;<br> <br>  <span class="hljs-comment">// use editMessage method instead if it&#x27;s a callback </span><br>  <span class="hljs-keyword">if</span> (body.<span class="hljs-property">callback_query</span>) &#123;<br>    chat = body.<span class="hljs-property">callback_query</span>.<span class="hljs-property">message</span>.<span class="hljs-property">chat</span>;<br>    chat.<span class="hljs-property">id</span> = chat.<span class="hljs-property">id</span> + <span class="hljs-string">&quot;&quot;</span>;<br>    messageId = body.<span class="hljs-property">callback_query</span>.<span class="hljs-property">message</span>.<span class="hljs-property">message_id</span>;<br>    <span class="hljs-keyword">from</span> = body.<span class="hljs-property">callback_query</span>.<span class="hljs-property">from</span>;<br>    callback_query_id = body.<span class="hljs-property">callback_query</span>.<span class="hljs-property">id</span>;<br>    payload = &#123;<br>      <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;editMessageText&quot;</span>,<br>      <span class="hljs-string">&quot;chat_id&quot;</span>: chat.<span class="hljs-property">id</span>,<br>      <span class="hljs-string">&quot;message_id&quot;</span>: messageId,<br>      <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>      <span class="hljs-string">&quot;parse_mode&quot;</span>: <span class="hljs-string">&quot;markdown&quot;</span>,<br>      <span class="hljs-string">&quot;disable_web_page_preview&quot;</span>: <span class="hljs-literal">false</span>,<br>    &#125;;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">from</span> = body.<span class="hljs-property">message</span>.<span class="hljs-property">from</span>;<br>    chat = body.<span class="hljs-property">message</span>.<span class="hljs-property">chat</span>;<br>    chat.<span class="hljs-property">id</span> = chat.<span class="hljs-property">id</span> + <span class="hljs-string">&quot;&quot;</span>;<br>    messageId = body.<span class="hljs-property">message</span>.<span class="hljs-property">message_id</span>;<br>    payload = &#123;<br>      <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;sendMessage&quot;</span>,<br>      <span class="hljs-string">&quot;chat_id&quot;</span>: chat.<span class="hljs-property">id</span>,<br>      <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>      <span class="hljs-string">&quot;parse_mode&quot;</span>: <span class="hljs-string">&quot;markdown&quot;</span>,<br>      <span class="hljs-string">&quot;disable_web_page_preview&quot;</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-string">&quot;reply_to_message_id&quot;</span>: messageId,<br>    &#125;;<br> <br>  &#125;<br> <br>  <span class="hljs-keyword">var</span> share = &#123;&#125;;<br>  share.<span class="hljs-property">payload</span> = payload;<br>  share.<span class="hljs-property">from</span> = <span class="hljs-keyword">from</span>;<br>  share.<span class="hljs-property">chat</span> = chat;<br>  share.<span class="hljs-property">messageId</span> = messageId;<br>  share.<span class="hljs-property">callback_query_id</span> = callback_query_id;<br> <br>  <span class="hljs-keyword">return</span> share;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.youtube.com/watch?v=s5A8uIxD31s&list=PL3dZh-p-vVofZ0BOQ4LnPlhJV3sVAQX8h&index=1">油管教程链接</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>tg机器人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WireShark网络分析</title>
    <link href="/2024/01/20/wireshark/"/>
    <url>/2024/01/20/wireshark/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>WireShark网络分析</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="WireShark网络分析"><a href="#WireShark网络分析" class="headerlink" title="WireShark网络分析"></a>WireShark网络分析</h2><p>wireshark是目前全球使用最广泛的开源抓包软件(前身为Etherea1)，是一个通用化的网络数据探器和协议分析器，由Gerald<br>Combs编写并于198年以GPL开源许可证发布。如果是网络工程师了<br>可以通过Wrehark对网络进行故障定位和排错，如果是安全工程师，可以通过wireshark对网络黑:<br>渗透攻击进行快速定位并找出攻击源，如果是测试或者软件工程师，可以通过wireshark分析底层通信机制等等。</p><p>wireshark作为网络分析最佳利器之一，是1T技术人士必备利器，但是鉴于国内没有相关的中文教材和完整系统的课程视频，特推出本套教学视频。本套视频从基础到进阶再到高级，分为三个阶段，层层递进，带你从入门到精通，掌握wireshark的奥秘之处!<br>第一部分主要讲解Wireshark工具使用第二部分则通过Wireshark对网络协议包括TP&#x2F;IP协议栈、路由协议(RP&#x2F;EIGRP&#x2F;OSPP&#x2F;1SIS&#x2F;BGP)<br>交换协议 (TRUNK&#x2F;VTP&#x2F;STP&#x2F;HSRP)等进行底层分析，第三部分则将wireshark引入真实网络情景，分析常见网络真实流量、网络故障、黑客攻击等等。</p><h3 id="软件使用调试"><a href="#软件使用调试" class="headerlink" title="软件使用调试"></a>软件使用调试</h3><h4 id="安装入门"><a href="#安装入门" class="headerlink" title="安装入门"></a>安装入门</h4><p>傻瓜式安装</p><ul><li><p><a href="https://www.wireshark.org/">下载官网</a></p></li><li><p><a href="http://www.wiresharkbook.com/">相关书籍</a></p></li><li><p><a href="http://wiki.wireshark.org/">wiki</a></p></li></ul><p>同款软件</p><ul><li>Sniffer</li><li>omnipeek</li><li>fiddler</li><li>httpwatch</li></ul><p>抓包原理</p><ul><li><p>本机环境</p><p>直接抓包网卡流量</p></li><li><p>集线器环境</p><p>流量防洪，同一冲突域</p></li><li><p>交换机环境</p><p>端口镜像、ARP欺骗、MAC泛洪</p></li></ul><h4 id="进阶调试"><a href="#进阶调试" class="headerlink" title="进阶调试"></a>进阶调试</h4><p>界面设置</p><ul><li>页面显示</li><li>列设置</li><li>时间设置</li><li>名字解析</li></ul><p>数据包操作</p><ul><li>标记</li><li>注释</li><li>合并</li><li>打印</li><li>导出</li></ul><p>首选项设置</p><ul><li>功能</li><li>路径</li><li>过滤器</li><li>抓包选项</li><li>协议树</li></ul><h4 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h4><h3 id="协议分析实战"><a href="#协议分析实战" class="headerlink" title="协议分析实战"></a>协议分析实战</h3><h4 id="分析TCP-IP协议栈"><a href="#分析TCP-IP协议栈" class="headerlink" title="分析TCP&#x2F;IP协议栈"></a>分析TCP&#x2F;IP协议栈</h4><h4 id="分析路由协议"><a href="#分析路由协议" class="headerlink" title="分析路由协议"></a>分析路由协议</h4><h4 id="分析交换协议"><a href="#分析交换协议" class="headerlink" title="分析交换协议"></a>分析交换协议</h4><h3 id="网络故障分析"><a href="#网络故障分析" class="headerlink" title="网络故障分析"></a>网络故障分析</h3><h4 id="分析真实网络流量"><a href="#分析真实网络流量" class="headerlink" title="分析真实网络流量"></a>分析真实网络流量</h4><h4 id="分析常见网络故障"><a href="#分析常见网络故障" class="headerlink" title="分析常见网络故障"></a>分析常见网络故障</h4><h4 id="分析常见网络攻击"><a href="#分析常见网络攻击" class="headerlink" title="分析常见网络攻击"></a>分析常见网络攻击</h4><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《WireShark网络分析就是这么简单》</li><li>《Wireshark数据包分析实战》 第二版</li><li>《wireshark网络分析&gt;第二版</li><li>《TCP&#x2F;IP协议栈详解卷一》</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WireShark</tag>
      
      <tag>网络分析</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>副业资源分享</title>
    <link href="/2024/01/13/data_sharing2/"/>
    <url>/2024/01/13/data_sharing2/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>创业相关分享</code>。<br>其中包括了关于我的经验和收集的知识分享。资源来源网络。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>先免责声明，资源来自网络，侵权，请到<a href="https://github.com/AllenDEricDAlexander/AllenDEricDAlexander.github.io">github</a><br>提交<code>Issue</code>，我将在看到的第一时间处理。</p><p>请遵守知识共享协议，转载请署名，禁止演绎，非商业性使用！</p><p>资源来自互联网，请继续保持<code>开放共享</code>的精神。</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="免费的市场报告"><a href="#免费的市场报告" class="headerlink" title="免费的市场报告"></a>免费的市场报告</h3><p>自由职业者去哪看免费的市场报告，整理如下，希望有用</p><p>一、细分行业研究网站<br>1 直播观察 （直播） iresearch.tv&#x2F;<br>2 DataEye （游戏） dataeye.com&#x2F;report<br>3 中国音数协游戏工委 （游戏） cgigc.com.cn&#x2F;<br>4 旅游圈 （旅游） dotour.cn&#x2F;topics&#x2F;data<br>5 艺恩网 （泛娱乐） dataeye.com&#x2F;report<br>6 亿邦动力 （电商） ebrun.com&#x2F;<br>7 芥末堆 （教育） jiemodui.com&#x2F;<br>8 动脉网 （医疗） tIndex<br>9 星图数据 （电商） hotspot.html<br>10 百度慧眼 （交通） huiyan.baidu.com&#x2F;report</p><p>二、研究报告发布网站<br>1<br>镝数聚（覆盖100+行业报告及数据，更新及时，支持报告与数据交叉查询，80%可以免费下载）<a href="https://www.dydata.io/?channelCode=ZAU5ZUR2&hmsr=zh-hl">https://www.dydata.io/?channelCode=ZAU5ZUR2&amp;hmsr=zh-hl</a><br>2 艾瑞网 （互联网行业报告、APP日活月活查询） report.iresearch.cn&#x2F;<br>3199IT （报告集合引擎） 199it.com&#x2F;<br>4 CNNIC （互联网发展研究报告） wxzbg&#x2F;<br>5 TalkingData （互联网研究报告） rts.html?category&#x3D;IndustryReport<br>6艾媒网 （互联网研究报告） iimedia.cn&#x2F;<br>7 36氪 （互联网研究报告） 36kr.com&#x2F;<br>8尼尔森 （仅参考） nielsen.com&#x2F;cn&#x2F;zh.html<br>9友盟+ （仅参考） info.umeng.com&#x2F;<br>10梅花网 （营销信息、咨讯） meihua.info&#x2F;<br>11企鹅智库 （互联网研究报告） re.qq.com&#x2F;<br>12 速途网 （数字新媒体产业咨讯） sootoo.com&#x2F;<br>13 沃顿知识在线 （仅参考） <a href="http://www.knowledgeatwharton.com.cn/">http://www.knowledgeatwharton.com.cn</a><br>14 互联网的那些事 （互联网咨讯） alibuybuy.com&#x2F;<br>15 知识库 （研究报告） useit.com.cn&#x2F;<br>16 ipsos中国 （供参考） ge&#x2F;overview<br>17 腾讯大讲堂 （讲座PPT） djt.qq.com&#x2F;ppts&#x2F;<br>18 阿里研究院 （供参考） aliresearch.com&#x2F;<br>19 微报告 （研究报告） data.weibo.com&#x2F;report&#x2F;r<br>20 皮匠网 （专题研究报告合集） 3mbang.com&#x2F;<br>21 百度文库 （研究报告） wenku.baidu.com&#x2F;<br>22 MBA智库 （研究报告） doc.mbalib.com&#x2F;<br>23 Trustdata （研究报告） publish<br>24 极光 （研究报告） jiguang.cn&#x2F;reports<br>25 普华永道 （行业研究报告） pwccn.com&#x2F;zh.html<br>26 QuestMobile （行业研究报告） arch&#x2F;report-new<br>27 胡富百润 （行业研究报告） ndex<br>28 麦肯锡 （洞见和麦肯锡季刊板块） mckinsey.com.cn&#x2F;<br>29 罗兰贝格 （行业研究报告） rolandberger.com&#x2F;zh&#x2F;?<br>30 埃森哲 （行业研究报告） -applied-now<br>31 CDC （仅参考） cdc.tencent.com&#x2F;<br>32 第一财经商业数据中心 （消费数据报告） cbndata.com&#x2F;report<br>33 搜狗微信搜索 （微信公众号文章） weixin.sogou.com&#x2F;<br>34 钛媒体 （研究报告，多数收费） tmtpost.com&#x2F;<br>35 T媒体 （研究报告） cniteyes.com&#x2F;document<br>36 国双数据中心 （研究报告） ata.html<br>37 无限向溯 （研究报告） l<br>38 数说故事 （研究报告） datastory.com.cn&#x2F;report<br>39 亿欧智库 （研究报告） iyiou.com&#x2F;<br>40 比达网 （研究报告） bigdata-research.cn&#x2F;<br>41 凯度中国 （消费研究报告） &#x2F;publications&#x2F;China-Insights<br>42 清科研究中心 （仅参考） report.pedata.cn&#x2F;</p><p>三、政策发布网站<br>1 中国政府网 （综合政策发布） gov.cn&#x2F;<br>2 国家新闻出版广电总局 （视听政策发布） sapprft.gov.cn&#x2F;<br>3 国家互联网信息办公室 （互联网相关管理规定发布） cac.gov.cn&#x2F;<br>4 中国人民工业和信息化部 （行业政策发布） miit.gov.cn&#x2F;<br>5 国家互联网应急中心 （网络安全周报、网络安全新闻资讯发布） cert.org.cn&#x2F;<br>6 国家工商行政管理总局 （互联网广告和消费管理政策发布） saic.gov.cn&#x2F;<br>7 中国网络视听节目服务协会 （视听资讯发布、政策转载） cnsa.cn&#x2F;<br>8 中华人民共和国商务部 （经济政策发布） mofcom.gov.cn&#x2F;</p><p>四、投资机构的统计网站<br>1 参照系 （细分行业公司列表） canzhaoxi.com.cn&#x2F;report<br>2 IT桔子 （付费） itjuzi.com&#x2F;<br>3 天天投 （细分行业公司列表） evervc.com&#x2F;<br>4 投中网 chinaventure.com.cn&#x2F;<br>5 CB Insights （独角兽公司列表） cbinsights.com&#x2F;</p><p>五、APP数据查询网站<br>1 七麦数据 （APP榜单） qimai.cn&#x2F;<br>2 艾瑞数据 （APP榜单） app<br>3 易观千帆指数 （APP榜单） zhishu.analysys.cn&#x2F;<br>4 App Annie （APP榜单） s&#x2F;<br>5 新榜 （公众号、小程序、微博、头条号等数据） newrank.cn&#x2F;index.html<br>6 酷传 （APP榜单） kuchuan.com&#x2F;</p><ul><li><p>名称：AI行业资料-.6月（357份）</p><p>描述：这份资料包含了很多AI行业资料，不仅有行业报告、AI工具、ChatGPT等大模型以及大家最想要的AI绘画资料 。</p><p>链接：<a href="https://pan.quark.cn/s/09e05cf0857b">https://pan.quark.cn/s/09e05cf0857b</a></p></li></ul><h3 id="副业"><a href="#副业" class="headerlink" title="副业"></a>副业</h3><ul><li><p>名称：小餐饮小吃行业创业培训课程</p><p>描述：这门小小吃行业创业培训课程将为您提供在餐饮和食品行业中创业所需的核心知识和技能。您将学习如何开办一个小吃店和管理它，包括财务管理、人力资源管理以及市场推广。通过本课程，您将准备好与竞争激烈的小餐饮市场展开较量。</p><p>链接：<a href="https://pan.quark.cn/s/83cf6e4cb0b5">https://pan.quark.cn/s/83cf6e4cb0b5</a></p></li><li><p>下班后易学易做100个赚钱小生意.pdf</p><p><a href="https://www.alipan.com/s/Vgvm61YXDyn">https://www.alipan.com/s/Vgvm61YXDyn</a></p></li><li><p>名称：互联网人副业指南 传授思维与方法 启动你的首个项目</p><p>描述：专为互联网人打造，超越市面大多副业课，从0到1掌握副业成功密码。</p><p>链接：<a href="https://www.alipan.com/s/WRmp1y2GF3n">https://www.alipan.com/s/WRmp1y2GF3n</a></p></li><li><p>名称：Midjourney-AI人工智能 文本绘画培训班：初级篇&#x2F;中级篇&#x2F;高级篇（17节）</p><p>描述：Midjourney Al绘画系统课程</p><p>链接：<a href="https://pan.quark.cn/s/dafa37e4bf26">https://pan.quark.cn/s/dafa37e4bf26</a></p></li><li><p>名称：闲鱼电商运营全系统VIP实战课，1部手机随时随地卖货，新手日出30单月入5000</p><p>链接：<a href="https://pan.quark.cn/s/e2a2a07966f3">https://pan.quark.cn/s/e2a2a07966f3</a></p></li><li><p>资源标题：如何降低知识付费的沉没成本</p><p>资源描述：如何降低知识付费的沉没成本</p><p>链接：<a href="https://pan.quark.cn/s/e8c385320df9">https://pan.quark.cn/s/e8c385320df9</a></p></li><li><p>名称：【轻松复制小红书爆款笔记】快速引爆流量！</p><p>描述：操作简单，一键克隆爆款文章视频，作品加热！</p><p>链接：<a href="https://pan.quark.cn/s/44c3e2376744">https://pan.quark.cn/s/44c3e2376744</a></p></li><li><p>名称：营销老A《更懂商业的AI人工智能课》</p><p>描述：课程包含AI的常用技巧，更有营销核心课程，如营销本质、爆品、数据分析、品牌传播等。学习AI的同时，让你成为营销高手，实现商业成功。</p><p>链接：<a href="https://pan.quark.cn/s/378b4a682e90">https://pan.quark.cn/s/378b4a682e90</a></p></li><li><p>名称:AI商业实操攻略</p><p>描述:34节AI商业详细实战教程，教你如何在生活和工作中有效利用人工智能。</p><p>链接:<a href="https://pan,quark.cn/s/21d726dea333">https://pan,quark.cn/s/21d726dea333</a></p></li></ul><h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><ul><li><p>名称：16节给决策者的战略视频课程</p><p>描述：这个战略视频为提供了16节精彩内容，涵盖了战略规划、市场分析、竞争优势、创新策略等关键主题。通过这些课程，决策者将学习到实用的战略工具和框架，帮助他们制定明智的商业决策并提升组织的竞争力。每节课都有生动的案例分析和实际应用，让学员能够迅速掌握并运用所学知识。无论是新手还是有经验的决策者，都能从中获得宝贵的战略洞见和指导。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/581b797369bd">https://pan.quark.cn/s/581b797369bd</a></p></li><li><p>名称：改变人生认知不是靠懂很多道理</p><p>描述：这门课程将帮助你颠覆传统认知，通过实践和思考改变对生活的看法。我们不只是灌输理论，而是引导学员在行动中领悟。通过案例分析和互动讨论，学员将重新审视生活，并学会以全新角度看待挑战。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/01070658443b">https://pan.quark.cn/s/01070658443b</a></p></li><li><p>名称：【博商学院】商业模式创新案例68讲 - 带源码课件</p><p>描述：《郑翔洲商业模式创新案例68讲》9小时完整课程，中小企业转型升级必修课价值2999元。精选20+传统行业案例用“郑氏商业模式方法论”不单单能为创业提供思路，还能为转型指明方向更能为炒股提供最前沿的指南(<br>在股评家那里学不到的方法论在资本运营的理念进行分析企业。</p><p>链接：<a href="https://www.alipan.com/s/VR62Y2evEcX">https://www.alipan.com/s/VR62Y2evEcX</a></p></li><li><p>名称：带你走进项目管理的世界</p><p>描述：项目管理，作为现代管理学的重要分支，已经深入到各行各业，成为推动社会发展和企业进步的不可或缺的力量。本课程以深入浅出的方式，带领学习者走进项目管理的世界，理解并掌握其核心理念和实践方法。</p><p>链接：<a href="https://pan.quark.cn/s/0e50eef29c1b">https://pan.quark.cn/s/0e50eef29c1b</a></p></li><li><p>名称：三合一组织管理+招聘+人才</p><p>描述：该课程融合了组织管理、招聘和人才培养的关键要点。涵盖领导力发展、招聘策略以及员工培训。<br>学员将全面掌握组织管理的关键概念，提高招聘技巧，并有效培养和管理人才，以应对现代企业的挑战。</p><p>链接：<a href="https://pan.quark.cn/s/75ef7cd0c9df">https://pan.quark.cn/s/75ef7cd0c9df</a></p></li><li><p>名称：结构思考力透过结构看思考</p><p>描述：是人脑对客观事物间接的、概括的反映能力。当人们在学会观察事物之后，他逐渐会把各种不同的物品、事件、经验分类归纳，不同的类型他都能通过思维进行概括。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/6e2fbe7a6665">https://pan.quark.cn/s/6e2fbe7a6665</a></p></li><li><p>名称：从0-1帮你搭建系统商业知识框架</p><p>描述：一门全面介绍商业知识的课程。通过深入浅出的讲解，帮助学习者了解商业模式、市场分析、竞争策略等关键概念。课程以实例和案例为主，结合理论与实践，帮助学员构建系统化的商业思维框架，为创业或职场发展提供有力支持。<br>建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/3025b4cb97aa">https://pan.quark.cn/s/3025b4cb97aa</a></p></li><li><p>名称：4小时带你讲完《微观经济学》</p><p>描述：这个4小时的《》课程将全面介绍微观经济学的基本概念和原理，包括供求关系、市场结构、消费者行为、生产与成本等内容。通过简洁明了的讲解和实例分析，帮助学生快速掌握微观经济学的核心知识，为更深入的学习打下坚实基础。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/130a4a2a674d">https://pan.quark.cn/s/130a4a2a674d</a></p></li><li><p>名称：5分钟200讲定位思维战略</p><p>描述：这门课程将在5分钟内为您介绍战略，帮助您了解如何在市场竞争中找到自己的独特位置。通过简洁明了的讲解和实例分析，您将学会如何确定目标受众、区分竞争对手、塑造品牌形象，并制定有效的营销策略。快速获得有关定位思维战略的关键知识，提升您的市场竞争力！建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/c2a5856c0cbe">https://pan.quark.cn/s/c2a5856c0cbe</a></p></li><li><p>名称：4节找准战略定位利润翻上一倍</p><p>描述：“4节战略定位利润翻上一倍”是一门专注于帮助在商业领域中实现快速增长的课程。通过系统性的教学和案例分析，学员将学习到如何找准市场需求、制定确切的战略定位以及优化运营模式，从而实现利润翻倍的目标。课程紧密结合实践，提供丰富的工具和技巧，帮助学员在竞争激烈的商业环境中取得突破性的成果。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/9c29533f59fb">https://pan.quark.cn/s/9c29533f59fb</a></p></li><li><p>名称：数字化时代的管理训练20集</p><p>描述：时代企业更需要组织学习，巨变的环境下，未知大过已知，只有学习者掌握未来，管理的核心是激活人。要让企业具有组织学习力，从而变得更有成长性。正和岛·首席管理学家陈春花老师带领你快速驾驭数字化管理的前沿模式，轻松抓住管理的命脉，提升企业经营力，让提质增效。</p><p>链接：<a href="https://pan.quark.cn/s/4368abe71e1a">https://pan.quark.cn/s/4368abe71e1a</a></p></li><li><p>名称：股权激励与合伙人设计线上课</p><p>描述：本课程将介绍股权激励和设计的基本概念，包括股票期权、限制性股票、股票奖励计划等常见形式，以及不同类型的合伙制度如何为企业带来优势。通过这些知识点，学生们将了解如何制定和实施能够吸引和留住最优秀员工的股权激励计划，并学会根据公司规模、经营模式和行业特点等因素，对合伙人体系进行必要的设计调整，以达到更好的业务成果。</p><p>链接：<a href="https://pan.quark.cn/s/a2a0f4582459">https://pan.quark.cn/s/a2a0f4582459</a></p></li><li><p>名称：商业模式设计底层逻辑70节</p><p>描述：涵盖了设计的基础理论、各类商业模式的分析方法以及实战中的应用技巧，帮助学习者掌握如何构建具有竞争力的商业模式。通过本课程的学习，你可以了解到商业模式的重要性、商业模式创新的方法、商业模型画布的使用技巧等，对企业家和管理人员来说是一门非常实用的课程。</p><p>链接：<a href="https://pan.quark.cn/s/a18603b05a44">https://pan.quark.cn/s/a18603b05a44</a></p></li><li><p>名称：品牌营销数据分析洞察行业课</p><p>描述：本课程旨在帮助学生了解品牌营销的基础知识和相关工具，包括市场份额、品牌忠诚度、竞争对手分析等。通过学习数据可视化和报告制作技能，学生可以更好地理解行业趋势和消费者需求，并为企业提供有价值的洞察和建议。</p><p>链接：<a href="https://pan.quark.cn/s/8a6424c5a44f">https://pan.quark.cn/s/8a6424c5a44f</a></p></li><li><p>名称：真正适用于餐饮行业实用干货</p><p>描述：本课程将探讨适用于的实用，包括如何开设一个成功的餐厅、如何管理财务和人员、如何与客户建立关系以及如何营销。课程将提供实用技巧和工具，帮助您提高业务水平并获得更多的利润。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/e4d85733aaf9">https://pan.quark.cn/s/e4d85733aaf9</a></p></li></ul><h3 id="司仪"><a href="#司仪" class="headerlink" title="司仪"></a>司仪</h3><ul><li><p>名称：婚礼策划素材模板合集</p><p>描述：包括创意主题婚礼、司仪主持词等方案策划，给伴侣一个终身难忘的惊喜。</p><p>链接：<a href="https://pan.quark.cn/s/80eba1a41b2b">https://pan.quark.cn/s/80eba1a41b2b</a></p></li></ul><h3 id="销售"><a href="#销售" class="headerlink" title="销售"></a>销售</h3><ul><li><p>名称：高价成交实战班助你不销而销</p><p>描述：高价成交实战班是一门针对销售人员的培训课程，通过系统学习和实践操作，帮助学员掌握高价销售技巧和策略，提升销售能力。课程内容包括市场洞察、客户沟通、需求分析、解决方案定制等方面的知识和技巧，并通过案例分析和角色扮演进行实际操作。学员将在课程中获得实战经验，达到的效果。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/84247e8f3fc8">https://pan.quark.cn/s/84247e8f3fc8</a></p></li></ul><h3 id="会计"><a href="#会计" class="headerlink" title="会计"></a>会计</h3><h4 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h4><ul><li><p>名称：金蝶专业版财务软件实战训练课程</p><p>描述：金蝶专业版财务软件实战训练课程专注于提升会计和财务管理人员的实操能力。课程涵盖会计基础知识、实操技能、财务软件应用等多个方面，通过具体案例和练习，教授凭证录入、报表查询与分析、税务管理等关键技能。</p><p>链接：<a href="https://pan.quark.cn/s/73e9c49800c2">https://pan.quark.cn/s/73e9c49800c2</a></p></li></ul><h4 id="注会"><a href="#注会" class="headerlink" title="注会"></a>注会</h4><ul><li><p>名称：2022注册会计师-战略，三大网校中华、东奥、斯尔，东西特别多懒得写了自己打开看吧 621g</p><p>描述：分批上传分享。每一科基本都是600g-1T</p><p>链接：<a href="https://www.aliyundrive.com/s/VXKyc1g56Ps">https://www.aliyundrive.com/s/VXKyc1g56Ps</a></p></li><li><ul><li>名称：2024CPA全科</li></ul><p>描述：椰子全科音频+全科思维导图+高顿芒果会计分录大全+轻4(会计、审计、财管、战略）最后六套、抢分21天</p><p>链接：<a href="https://pan.quark.cn/s/c08c8e6b847b">https://pan.quark.cn/s/c08c8e6b847b</a></p></li><li><p>名称：会计师课程合集 【很大】</p><p>描述：【01】2024初级会计<br>【02】2024中级会计<br>【03】高级会计师<br>【04】注册会计师<br>【05】会计师证</p><p>链接：<a href="https://pan.quark.cn/s/5e57a12f0490">https://pan.quark.cn/s/5e57a12f0490</a></p></li></ul><h3 id="医疗"><a href="#医疗" class="headerlink" title="医疗"></a>医疗</h3><h4 id="急救"><a href="#急救" class="headerlink" title="急救"></a>急救</h4><ul><li><p>名称：夜鹰10分钟救命课（完结）</p><p>描述：《夜鹰10分钟救命课（完结）》是一系列急救知识课程，由拥有13年一线急救经验的专家精心总结并传授。这些课程致力于将灵活的急救知识应用于现实场景，帮助公众在紧急情况下能够迅速、有效地采取急救措施。课程涵盖了23个家庭常用必备急救知识点，全面解析谣言和误区，确保学员能够全面、准确地掌握急救知识。</p><p>链接：<a href="https://pan.quark.cn/s/ced0246e1576">https://pan.quark.cn/s/ced0246e1576</a></p></li></ul><h3 id="考证"><a href="#考证" class="headerlink" title="考证"></a>考证</h3><ul><li><p>名称：🗣 执业药师课程合集 中药+西药</p><p>描述：执业药师课程合集 中药+西药 大合集</p><p>链接：<a href="https://pan.quark.cn/s/37d423cc9919">https://pan.quark.cn/s/37d423cc9919</a></p></li><li><p>名称：2024年一级消防工程师</p><p>描述：01-23年消防【技术实务]】VIP<br>02-23年消防【综合能力]VIP<br>03-23年消防【案例]VIP</p><p>链接：<a href="https://pan.quark.cn/s/310fb055e83d">https://pan.quark.cn/s/310fb055e83d</a></p></li></ul><h3 id="塔罗牌"><a href="#塔罗牌" class="headerlink" title="塔罗牌"></a>塔罗牌</h3><ul><li><p>名称：米卡·实占塔罗初阶课</p><p>描述：《实占塔罗初阶课》是一门专注于塔罗牌实战应用的初阶课程。课程采用独特的牌意解读结构，易于理解和上手。拥有超长的学时和丰富的课程内容，覆盖塔罗牌介绍、起源、历史、组成及重要元素解读等。</p><p>链接：<a href="https://pan.quark.cn/s/96f0b77e5ffe">https://pan.quark.cn/s/96f0b77e5ffe</a></p></li></ul><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2>]]></content>
    
    
    <categories>
      
      <category>资源分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>资源</tag>
      
      <tag>分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自媒体相关技能分享</title>
    <link href="/2024/01/13/data_sharing3/"/>
    <url>/2024/01/13/data_sharing3/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>自媒体相关技能分享</code>。<br>其中包括了关于我的经验和收集的知识分享。资源来源网络。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>先免责声明，资源来自网络，侵权，请到<a href="https://github.com/AllenDEricDAlexander/AllenDEricDAlexander.github.io">github</a><br>提交<code>Issue</code>，我将在看到的第一时间处理。</p><p>请遵守知识共享协议，转载请署名，禁止演绎，非商业性使用！</p><p>资源来自互联网，请继续保持<code>开放共享</code>的精神。</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="自媒体运营"><a href="#自媒体运营" class="headerlink" title="自媒体运营"></a>自媒体运营</h3><ul><li><p>持续更新知识库，我做了很多迭代</p><p>希望阅读者能感受到我的用心</p><p>更新了8个热门行业的爆文数据，以及7个精选垂直行业报告</p><p>知识库链接： <a href="https://g8ekpu7h0l.feishu.cn/wiki/JU7KwfZkuiJmlzkRc5ZcOwwrnxd">https://g8ekpu7h0l.feishu.cn/wiki/JU7KwfZkuiJmlzkRc5ZcOwwrnxd</a><br>知识库密码：4519e#92</p></li><li><p>名称：用户增长专家培养计划</p><p>描述：全栈用户增长专家培养计划，突破增长瓶颈进阶行业稀缺增长专家属于高阶课程对未来3-5年少有值得投入的稀缺岗位！</p><p>链接：<a href="https://www.alipan.com/s/LdENMuN7jbL">https://www.alipan.com/s/LdENMuN7jbL</a></p></li><li><p>名称：2024年新媒体流量变现运营笔记</p><p>描述：2024年新媒体流量变现运营笔记涵盖了新媒体运营的多个关键方面。首先，强调平台选择与定位的重要性，确保内容触达目标用户。其次，内容策划与创作是吸引流量的核心，需注重原创性、实用性和趣味性。再者，推广与引流、用户互动与维护也是关键步骤。最后，通过设计有吸引力的促销活动和优化支付、售后服务，实现流量变现和转化。</p><p>链接：<a href="https://pan.quark.cn/s/40f7fcbfaea1">https://pan.quark.cn/s/40f7fcbfaea1</a></p></li><li><p>名称：AI智能变现实操训练营：普通人利用AI赚钱 月收益数万元（全套课程+文档）</p><p>描述：AI智能变现实操训练营：普通人利用AI赚钱 月收益数万元（全套课程+文档）</p><p>链接：<a href="https://pan.quark.cn/s/8c95b974f868">https://pan.quark.cn/s/8c95b974f868</a></p></li><li><p>名称：7天学会如何驾驭本地生活流量</p><p>描述：一门专为人们提供实用技巧的课程。通过七天的学习，您将学会如何有效管理和规划生活，包括交通、购物、社交等方面。课程内容包括流量管理原则、优化时间安排、掌握本地资源、提高效率等。欢迎加入本课程，让您的生活更加便捷高效！建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/2473995cd2a6">https://pan.quark.cn/s/2473995cd2a6</a></p></li><li><p>名称：微信公众号排版实战视频教程</p><p>描述：微信公众号排版实战视频教程是一套详尽且实用的教程，帮助公众号运营者、内容创作者和营销人员提升公众号的排版技巧和视觉效果。本教程通过一系列的视频课程，深入讲解了微信公众号排版的各种技巧和方法，包括文字排版、图片排版、配色方案、模板使用等方面，使学习者能够轻松掌握微信公众号排版的精髓。</p><p>链接：<a href="https://pan.quark.cn/s/09410dc1bf16">https://pan.quark.cn/s/09410dc1bf16</a></p></li><li><p>资源标题：成长养成系的个人IP，运营陪伴群可以注意的几点</p><p>资源描述：成长养成系的个人IP，运营陪伴群可以注意的几点</p><p>链接：<a href="https://pan.quark.cn/s/d7ac4b7a8893">https://pan.quark.cn/s/d7ac4b7a8893</a></p></li><li><p>资源标题：纯靠私域积累近3000个付费用户，近一年时间赚了近100W，我的朋友圈运营心得</p><p>资源描述：纯靠私域从0个好友的纯小白到4000个好友，积累近3000个付费用户，近一年时间赚了近100W，我的朋友圈运营心得</p><p>链接：<a href="https://pan.quark.cn/s/41fb4426ddee">https://pan.quark.cn/s/41fb4426ddee</a></p></li><li><p>名称：知识星球个人IP打造系列课程</p><p>描述：知识星球个人打造系列，每天引流100精准粉，通过本次系列课程，您将学到以下内容：只需要做好这几步，就能让你每天轻松获得100+精准粉丝的方法，根据自己操作的项目，选择一个合适平台，狠狠的执行一个月，基本可以达到！建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/742257735e0b">https://pan.quark.cn/s/742257735e0b</a></p></li><li><p>名称：【博光教育】影视剪辑带货全能班</p><p>描述：本套课程影视剪辑带货全能班，短视频剪辑从入门到精通，课程官方售价1299元，本课程共48讲。很多人想做短视频但是无从下手，本次课程主要针对影视剪辑单货进行详解，从分析行业前景、账号定位、资源获取、视频剪辑、带货实操等全方位进行讲解，让大家真正能够学到实用的短视频技能。</p><p>链接：<a href="https://pan.quark.cn/s/37852c1333be">https://pan.quark.cn/s/37852c1333be</a></p></li><li><p>名称：餐饮如何通过短视频成交实操</p><p>描述：本课程将带领学生了解当前热门的短平台，以及如何在短视频平台上制作和发布与餐饮相关的内容，从而吸引客户并促成实际交易。学生们将学会利用短视频手段进行情感化、个性化的品牌推广，并且通过实际操作学习如何利用短视频网站内的功能进行评测、打赏和购买等一系列关键流程，最终提高营销效能，增加客户黏性。</p><p>链接：<a href="https://pan.quark.cn/s/16389982f365">https://pan.quark.cn/s/16389982f365</a></p></li><li><p>名称：小说推文项目粗暴实操全流程</p><p>描述：这个课程是一个全方位的指导，将教授如何将小说转化成格式，并在社交媒体上发布。从确定受众，编写标题和摘要，到配图和发布，一步步介绍粗暴实操全流程，使你能够提高小说的曝光度并吸引更多读者。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/a4bdef83b00b">https://pan.quark.cn/s/a4bdef83b00b</a></p></li><li><p>名称：2023Facebook广告营销课</p><p>描述：2023Facebook营销课将教给学员关于如何利用Facebook平台进行效果卓著的广告营销，以实现商业和个人目标。本课程将介绍Facebook广告的基本概念、投放策略、分析与优化方案，以及最佳实践经验等内容，让学员能够掌握Facebook广告营销的技能并提升业务水平。</p><p>链接：<a href="https://pan.quark.cn/s/462ebbc197e6">https://pan.quark.cn/s/462ebbc197e6</a></p></li><li><p>名称：2023最新短视频流量破局必修课</p><p>描述：2023最新短流量破局必修课是一门关于短视频流量增长策略的。该课程将涵盖各种最新的市场趋势和算法，带领学员深入了解如何制定有效的内容创作计划、提升曝光率并增加用户互动性。通过本课程的学习，您将掌握短视频领域的核心要素，从而推动您自己或您的企业在该领域的持续发展。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/fb7d7431ad56">https://pan.quark.cn/s/fb7d7431ad56</a></p></li><li><p>名称：抖音精准起号方法论视频课</p><p>描述：这个精准方法论视频将向你介绍如何有效地起好抖音账号。该课程覆盖了许多关键主题，包括如何优化您的账户设置、如何选择最佳的内容类型和策略、如何扩大您的关注者数量等等。如果你是一名新手，或想要提高你的抖音账户的话，这个课程将为您提供非常有用的建议和策略。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/a3622ae70463">https://pan.quark.cn/s/a3622ae70463</a></p></li></ul><h3 id="短视频运营"><a href="#短视频运营" class="headerlink" title="短视频运营"></a>短视频运营</h3><ul><li><p>名称：2024最新剪辑+抖加+短视频课</p><p>描述：本课程包含48节课程，覆盖短视频综合技能培养。内容涵盖剪辑技巧、抖加投放技巧及短视频创作与运营全攻略。通过学习，你将掌握剪映剪辑、高质量视频制作、抖加投放等技巧，并了解短视频平台的算法和推流机制，助你成为短视频达人</p><p>链接：<a href="https://pan.quark.cn/s/b2064d701bac">https://pan.quark.cn/s/b2064d701bac</a></p></li></ul><h3 id="小红书"><a href="#小红书" class="headerlink" title="小红书"></a>小红书</h3><ul><li><p>名称：小红书无货源风口项目陪跑营</p><p>描述：课程来自佩佩无货源项目陪跑营。小红书无货源卖货项目，是通过在小红书发笔记挂车，吸引用户直接下单购买的赚钱模式。拍摄、不用露脸、不用买产品、不用营业执照、一部手机即可开店、不用囤货发货，第三方平台发货，赚差价。小红书70%女性用户，消费力强，风险低，天花板高，小红书电商元年风口期。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/690450c71baa">https://pan.quark.cn/s/690450c71baa</a></p></li><li><p>名称：小红书陪跑班爆款引流升级课</p><p>描述：陪跑班升级课旨在教授营销爆款引流策略，包括内容创作、社区互动、品牌升级等。通过15天的系统学习，学员将掌握小红书引流的核心技巧，提升曝光度并建立精准人群流。实操训练将加速学员的营销升级。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/235c75ee54eb">https://pan.quark.cn/s/235c75ee54eb</a></p></li><li><p>资源标题：在小红书上，如何挖掘出1000个适合普通人的赚钱项目</p><p>资源描述：在小红书上，如何挖掘出1000个适合普通人的赚钱项目</p><p>链接：<a href="https://pan.quark.cn/s/4c8d77f2653c">https://pan.quark.cn/s/4c8d77f2653c</a></p></li><li><p>名称：小红书陪跑营2023流量运营课程</p><p>描述：一门专注于教授运营技巧的课程。通过学习，您将了解到平台上的流量运营策略、内容创作技巧、粉丝互动方法等，并能够有效提升自身在小红书上的影响力和知名度。快来参加本课程，开启您在小红书的流量运营之旅吧！建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/8bb932d67d03">https://pan.quark.cn/s/8bb932d67d03</a></p></li><li><p>名称：小红书无货源最新螺旋起号法</p><p>描述：无项目，有什么优势？开店成本低，不用囤货，出一单赚一单；操作简单，可批量复制，放大规模操作；利润可观，可以达到50%以上，因为小红书粉丝群体质量高；小红书无货源最新螺旋起号方法是一种以弱化「卖货」为主，依赖品牌塑造与内容创作的电商玩法。通过建立个人及品牌信誉度，在平台上快速获得优质流量并实现变现。本课程将着重介绍如何在小红书平台上成功运用这种策略，推广自己或所经营的店铺，从而吸引更多目标客户和提高销售额。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/72df179d1d98">https://pan.quark.cn/s/72df179d1d98</a></p></li></ul><h3 id="直播带货"><a href="#直播带货" class="headerlink" title="直播带货"></a>直播带货</h3><ul><li><p>名称：点金手0成本团购带货实操班</p><p>描述：《点金手0成本操班》是一门专注于教授团购带货技巧的。通过学习该课程，您将了解如何以零成本、零库存的方式进行团购，并运用社交媒体及网络平台实现销售和盈利。课程内容包括团购策划、产品选品、商品推广、客户管理等，旨在帮助您掌握团购带货的核心技能，提升个人经营能力。无论是想在微商领域发展，还是寻求额外收入的机会，本课程都能为您提供实用的指导和操作方法。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/de9f61bb260d">https://pan.quark.cn/s/de9f61bb260d</a></p></li><li><p>名称：电商抖音直播投流起号课程</p><p>描述：本课程是针对投流起号的介绍和讲解。学员将学习如何在抖音平台上开展直播业务，提高直播人气和销售额，以及如何打造自己的品牌形象。课程内容包括选品策略、直播技巧、内容规划、运营管理以及市场推广等方面的知识和技能。通过本课程的学习，学员将能够更好地掌握抖音直播投流起号的原理和实战技巧，提升自己的电商直播能力和销售业绩。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/06b09829ec26">https://pan.quark.cn/s/06b09829ec26</a></p></li><li><p>名称：从0-1抖音快速起号做爆服装流量</p><p>描述：本课程将为大家介绍如何从零开始快速在上起号并增加服装流量。我们将涵盖多项内容，通过学习这些技巧和策略，你可以快速成为一名成功的抖音服装博主，并在抖积累大量的流量，吸引更多的品牌商合作和粉丝关注。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/2136931357df">https://pan.quark.cn/s/2136931357df</a></p></li><li><p>名称：0基础，0粉丝，抖音带货100万</p><p>描述：视频教程会指导如何选品、策划内容、制作高质量视频，并教授如何运用抖音的算法和推广策略，增加曝光和粉丝。同时，还会分享如何与观众互动、建立信任，并引导购买 </p><p>链接：<a href="https://pan.quark.cn/s/d443724d6420">https://pan.quark.cn/s/d443724d6420</a></p></li></ul><h3 id="电商课程"><a href="#电商课程" class="headerlink" title="电商课程"></a>电商课程</h3><ul><li><p>名称：0-100人电商管理视频课程</p><p>描述：这是一门管理视频，适合0-100人规模的企业。课程内容包括电商平台选择、产品选品、运营策略、销售技巧等方面的知识与实操经验。通过学习本课程，您将了解电商运营的核心要素，提升企业的电商业绩，并获得市场竞争优势。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/f824a516a540">https://pan.quark.cn/s/f824a516a540</a></p></li><li><p>名称：【桐策电商】淘系全链路 盈利增长闭环进阶营</p><p>描述：本套课程桐策电商学院：淘系全链路，盈利增长闭环进阶实战训练营，课程官方售价2980元，由阿里巴巴数据学院讲师韩维老师主讲，本课程共分为7部分，文件大小共计7.83G。做淘宝运营必须要做的就是要会竞品分析，要了解直通车体系、搜索原理、用户分析等，只有你学会了全方位分析店铺，才能够做好淘宝运营。</p><p>链接：<a href="https://www.alipan.com/s/N7Gwdx69Rff">https://www.alipan.com/s/N7Gwdx69Rff</a></p></li><li><p>名称：20课时带你系统性解析1688运营</p><p>描述：这门课程将帮助你系统性地了解1688运营，通过20个课时的学习，你将掌握实用技巧和策略，掌握如何提高店铺的流量和销售额，并实现持续稳定的经营和发展。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/6ed807e46dc6">https://pan.quark.cn/s/6ed807e46dc6</a></p></li><li><p>名称：拼多多活动技巧大全核心操作</p><p>描述：本课程将介绍拼的活动技巧大全，包括如何参与和获取优惠，如何砍价和领取红包等操作。通过掌握这些核心技巧，您将能够在拼多多上轻松购物，并以最低的价格获得最高的品质商品。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/f9ab0bd5315a">https://pan.quark.cn/s/f9ab0bd5315a</a></p></li></ul><h3 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h3><h4 id="插花"><a href="#插花" class="headerlink" title="插花"></a>插花</h4><ul><li><p>名称：花束花艺教程</p><p>描述：插花教学</p><p>链接：<a href="https://www.alipan.com/s/CRdk8cVmm3Y">https://www.alipan.com/s/CRdk8cVmm3Y</a></p></li></ul><h4 id="急救"><a href="#急救" class="headerlink" title="急救"></a>急救</h4><ul><li><p>名称：夜鹰10分钟救命课（完结）</p><p>描述：《夜鹰10分钟救命课（完结）》是一系列急救知识课程，由拥有13年一线急救经验的专家精心总结并传授。这些课程致力于将灵活的急救知识应用于现实场景，帮助公众在紧急情况下能够迅速、有效地采取急救措施。课程涵盖了23个家庭常用必备急救知识点，全面解析谣言和误区，确保学员能够全面、准确地掌握急救知识。</p><p>链接：<a href="https://pan.quark.cn/s/ced0246e1576">https://pan.quark.cn/s/ced0246e1576</a></p></li></ul><h4 id="魔术"><a href="#魔术" class="headerlink" title="魔术"></a>魔术</h4><ul><li><p>名称：刘谦第一课零基础魔术教学</p><p>描述：这门课程专为零基础学员设计，由刘谦亲自传授魔术的基本技巧和入门要点。学员将学习简单易懂的魔术表演方法，培养自信和魔术技能。通过实践训练，让您轻松掌握惊艳观众的魔术魅力。</p><p>链接：<a href="https://pan.quark.cn/s/02eec337f772">https://pan.quark.cn/s/02eec337f772</a></p></li></ul><h4 id="绘画"><a href="#绘画" class="headerlink" title="绘画"></a>绘画</h4><ul><li><p>名称：B站 - 十分绘画：绘画萌新入门创造营</p><p>描述：绘画萌新入门必修，靠谱导师带你冲冲冲！这套课程一共设置了绘画基础、进阶演练和高阶应用三大版块，是适用于板绘领域所有绘画学习的基础课程，请大家放心大胆食用哦~</p><p>链接：<a href="https://pan.quark.cn/s/8956e9e378f6">https://pan.quark.cn/s/8956e9e378f6</a></p></li><li><p>名称：剑桥艺术学院综合材料解构创作</p><p>描述：剑桥艺术学院的综合创作课程为学生提供了探索艺术形式的机会。通过研究材料的特性和结构，学生将学习创造出独特而有实验性的艺术作品。这门课程注重培养学生的创造力和技巧，并鼓励他们在材料选择、组合和解构方面进行创新。无论是雕塑、绘画还是装置艺术，学生将能够发展自己的个人风格并展示他们对材料的深入理解。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/f506498afbf5">https://pan.quark.cn/s/f506498afbf5</a></p></li><li><p>名称：LAELAPS第5期插画海报大师班</p><p>描述：“LAEAPS第5期海报大师班是一门精彩的课程，专注于教授插画和海报设计技巧。学员将与行业顶尖的艺术家互动，学习创造独特形象、运用色彩和构图技巧等方面的知识。通过实践项目和个人指导，学员将提升自己的技能，并获得宝贵的经验和启发”</p><p>链接：<a href="https://pan.quark.cn/s/d2da80a8c85d">https://pan.quark.cn/s/d2da80a8c85d</a></p></li><li><p>名称：2023个人商业插画价值提升课</p><p>描述：一个专注于帮助爱好者提升其商业价值的。通过本课程，学员将学习如何创作具有商业吸引力的插画作品，掌握市场需求趋势和行业最新技巧，并了解如何推广自己的作品。课程内容丰富实用，旨在帮助学员在商业插画领域取得更大的成功。无论你是初学者还是经验丰富的插画师，本课程都能为你提供有价值的知识和技能。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/4ae5b08c0222">https://pan.quark.cn/s/4ae5b08c0222</a></p></li><li><p>名称：2023构建王烁的漫画案例设计课</p><p>描述：《构建的案例设计课》是一门2023年最新推出的创意课程，旨在教授学生如何构建出王烁级别的精彩漫画案例。通过探索王烁的创作风格、故事结构、角色设计等要素，学生将学习到构建出令人惊叹的漫画案例所需的技巧和方法。建议先收藏保存，不定时失效。  </p><p>链接：<a href="https://pan.quark.cn/s/53da0a076c37">https://pan.quark.cn/s/53da0a076c37</a></p></li><li><p>名称：少儿艺术培养《Kidot大师创意美术课》</p><p>描述：一套在家就能上的艺术课，清华美院老师精心打磨课程，除美术技巧外，更着重发展孩子想象力和艺术眼界，适合4-7岁孩子学习。</p><p>链接：<a href="https://pan.quark.cn/s/800f6c60ba24">https://pan.quark.cn/s/800f6c60ba24</a></p></li><li><p>名称：【麦刻风】Ipad商业插画从小白到接单画手 - 带源码课件</p><p>描述：Ipad商业插画从小白到接单画手。</p><p>链接：<a href="https://www.alipan.com/s/BdRWtmPLP2M">https://www.alipan.com/s/BdRWtmPLP2M</a></p></li></ul><h4 id="乐器"><a href="#乐器" class="headerlink" title="乐器"></a>乐器</h4><ul><li><p>名称：张雄关爵士吉他Bebop专题课</p><p>描述：张雄关爵士Bebop专题课是一门针对吉他爱好者和学习者设计的。课程内容涵盖了Bebop音乐风格的基本理论、技巧与演奏方法。通过学习这门课程，学员将能够深入了解并掌握Bebop音乐的特点和表现方式，提升自己在吉他演奏上的技巧水平，并有机会进行实践和创作。无论您是初学者还是已经具备一定吉他基础的人士，这门课程都能为您带来全新的音乐体验和进步。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/a7b5dcff75e2">https://pan.quark.cn/s/a7b5dcff75e2</a></p></li><li><p>名称：民谣吉他课程入门+进阶139集</p><p>描述：民谣吉他课程入门+进阶139集是一套全面而系统的吉他教学课程，帮助初学者从零开始掌握民谣吉他的基本技巧，并逐步引导学习者走向更高级别的演奏水平。该课程共分为入门和进阶两大部分，涵盖了吉他基础知识、基本指法、和弦演奏、节奏训练、曲目练习等多个方面。在入门部分，课程从吉他的结构、调音方法讲起，逐步引入右手的拨弦技巧、左手的按弦方法，让学习者逐步熟悉吉他的基本操作。</p><p>链接：<a href="https://pan.quark.cn/s/a6bae4145c65">https://pan.quark.cn/s/a6bae4145c65</a></p></li><li><p>名称：王大园吉他课合集</p><p>描述：一套有温度有态度的吉他教学课程，对节奏律动、调式和声进行详解，并配有相关课件，手把手教你吉他入门。</p><p>链接：<a href="https://pan.quark.cn/s/4c19a3dab840">https://pan.quark.cn/s/4c19a3dab840</a></p></li><li><p>名称：从零开始学钢琴：圆你儿时钢琴梦</p><p>描述：学钢琴</p><p>链接：<a href="https://www.alipan.com/s/cRFGVwUoL9W">https://www.alipan.com/s/cRFGVwUoL9W</a></p></li><li><p>名称：【于斯课堂】哈农钢琴练指法</p><p>描述：哈农钢琴练指法。</p><p>链接：<a href="https://www.alipan.com/s/rnfw7K2ERa4">https://www.alipan.com/s/rnfw7K2ERa4</a></p></li><li><p>名称：【于斯课堂】菲伯尔钢琴基础教程第一册（陈思思版）</p><p>描述：菲伯尔钢琴基础教程第一册。</p><p>链接：<a href="https://www.alipan.com/s/FBi3S44jYQQ">https://www.alipan.com/s/FBi3S44jYQQ</a></p></li><li><p>名称：【于斯课堂】汤普森简易钢琴教程 系列教程</p><p>描述：汤普森简易钢琴教程 系列教程。</p><p>链接：<a href="https://www.alipan.com/s/dNcwFsXZLZb">https://www.alipan.com/s/dNcwFsXZLZb</a></p></li><li><p>名称：【于斯课堂】拜厄钢琴基本教程</p><p>描述：乐乐课堂（地理、历史、生物）。</p><p>链接：<a href="https://www.alipan.com/s/QJySXiFFVuM">https://www.alipan.com/s/QJySXiFFVuM</a></p></li><li><p>名称：【于斯课堂】钢琴考级专区1 ~ 10级 考级视频教程</p><p>描述：钢琴考级专区1 ~ 10级 考级视频教程。</p><p>链接：<a href="https://www.alipan.com/s/YXNzn647XLJ">https://www.alipan.com/s/YXNzn647XLJ</a></p></li><li><p>名称：【于斯课堂】车尔尼599钢琴教程</p><p>描述：车尔尼599钢琴教程。</p><p>链接：<a href="https://www.alipan.com/s/stFEG9on2Mh">https://www.alipan.com/s/stFEG9on2Mh</a></p></li><li><p>名称：【于斯课堂】约翰·汤普森现代钢琴教程 系列教程</p><p>描述：约翰·汤普森现代钢琴教程 系列教程。</p><p>链接：<a href="https://www.alipan.com/s/7dyeQAnzoMU">https://www.alipan.com/s/7dyeQAnzoMU</a></p></li></ul><h4 id="唱歌"><a href="#唱歌" class="headerlink" title="唱歌"></a>唱歌</h4><ul><li><p>名称：卷卷老师流行声乐课训练营</p><p>描述：零基础学唱歌，想练唱歌的可以跟着学哦。。</p><p>链接：<a href="https://www.alipan.com/s/VscTkE8GU25">https://www.alipan.com/s/VscTkE8GU25</a></p></li><li><p>资源名称：卷卷老师流行声乐课训练营</p><p>资源简介：零基础学唱歌，想练唱歌的可以跟着学哦。。</p><p><a href="https://www.alipan.com/s/VscTkE8GU25">https://www.alipan.com/s/VscTkE8GU25</a></p></li></ul><h4 id="arcgis"><a href="#arcgis" class="headerlink" title="arcgis"></a>arcgis</h4><ul><li><p>名称：精通Arcgis地理信息系统视频教程</p><p>描述：一门专注于教授ArcGIS软件的高级应用技能的课程。通过系统化的，学员将深入学习ArcGIS的各种功能和工具，包括数据管理、空间分析、地图制作等方面。课程内容丰富实用，适合想要在地理信息领域深耕的学习者。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/ef7cf427337e">https://pan.quark.cn/s/ef7cf427337e</a></p></li></ul><h4 id="office"><a href="#office" class="headerlink" title="office"></a>office</h4><ul><li><p>名称：word进阶大神上分攻略视频课</p><p>描述：《Word进阶大神攻略课》是一门针对Word软件的高级应用培训课程。通过系统化的教学视频，学员将学习到Word各种高级功能和技巧，如样式设置、宏编写、合并邮件等，以提高工作效率和文档质量，助力学员快速成为Word领域的高手，轻松上分。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/564f065b3c62">https://pan.quark.cn/s/564f065b3c62</a></p></li><li><p>名称：唯库《一次性学透Excel函数》</p><p>描述：一次性学透Excel函数，让你5分钟搞定一天的工作。</p><p>链接：<a href="https://pan.quark.cn/s/fc7673ae745c">https://pan.quark.cn/s/fc7673ae745c</a></p></li><li><p>资源名称：腾讯课堂 - 小黑课堂PS零基础教程</p><p>资源简介：小黑课堂PS零基础教程。</p><p><a href="https://www.alipan.com/s/ydUBhkSg7s4">https://www.alipan.com/s/ydUBhkSg7s4</a></p></li></ul><h4 id="美妆个护"><a href="#美妆个护" class="headerlink" title="美妆个护"></a>美妆个护</h4><ul><li><p>名称：【化妆美容教程】明星化妆师春楠化妆课</p><p>描述：春楠化妆课，作为一套由明星化妆师精心打造的化妆美容教程帮助广大爱美人士解决化妆难题，实现轻松上手、快速掌握化妆技巧的目标。这套课程化繁为简，通过深入浅出的讲解和实操演示，让化妆变得简单易学。<br>在春楠化妆课中，你将学习到多种实用且时尚的妆容技巧。例如，10分钟倒叙化妆法，让你在短时间内迅速完成妆容，轻松应对各种紧急场合。此外，课程还针对熬夜后如何急救妆容进行了详细讲解，让你一扫疲倦，焕发活力。</p><p>链接：<a href="https://pan.quark.cn/s/512d3404efdf">https://pan.quark.cn/s/512d3404efdf</a></p></li><li><p>名称：女性必备护肤课，带你轻松养出逆龄好肌肤</p><p>描述：女性必备护肤课，带你轻松养出逆龄好肌肤(完结)</p><p>链接：<a href="https://pan.quark.cn/s/4c00747c1d1f">https://pan.quark.cn/s/4c00747c1d1f</a></p></li><li><p>名称：护肤中山大学博士美颜课</p><p>描述：皮肤保养</p><p>链接：<a href="https://www.alipan.com/s/ukJMV92ngqE">https://www.alipan.com/s/ukJMV92ngqE</a></p></li><li><p>名称：蛋壳肌的秘密</p><p>描述：皮肤保养</p><p>链接：<a href="https://www.alipan.com/s/sxBUiJvY4EM">https://www.alipan.com/s/sxBUiJvY4EM</a></p></li><li><p>名称：大课堂二妹姐古法美颜术</p><p>描述：古法即拨筋养颜术，它以中医全息经络学为基础理论，通过疏通面部经络，刺激脏腑的面部反射点，活化气血，散瘀化结，美白淡斑，代谢血管内毒素及废物，使皮肤从内到外紧实红润、通透有光泽，从而还原皮肤本色。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/31f33ecdd1b5">https://pan.quark.cn/s/31f33ecdd1b5</a></p></li></ul><h4 id="摄影"><a href="#摄影" class="headerlink" title="摄影"></a>摄影</h4><ul><li><p>名称：悄悄变大神的美食摄影必修课</p><p>描述：《悄悄变大神的必修课》是一门旨在帮助学员提升美食摄影技巧的课程。通过理论讲解和实践操作，学员将学习到如何选择合适的场景、灯光和构图，以及利用角度、色彩和后期处理技巧来捕捉美食的精髓。无论您是想成为专业美食摄影师，还是仅仅想拍出漂亮的菜肴照片，本课程都会为您提供宝贵的知识和技能。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/ded2160d607e">https://pan.quark.cn/s/ded2160d607e</a></p></li><li><p>名称：李梦鱼儿童摄影与后期PS教程</p><p>描述：课程内容包含前期准备、实操训练、后期PS等，附带素材。用好的摄影，珍藏孩子的纯真和幸福。</p><p>链接：<a href="https://pan.quark.cn/s/3bcf2acb047e">https://pan.quark.cn/s/3bcf2acb047e</a></p></li><li><p>名称：商业PS后期课进阶班课程</p><p>描述：商业PS后期课进阶班课程。</p><p>链接：<a href="https://www.alipan.com/s/c5optAyckn8">https://www.alipan.com/s/c5optAyckn8</a></p></li><li><p>资源名称：风光摄影跨越性提升的320个致胜技巧 | 电子书 [pdf | mobi | azw3 | epub ]</p><p>资源简介：本书对风光摄影创作所需的基本技术、理论知识、实拍经验和后期技法进行了由浅入深的介绍，并将大量的摄影知识总结为320 个知识技巧，通过总结和量化，可以极大地方便读者的学习。</p><p><a href="https://www.alipan.com/s/yt1RwWeBHdG">https://www.alipan.com/s/yt1RwWeBHdG</a></p></li><li><p>名称：东东老师摄影小白课</p><p>描述：小白零基础入门，全程实战，拒绝学院式教学方式，让你每一节课都学到实用干货。</p><p>链接：<a href="https://pan.quark.cn/s/1d49539f0887">https://pan.quark.cn/s/1d49539f0887</a></p></li><li><p>名称：【CCtalk】森小艺人象摄影教学</p><p>描述：真正地帮助大家独立完成片子学会方法和思路加入自己思想形成自己特有的风格。</p><p>链接：<a href="https://www.alipan.com/s/9MbM176sGkS">https://www.alipan.com/s/9MbM176sGkS</a></p></li><li><p>资源名称：跟全球iPhone摄影大赛“年度最佳摄影师”学手机摄影</p><p>资源简介：35节视频课程，从入门到高级，从生活到旅行，一网打尽。</p><p><a href="https://www.alipan.com/s/V99zwgnKBa5">https://www.alipan.com/s/V99zwgnKBa5</a></p></li><li><p>资源名称：【蚂蚁摄影课堂】22级风光后期精英班</p><p>资源简介：课程从零开始全面讲解风光后期的修图技法,包括Photoshop基础及软件工具应用、六大合成技术、色彩网入解析、高端影像输出、多场景实操案例演示等全面组成，实现从零基础入门达到高端风光修图技法。</p><p><a href="https://www.alipan.com/s/cW76hRcEZHm">https://www.alipan.com/s/cW76hRcEZHm</a></p></li><li><p>名称：【中艺网校】零基础学摄影+航拍</p><p>描述：今天网校君给同学们整理了一组摄影学习必备的摄影入门课程给大家，让大家用一个暑假的时间搞定摄影基础！哪怕是零基础学摄影的小白都不用怕！</p><p>链接：<a href="https://www.aliyundrive.com/s/inXMAcFJiVZ">https://www.aliyundrive.com/s/inXMAcFJiVZ</a></p></li><li><p>名称：手机摄影达人速成实战篇</p><p>描述：在该课程的帮助下，能够系统学习到各种的手机摄影的拍摄技巧，同时也能看到老师在实际的拍摄项目中，如何去实践这些技巧。内附相应思维导图。</p><p>链接：<a href="https://pan.quark.cn/s/034da69584a8">https://pan.quark.cn/s/034da69584a8</a></p></li><li><p>名称：24格内部摄影教程</p><p>描述：24Frames——国内一流的婚礼摄制团队，在本教程中对婚礼中的摆拍思路、log在婚礼拍摄中的独特应用等实操技巧以及拍摄装备进行了系统讲解，成就你的婚礼大片！</p><p>链接：<a href="https://pan.quark.cn/s/098804267cf6">https://pan.quark.cn/s/098804267cf6</a></p></li><li><p>名称：2023全新升华之道展示面课程</p><p>描述：全网唯一专业讲面的！浪迹监制，升华编写、授课：2023情感领域第一课，全行业最全面、最系统的展示面课程。将用四个板块，从理论心法、拍摄技巧、修图，及打造，为你打通展示面世界的所有认知。学习完全部课程后，你对“展示面”这件事将不再有任何疑惑。再配合上自身实践，下一个朋友圈和社交软件上的聚光灯男孩，就是你！建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/88a513dfe4e7">https://pan.quark.cn/s/88a513dfe4e7</a></p></li><li><p>名称：古风武侠摄影全能班视频课</p><p>描述：每个男孩心中都有一个梦，仗剑江湖，任我逍遥，无论是束发之年，还是已过不惑，都有自己心中的武侠世界，都想成为那个大侠，武侠摄影全能班帮你实现梦想，学习可能了解更多拍摄技术。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/2a9375914c33">https://pan.quark.cn/s/2a9375914c33</a></p></li><li><p>名称：Red摄影零基础相机入门课程</p><p>描述：Red零基础相机入门是为零基础学员设计的摄影培训课程。通过系统的教学，学员将学习相机操作、曝光调节、构图技巧等基础知识，掌握拍摄技巧和表达方式。课程注重实践操作，帮助学员快速提升摄影水平，轻松入门摄影领域。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/ff883a213024">https://pan.quark.cn/s/ff883a213024</a></p></li><li><p>名称：理解黄金时代的大师摄影50讲</p><p>描述：理解黄金时代的50讲是一门关于摄影史上大师级别摄影师作品精讲的课程。本课程将摄影家的具有代表性的摄影作品入手，分析、阐述其艺术思想和风格特点，引导学员深入理解大师们在摄影艺术发展历程中所做出的重要贡献，并提高学员在摄影创作与欣赏上的审美水平。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/5e70f828faf5">https://pan.quark.cn/s/5e70f828faf5</a></p></li><li><p>名称：自拍不求人系列零基础学起</p><p>描述：这门课程适合零基础的学生。你将学习如何使用相机，调整曝光，焦距和对焦方式等基本技术。通过本课程，你将掌握基本的构图规则，学会捕捉优美的画面，更好地记录生活美好瞬间。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/24d58fbf636b">https://pan.quark.cn/s/24d58fbf636b</a></p></li><li><p>名称：摄学堂人像摄影进阶视频课程</p><p>描述：摄学堂视频课程将全面讲解人像摄影的拍摄技巧、灯光控制和后期处理，涵盖了人像基础知识、拍摄构图技巧、时尚、商业及婚礼人像等多个方向。通过实例演练，让学员快速掌握专业的人像摄影技能和流程，并提升个人作品水平，适合初学者和业余爱好者。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/7c93fc97e3c7">https://pan.quark.cn/s/7c93fc97e3c7</a></p></li><li><p>名称：大神教你手机拍出电影级大片</p><p>描述：本课程将教授如何利用手机拍摄电影级别的影片。学生将学习有关基本摄影技术、曝光和焦距等知识，以及如何运用视频编辑软件进行后期制作。通过本课程，学生将掌握如何利用智能手机创作出高质量、专业水平的视觉作品。</p><p>链接：<a href="https://pan.quark.cn/s/f867b54a6856">https://pan.quark.cn/s/f867b54a6856</a></p></li><li><p>名称：零基础手把手教你拍出优质视频</p><p>描述：价值299元的《零基础手把手教你拍出优质视频》</p><p>零基础短视频创作训练营，从策划到拍摄到剪辑，手把手教你拍出优质视频，最简单实用易操作的短视频拍摄训练营。</p><p>链接：<a href="https://pan.quark.cn/s/f57a39d0c6b2">https://pan.quark.cn/s/f57a39d0c6b2</a></p></li><li><p>名称：风光摄影实战教程全能篇</p><p>描述：从自然风光到实地拍摄案例，多场景后期调整，以正确姿态带你快速掌握拍摄精髓，无限风光任你拍。</p><p>链接：<a href="https://pan.quark.cn/s/a65b2a93501d">https://pan.quark.cn/s/a65b2a93501d</a></p></li></ul><h4 id="美工"><a href="#美工" class="headerlink" title="美工"></a>美工</h4><ul><li><p>名称：Photoshop商业应用提高课程</p><p>描述：Photoshop商业应用提高课程。</p><p>链接：<a href="https://www.alipan.com/s/Zz2bzKm6ctC">https://www.alipan.com/s/Zz2bzKm6ctC</a></p></li></ul><h4 id="社交课程"><a href="#社交课程" class="headerlink" title="社交课程"></a>社交课程</h4><ul><li><p>名称：许浚心理视频课程6集合集</p><p>描述：心理视频合集共有6集，内容丰富多样。课程涵盖了心理学的基础知识、情绪管理、人际关系、压力应对等方面。通过这个课程，您将学习到实用的心理技巧和工具，提升自我认知和情绪调控能力。无论是帮助自己还是他人，这个课程都能为您提供宝贵的指导和帮助。愿您在学习中收获新的见解和启发！建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/c6589fccb09c">https://pan.quark.cn/s/c6589fccb09c</a></p></li><li><p>资源名称：玩转压力：积极情绪养成课程</p><p>资源简介：这款软件提供多元化的教育内容，帮助用户学习如何应对压力、培养。涵盖心理健康知识、调适技巧和实践活动，让用户了解压力管理的重要性，建立积极情绪养成习惯，提升心理韧性和幸福感。</p><p>链接：<a href="https://pan.quark.cn/s/fd7c76042862">https://pan.quark.cn/s/fd7c76042862</a></p></li><li><p>资源名称：高手谈判与成交技巧视频课程</p><p>资源简介：本课程将深入探讨高效的谈判策略和成功的成交技巧。学员将学习如何洞察对方需求、制定灵活计划以及运用心理战略达成双赢局面。通过案例分析和实践演练，帮助学员提升在商务谈判中的竞争优势。</p><p><a href="https://pan.quark.cn/s/5a9ec4996bef">https://pan.quark.cn/s/5a9ec4996bef</a></p></li><li><p>资源名称：打造良好人际家庭关系必修课</p><p>资源简介：为什么要探讨原生家庭，你的原生家庭是什么相处模式？这些都关乎如何打造良好的家庭关系，必须做出正确的理解等级模式，才能一视同仁做出平等模式，走出内心的黑洞，进行一致性沟通。</p><p><a href="https://pan.quark.cn/s/1889dee33a07">https://pan.quark.cn/s/1889dee33a07</a></p></li><li><p>名称：李越：三观核武器-树立稳固三观</p><p>描述：李越 新版三观核武器树立稳固三观线上课。</p><p>链接：<a href="https://www.alipan.com/s/VzQEATyUU7K">https://www.alipan.com/s/VzQEATyUU7K</a></p></li><li><p>名称：提高情商改变人生的读心术 | 视频课程</p><p>描述：提高情商的最终目的，是为了自己顺心，别人也顺心，而不是让别人顺心，自己却难受。这种由内而外的讲究，是提升情商的第一步。</p><p>链接：<a href="https://www.aliyundrive.com/s/JQYfXqxTsqW">https://www.aliyundrive.com/s/JQYfXqxTsqW</a></p></li><li><p>名称：脱不花 - 30天沟通训练营 | 课程</p><p>描述：本套课程主要教你能好好沟通在职场中解决问题的沟通课。课程一共分为六大模块：沟通的起点是倾听、三大通用够用能力、给人力量的沟通、给人鞭策的沟通、那些艰难的沟通、展现自我的沟通。涵盖课程+群答疑+同步训练营，带你“爆锤”18个具体的沟通场景，超100多次沟通练习，每个场景都给你一个万能公式，你可以量身打造自己的沟通武器包。</p><p>链接：<a href="https://www.aliyundrive.com/s/CHLt8dmhgZb">https://www.aliyundrive.com/s/CHLt8dmhgZb</a></p></li><li><p>名称：迎刃 - 人人都需要的自信沟通秘籍 | 视频课程</p><p>描述：迎刃老师将在 14 堂视频课程中，用最简单的方式，教你沟通最有效的方式，帮助你从不敢开口到侃侃而谈</p><p>链接：<a href="https://www.aliyundrive.com/s/kLQYFXLST6j">https://www.aliyundrive.com/s/kLQYFXLST6j</a></p></li><li><p>名称：小学生心理能力成长视频课</p><p>描述：本课程是一门专为设计的能力成长视频课，旨在通过生动有趣的图文并茂的形式，帮助小学生提高自己的情绪管理、沟通技巧和人际关系等心理能力。课程内容涵盖自我认知、自信心培养、情感表达、团队合作等多个方面，并采用互动式的教学方式，让小学生更深入地了解自己、与他人相处，从而不断发展自身心理能力，提升综合素质。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/51a11c40a384">https://pan.quark.cn/s/51a11c40a384</a></p></li><li><p>名称：如何用口才润滑你的人际关系</p><p>描述：本课程将教您如何用有效地润滑。通过实践和演练，您将学习到如何沟通、倾听和表达自己，以及如何正确处理冲突和提高共情能力。您将学会如何在生活和职业中使用这些技能，创造更良好的人际关系和更积极的社交环境。本课程是对口才技巧的全面培训，帮助您在各种情境下更加自信成功。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/2e791ec9d1ef">https://pan.quark.cn/s/2e791ec9d1ef</a></p></li><li><p>名称：自我修炼走出困境的9套课程</p><p>描述：这门修炼的旨在帮助人们在面对生活中遇到的困境时，发现和实践内在的力量来克服障碍，提升个人成长与幸福感。本课程涵盖了如何建立积极的生活态度、思考方式和行为习惯等多方面内容，引导学员深入了解自我与外界的关系，并通过实际操作来达到自我鼓励、自我挑战、自我提升的效果。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/a612205096e5">https://pan.quark.cn/s/a612205096e5</a></p></li><li><p>名称：亲密关系沟通幸福必修课</p><p>描述：本课程将介绍如何在亲密关系中进行有效的沟通，以增进双方之间的理解和信任，提高彼此的幸福感。</p><p>我们将探讨沟通技巧、情绪管理、倾听技能等内容，并提供实用的案例分析与练习，帮助学员成为更好的沟通者和伴侣。本课程适合已婚或恋爱中的情侣、家庭成员、朋友等人群参与。</p><p>链接：<a href="https://pan.quark.cn/s/03e469725c61">https://pan.quark.cn/s/03e469725c61</a></p></li><li><p>名称：夫妻和谐相处之道视频课程</p><p>描述：这个夫妻和谐相处的视频课程将帮助您了解如何建立更健康、更幸福的婚姻关系。</p><p>本课程包括以下内容：有效沟通的技巧、解决冲突的方法以及如何保持爱情长久。此外，课程还将讨论如何处理金钱问题、家庭责任分配等方面的挑战。</p><p>通过学习这个视频课程，您将获得实用的建议和策略，帮助您与伴侣共同创造一个美满的家庭。</p><p>链接：<a href="https://pan.quark.cn/s/364c72859a9d">https://pan.quark.cn/s/364c72859a9d</a></p></li></ul><h4 id="职场"><a href="#职场" class="headerlink" title="职场"></a>职场</h4><ul><li><p>名称：超级个体帮你成为职场高手</p><p>描述：本课程将教授您如何成为高手。通过学习超级个体技巧和策略，您将提高自己的工作效率、沟通能力和领导力。我们将讲解职场规则、时间管理、人际关系建设等关键主题。参加本课程，成为职场的顶尖人才！建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/6a580f25c536">https://pan.quark.cn/s/6a580f25c536</a></p></li><li><p>名称：【黄家私塾】黄先生的职场独家秘笈·求职篇</p><p>描述：打造个人品牌 成就斜杠青年。</p><p>链接：<a href="https://www.alipan.com/s/Vh1QKXvTbCU">https://www.alipan.com/s/Vh1QKXvTbCU</a></p></li><li><p>名称：蔡老师的职场生存攻略40讲</p><p>描述：这门课程由资深职场导师蔡老师精心设计，涵盖职场各方面的实用技巧与智慧。学员将学习职业规划、沟通技巧、团队合作等关键内容，帮助他们在职场中获得成功。通过40讲系统学习，提升职业生涯发展的竞争力与稳定性。</p><p>链接：<a href="https://pan.quark.cn/s/94d2d8010124">https://pan.quark.cn/s/94d2d8010124</a></p></li><li><p>名称：职场生存思维+360职场沟通</p><p>描述：本课程聚焦于职场生存思维及360度职场沟通技巧。学员将学习自我管理、冲突解决、有效沟通等关键技能，培养全面发展的职业素养。通过案例分析和实践演练，帮助学员建立积极心态、提升沟通效果，进而在职场中取得成功。</p><p>链接：<a href="https://pan.quark.cn/s/ba42b29b6687">https://pan.quark.cn/s/ba42b29b6687</a></p></li><li><p>名称：未来10年职业发展规划指南</p><p>描述：本课程为您提供未来十年职业发展规划指南，帮助您了解行业趋势、技能需求与职业机会。通过职业规划、自我评估和目标设定，引导您制定个性化发展蓝图。探索新兴领域，拓展职业边界，实现长期职业目标。</p><p>链接：<a href="https://pan.quark.cn/s/b7f003e7a4d1">https://pan.quark.cn/s/b7f003e7a4d1</a></p></li></ul><h4 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h4><ul><li><p>名称：一通百通，搞定各领域的全能自学法</p><p>描述：价值299元的专题课《一通百通，搞定各领域的全能自学法》</p><p>链接：<a href="https://pan.quark.cn/s/734654523662">https://pan.quark.cn/s/734654523662</a></p></li><li><p>名称：【超燃计划】 30天蜕变行动营，干掉平庸的自己 | 视频课程</p><p>描述：《 30天蜕变行动营，干掉平庸的自己 》本课程除了深度教学，还将和你一起探讨12个领域和个人改变可能性。</p><p>链接：<a href="https://www.aliyundrive.com/s/jWuKQRPWN6x">https://www.aliyundrive.com/s/jWuKQRPWN6x</a></p></li></ul><h4 id="营销"><a href="#营销" class="headerlink" title="营销"></a>营销</h4><ul><li><p>名称：价值199元的《猴哥：营销方法70讲》</p><p>描述：曾花20万预算给客户带来8000万的业绩，投入产出比1：400；也曾经一分钱没有花，把一个面临倒闭的实体店盘活，一个月流量增加300%……把营销经验标准化，通过案例、方法、互动的方式提高你的营销意识，学会更多有效的方法。</p><p>链接：<a href="https://pan.quark.cn/s/c54bd0c3e68f">https://pan.quark.cn/s/c54bd0c3e68f</a></p></li></ul><h4 id="短视频素材"><a href="#短视频素材" class="headerlink" title="短视频素材"></a>短视频素材</h4><ul><li><p>名称：短视频制作素材-开车视角</p><p>描述：开车视角的短视频自媒体素材</p><p>链接：<a href="https://pan.quark.cn/s/8ab14d47f3e6">https://pan.quark.cn/s/8ab14d47f3e6</a></p></li><li><p>名称：顶级AE视频素材</p><p>描述：内含火焰爆炸、光线照射、光效转场、玻璃镜面反光等多类别超高清动态视频制作素材，满足你的创作需求。</p><p>链接：<a href="https://pan.quark.cn/s/55735f39a567">https://pan.quark.cn/s/55735f39a567</a></p></li></ul><h4 id="建模设计"><a href="#建模设计" class="headerlink" title="建模设计"></a>建模设计</h4><ul><li><p>名称：8款汉化Blender插件合集</p><p>描述：包括植物散布、岩石生成、流体模拟、自动建筑、城市生成、程序化人群、自动绑骨、快速布景打光8款插件。内含安装说明。</p><p>链接：<a href="https://pan.quark.cn/s/a1d23deab08d">https://pan.quark.cn/s/a1d23deab08d</a></p></li><li><p>名称：2023 Blender梦幻充能创造营</p><p>描述：“2023 Blender充能创造营是一门引人入胜的课程，专注于教授Blender软件的创意和技术应用。学员将学习建模、材质、动画和渲染等技能，与行业专家互动并参与实践项目。通过充满创意的冲刺，学员将提升自己在三维设计领域的能力，开启梦幻创造的无限可能！”建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/4c966fa5b48c">https://pan.quark.cn/s/4c966fa5b48c</a></p></li><li><p>名称：2022概念场景原画进阶班第2期</p><p>描述：本课程旨在帮助学员提升概念技能，包括构图、色彩运用、光影表现等方面，通过理论与实践相结合的方式，引导学员深入了解概念场景原画创作过程。课程内容涵盖绘画基础、概念设计观念等，旨在培养学员独立完成概念场景原画的能力。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/4b12dcd181b8">https://pan.quark.cn/s/4b12dcd181b8</a></p></li><li><p>资源名称：小莫讲C4D《有趣的C4D实例教程合集》</p><p>资源简介：按初、中、高级分类，对卡通文字、MG动画等进行具体教学，值得C4D自学者跟进学习。</p><p>链接：<a href="https://pan.baidu.com/s/16WKxtuSqRFkRobrVgWkOOw">https://pan.baidu.com/s/16WKxtuSqRFkRobrVgWkOOw</a></p></li><li><p>资源名称：【知乎】好莱坞特效制作大师课：从概念艺术到 3D 建模</p><p>资源简介：在大师课中，西姆斯老师从概念开始梳理，详解角色形象设计。西姆斯将通过 Zbrush 、 Keyshot 、 Photoshop 三大「神器」的应用，带你一探影视特效前期预演之谜，真正走进职业特效艺术大师的工作、创作世界之中。</p><p>链接：<a href="https://www.alipan.com/s/qrSC4zCmrM6">https://www.alipan.com/s/qrSC4zCmrM6</a></p></li><li><p>名称：【站酷学习】C4D零基础入门课 - 带源码课件</p><p>描述：本课针对零基础学员设置，操作步骤讲解细致，能够带领学员快速入门C4D软件；课程案例包括场景、电商产品、卡通IP多个门类，涵盖建模、材质、灯光、渲染与后期全流程；讲师拥有多年C4D三维实战制作经验，课程讲解专业清晰。</p><p>链接：<a href="https://www.alipan.com/s/9eSgHJ2HCMQ">https://www.alipan.com/s/9eSgHJ2HCMQ</a> </p></li><li><p>名称：【深红G】3D角色设计概念 - 05期 - 带源码课件</p><p>描述：深红3D角色概念设计第5期。</p><p>链接：<a href="https://www.alipan.com/s/YFrZ88psZ1J">https://www.alipan.com/s/YFrZ88psZ1J</a></p></li><li><p>名称：【知乎】好莱坞特效制作大师课：从概念艺术到 3D 建模</p><p>描述：在大师课中，西姆斯老师从概念开始梳理，详解角色形象设计。西姆斯将通过 Zbrush 、 Keyshot 、 Photoshop<br>三大「神器」的应用，带你一探影视特效前期预演之谜，真正走进职业特效艺术大师的工作、创作世界之中。</p><p>链接：<a href="https://www.alipan.com/s/qrSC4zCmrM6">https://www.alipan.com/s/qrSC4zCmrM6</a></p></li><li><p>名称：苏梨redsfhit产品渲染案例电商c4d教程</p><p>描述：苏梨redsfhit产品渲染案例电商c4d教程</p><p>链接：<a href="https://www.aliyundrive.com/s/f3m1GWsSJHt">https://www.aliyundrive.com/s/f3m1GWsSJHt</a></p></li><li><p>名称：《krenz平面设计构成色彩第12期课程》</p><p>描述：本课程专注于色彩在平面设计中的应用与构成。学员将探索色彩理论、配色技巧和视觉传达，提升设计作品的视觉吸引力和表现力。通过实践项目，学员将学会运用色彩创造出独特而引人注目的设计作品。</p><p>链接：<a href="https://www.alipan.com/s/3tbXxGVnXPu">https://www.alipan.com/s/3tbXxGVnXPu</a></p></li><li><p>名称：2023葵黑黑Blender第4期课程</p><p>描述：本期课程旨在教授学员使用Blender进行三维建模与动画设计，对Blender软件的高级功能——包括建模、材质、动画和渲染等内容进行详解教学。</p><p>链接：<a href="https://pan.quark.cn/s/76eff19a6036">https://pan.quark.cn/s/76eff19a6036</a></p></li><li><p>名称：暗黑系角色设计入门班</p><p>描述：本课程为系设计入门班内容涵盖软件介绍、点线面、黑白灰关系、色彩关系、角色五官发型、人体结构与动态、角色设计与配色等内容。暗黑又气质的角色设计风格,高级灰色调氛围表现,扎实角色基础刻画能力。快来老师一起,设计极具个性的暗黑系角色吧!</p><p>链接：<a href="https://pan.quark.cn/s/86979c3388ca">https://pan.quark.cn/s/86979c3388ca</a></p></li><li><p>名称：Blender东方韵味建筑小岛完整制作流程视频教程【中文字幕】</p><p>描述：东方韵味建筑小岛</p><p>链接：<a href="https://pan.quark.cn/s/d30ff2e0e792">https://pan.quark.cn/s/d30ff2e0e792</a></p></li><li><p>名称：Blender 3D卡通渲染风格艺术设计大师级视频教程【中文字幕】</p><p>描述：Blender 3D卡通渲染风格艺术设计大师级视频教程</p><p>链接：<a href="https://pan.quark.cn/s/1de17b4984a0">https://pan.quark.cn/s/1de17b4984a0</a></p></li><li><p>名称：4、Blender 2.91全面核心技术训练视频教程【中文字幕】</p><p>描述：全面核心技术训练视频教程</p><p>链接：<a href="https://pan.quark.cn/s/5ba0155de2ed">https://pan.quark.cn/s/5ba0155de2ed</a></p></li><li><p>名称：blender 大神中文教程</p><p>描述：Blender全系列初级、中级、高级教程分享！【附教程素材源文件资源】</p><p>链接：<a href="https://pan.quark.cn/s/c8ae75526600">https://pan.quark.cn/s/c8ae75526600</a></p></li></ul><h4 id="视频剪辑"><a href="#视频剪辑" class="headerlink" title="视频剪辑"></a>视频剪辑</h4><ul><li><p>名称：后期剪辑必备音效剪辑思维课</p><p>描述：《后期必备剪辑思维课》是一门实用的课程，旨在教授学生如何有效地进行音效剪辑。通过学习剪辑原理、音效素材采集和处理技巧等内容，培养学生专业的剪辑思维和创造力，提升后期制作质量。掌握这些必备技能，成为出色的音效剪辑师！建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/3ce270c8b086">https://pan.quark.cn/s/3ce270c8b086</a></p></li><li><p>名称：老鹰讲AE - 带源码课件</p><p>描述：本次教学是对After Effects的全面讲解，从基础出发到各个知识点的案例应用，力求启发思维打开脑洞。这次教学会侧重于AE的时间线、运动规律、动画的调节技巧、AE角色动画、扁平MG动画、AE常用脚本综合运用的讲解，在我看来这些最基本最本质的知识要比知道某个特效某个按钮是什么作用要重要的多。</p><p>链接：<a href="https://www.alipan.com/s/aWaLs62jb6Y">https://www.alipan.com/s/aWaLs62jb6Y</a></p></li><li><p>资源名称：【站酷学习】AE系统全能班教程第四期 - 带源码课件</p><p>资源简介：本套课程为站酷高高手郭术生老师主讲的AE系统全能班第四期全套视频教程，价值2630元，共23节课。</p><p>链接：<a href="https://www.alipan.com/s/Btmk8RRbK5n">https://www.alipan.com/s/Btmk8RRbK5n</a></p></li><li><p>名称：Premiere Pro CS6中文版从新手到高手 - 带源码课件</p><p>描述：详细讲述了该软件的基础知识和使用技巧，并配合案例将该软件的每个知识点通过实际操作分别进行介绍，包括素材采集、视频转场、视频特效、音频特效、制作字幕、运动效果以及视频的输出与光盘的制作等。最后介绍了3个Premiere Pro CS6综合案例，使用户对Premiere ProCS6得到全方位的理解与认识。</p><p>链接：<a href="https://www.alipan.com/s/e6StwqZh8Cn">https://www.alipan.com/s/e6StwqZh8Cn</a></p></li><li><p>名称：万彩动画大师进阶视频教程</p><p>描述：该实例操作教程结合一些万彩动画大师制作出的优质案例， 讲解实用性高的视频创作技巧。</p><p>链接：<a href="https://pan.quark.cn/s/db7d6269a34e">https://pan.quark.cn/s/db7d6269a34e</a></p></li></ul><h4 id="文案"><a href="#文案" class="headerlink" title="文案"></a>文案</h4><ul><li><p>名称：七节课教你写出杀手级文案</p><p>描述：你是否想要知道…为什么你阅读了大量的文案书籍，报了一堆的文案课程和培训班，甚至你拥有了很多杀手级的文案模板公式，却仍然……无法写出一篇真正的杀手级销售文案，想知道真正的原因吗？</p><p>原因不在于你读了多少书籍，不在于报了多少文案课程，而在于你是否具备杀手级的文案思维，这点非常重要。</p><p>链接：<a href="https://pan.quark.cn/s/f0f149b87026">https://pan.quark.cn/s/f0f149b87026</a></p></li><li><p>名称：30天论文写作发表进阶教程</p><p>描述：30天论文写作发表全攻略，我们会用分分钟能上手的各种绝招，30天内，线上教学，线下练习，社群打卡，互动帮助，相互监督，让你形成一个完整的逻辑链，稳扎稳打，步步为营，从论文小白快速进阶为论文高手。</p><p>链接：<a href="https://pan.quark.cn/s/d01fe648a2a3">https://pan.quark.cn/s/d01fe648a2a3</a></p></li></ul><h3 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h3><h4 id="游泳"><a href="#游泳" class="headerlink" title="游泳"></a>游泳</h4><ul><li><p>名称：游泳教学</p><p>描述：游泳教学等</p><p>链接：<a href="https://www.alipan.com/s/TpkTwsDqjhB">https://www.alipan.com/s/TpkTwsDqjhB</a></p></li></ul><h4 id="篮球"><a href="#篮球" class="headerlink" title="篮球"></a>篮球</h4><ul><li><p>名称：篮球入门及提高-法国篮球协会专业篮球教学课程</p><p>描述：如题</p><p>链接：<a href="https://www.alipan.com/s/yjFYwYZDaQc">https://www.alipan.com/s/yjFYwYZDaQc</a></p></li><li><p>刘芳宇：篮球半场斗牛的实战技巧【视频教程】  </p><p>链接：<a href="https://pan.quark.cn/s/d539b9b60118">https://pan.quark.cn/s/d539b9b60118</a></p></li><li><p>资源名称：张卫平篮球新手入门教学全集课程</p><p>资源简介：1950年12月19日出生于北京，中国篮球运动员，前中国国家篮球队成员，脚步动作扎实，篮下攻击能力强，人称“篮下魔术师”。退役后成为著名篮球解说员，因其解说风格而被球迷戏称为“张合理”。</p><p>球员时期的张卫平代表国家队夺得第八（1975年）、第九（1977年）两届男篮亚锦赛和第八届亚运会（1978年）篮球比赛的冠军，摘得“三连冠”，并加冕“亚洲最佳前锋”。他来教你想不会都难。</p><p><a href="https://pan.quark.cn/s/b29e48b45483">https://pan.quark.cn/s/b29e48b45483</a></p></li></ul><h4 id="足球"><a href="#足球" class="headerlink" title="足球"></a>足球</h4><ul><li><p>名称：零基础学足球-前职业足球运动员教你学足球</p><p>描述：如题</p><p>链接：<a href="https://www.alipan.com/s/kvLRmcbZfLV">https://www.alipan.com/s/kvLRmcbZfLV</a></p></li></ul><h4 id="滑板"><a href="#滑板" class="headerlink" title="滑板"></a>滑板</h4><ul><li><p>名称：从零开始学滑板-入门到花式技巧</p><p>描述：学滑板</p><p>链接：<a href="https://www.alipan.com/s/GXH76TCM9my">https://www.alipan.com/s/GXH76TCM9my</a></p></li></ul><h4 id="排球"><a href="#排球" class="headerlink" title="排球"></a>排球</h4><ul><li><p>名称：从零开始学排球-法国排球协会专业排球教学课程</p><p>描述：学排球</p><p>链接：<a href="https://www.alipan.com/s/gXuEK7Wa9Hb">https://www.alipan.com/s/gXuEK7Wa9Hb</a></p></li></ul><h4 id="乒乓球"><a href="#乒乓球" class="headerlink" title="乒乓球"></a>乒乓球</h4><ul><li><p>名称：乒乓球技巧</p><p>描述：乒乓球技巧</p><p>链接：<a href="https://www.alipan.com/s/q2Tz9XtiBWZ">https://www.alipan.com/s/q2Tz9XtiBWZ</a></p></li></ul><h4 id="羽毛球"><a href="#羽毛球" class="headerlink" title="羽毛球"></a>羽毛球</h4><ul><li><p>名称：羽毛球 从基础到高手 世界冠军陈金教练开课</p><p>描述：羽毛球技巧</p><p>链接：<a href="https://www.alipan.com/s/zoDESMwRvd6">https://www.alipan.com/s/zoDESMwRvd6</a></p></li><li><p>名称：李宇轩羽毛球</p><p>描述：李宇轩羽毛球</p><p>链接：<a href="https://www.alipan.com/s/VYDAvShjfHX">https://www.alipan.com/s/VYDAvShjfHX</a></p></li></ul><h4 id="钓鱼"><a href="#钓鱼" class="headerlink" title="钓鱼"></a>钓鱼</h4><ul><li><p>名称：钓鱼教程</p><p>描述：成为钓鱼佬</p><p>链接：<a href="https://www.alipan.com/s/8CA7cpGpVB7">https://www.alipan.com/s/8CA7cpGpVB7</a></p></li></ul><h3 id="棋牌"><a href="#棋牌" class="headerlink" title="棋牌"></a>棋牌</h3><h4 id="象棋"><a href="#象棋" class="headerlink" title="象棋"></a>象棋</h4><ul><li><p>名称：豪氏象棋教程</p><p>描述：本套资源收集整理了抖音知名象棋博主阿豪象棋的系列象棋教学视频，包含横车盘头马、铁桶阵过宫炮、中炮破各类列手炮等。</p><p>链接：<a href="https://pan.quark.cn/s/d5131d711505">https://pan.quark.cn/s/d5131d711505</a></p></li><li><p>名称：传奇象棋</p><p>描述：象棋教学</p><p>链接：<a href="https://www.alipan.com/s/QV6pdBwQMvM">https://www.alipan.com/s/QV6pdBwQMvM</a></p></li></ul><h4 id="麻将"><a href="#麻将" class="headerlink" title="麻将"></a>麻将</h4><ul><li><p>名称：刘坚强 麻将学技术训练与技巧</p><p>描述：麻将技巧</p><p>链接：<a href="https://www.alipan.com/s/L3rqCaNGQhs">https://www.alipan.com/s/L3rqCaNGQhs</a></p></li></ul><h4 id="扑克"><a href="#扑克" class="headerlink" title="扑克"></a>扑克</h4><ul><li><p>名称：扑克技巧</p><p>描述：扑克技巧</p><p>链接：<a href="https://www.alipan.com/s/HhrgjKD2ZHE">https://www.alipan.com/s/HhrgjKD2ZHE</a></p></li></ul><h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><ul><li><p>电子书</p><p>高清杂志网<a href="http://www.gqzzw.com/">http://www.gqzzw.com/</a></p><p>静流书站windowsfront.com&#x2F;</p><p>雅书<a href="https://yabook.org/">https://yabook.org/</a></p><p>阿德莱德大学电子文本收藏中心<a href="http://ebooks.adelaide.edu.au/">http://ebooks.adelaide.edu.au/</a></p><p>采书<a href="http://www.ebook.name/">http://www.ebook.name/</a></p><p>超星电子书<a href="http://www.chaoxing.com/">http://www.chaoxing.com/</a></p><p>备份<a href="https://www.ahhhhfs.com/43139">https://www.ahhhhfs.com/43139</a></p><p>读读狗<a href="http://www.dududog.com/">http://www.dududog.com</a></p><p>读书网dushu.com</p><p>读书皮<a href="http://slfswh.xiangzhan.com/">http://slfswh.xiangzhan.com/</a></p><p>论文下载<a href="https://www.cn-ki.net/">https://www.cn-ki.net/</a></p><p>计算机书控<a href="http://bestcbooks.com/">http://bestcbooks.com/</a></p><p>英文杂志<a href="http://www.worldofmagazine.com/">http://www.worldofmagazine.com/</a></p><p>英文小说<a href="https://ebookbb.com/">https://ebookbb.com/</a></p><p>脚本之家<a href="https://www.jb51.net/do/book_class..html">https://www.jb51.net/do/book_class..html</a></p></li><li><p>名称：200个知乎收费LIVE精品内容合集（价值上万元）</p><p>描述：200个知乎收费LIVE精品内容合集（价值上万元）</p><p>链接：<a href="https://www.alipan.com/s/gTDcJgtZhsn">https://www.alipan.com/s/gTDcJgtZhsn</a></p></li><li><p>名称：【108套别墅新农村自建房图纸】</p><p>描述：稀缺资源</p><p>链接：<a href="https://www.alipan.com/s/fjexcUgLX2f">https://www.alipan.com/s/fjexcUgLX2f</a></p></li><li><p>名称：《64套发型打理教程》</p><p>描述：发型</p><p>链接：<a href="https://www.alipan.com/s/FE9qV9BtpV9">https://www.alipan.com/s/FE9qV9BtpV9</a></p></li><li><p>名称：剪发-发型打理-教程</p><p>描述：美发</p><p>链接：<a href="https://www.alipan.com/s/Uc4E7tAuWVu">https://www.alipan.com/s/Uc4E7tAuWVu</a></p></li><li><p>名称：【完结】风靡亚洲的家居收纳课</p><p>描述：收纳</p><p>链接：<a href="https://www.alipan.com/s/JN1NQTqnEGa">https://www.alipan.com/s/JN1NQTqnEGa</a></p></li><li><p>名称：730份折纸教程打包</p><p>描述：折纸</p><p>链接：<a href="https://www.alipan.com/s/U6sqN2yB8J8">https://www.alipan.com/s/U6sqN2yB8J8</a></p></li><li><p>名称：家居收纳课：教你一次整理，永不复乱！</p><p>描述：家居收纳</p><p>链接：<a href="https://www.alipan.com/s/vPrGGZfVo52">https://www.alipan.com/s/vPrGGZfVo52</a></p></li><li><p>名称：家庭用书</p><p>描述：中医保健，食疗，视频制作，家庭装饰，养生等等</p><p>链接：<a href="https://www.alipan.com/s/SneRLHUhmQ4">https://www.alipan.com/s/SneRLHUhmQ4</a></p></li><li><p>名称：家用收纳小妙招</p><p>描述：家用收纳</p><p>链接：<a href="https://www.alipan.com/s/dGPJg4wHPUV">https://www.alipan.com/s/dGPJg4wHPUV</a></p></li><li><p>资源名称：虎牙斗鱼网易cc主播舞蹈合集</p><p>资源简介：虎牙、斗鱼、网易CC等平台上的主播舞蹈合集，主要收录了这些直播平台上的知名主播所表演的各类舞蹈视频。主播们具备出色的舞蹈技巧和表演能力，能够呈现出各种风格的舞蹈作品，包括流行舞、街舞、民族舞、古典舞等</p><p><a href="https://pan.quark.cn/s/539da28ce6ef">https://pan.quark.cn/s/539da28ce6ef</a></p></li></ul><h3 id="好用工具"><a href="#好用工具" class="headerlink" title="好用工具"></a>好用工具</h3><ul><li><p>怎么下载视频号里的视频？</p><p>很简单啊，你换个思路，先获取号主发在抖音、B站的同款视频链接，再复制到下载器提取，over。</p><p>推荐两个好用的工具：</p><p><a href="https://snapany.com/zh/tiktok">https://snapany.com/zh/tiktok</a></p><p><a href="https://dlpanda.com/zh-CN">https://dlpanda.com/zh-CN</a></p></li><li><p>PDF24 Tools</p><p>免费在线合并、压缩、创建、编辑转换PDF文件的工具。 快捷方便、没有安装、没有注册<br>#PDF #工具</p><p><a href="https://tools.pdf24.org/zh/">https://tools.pdf24.org/zh/</a></p></li></ul><h2 id="AI工具使用"><a href="#AI工具使用" class="headerlink" title="AI工具使用"></a>AI工具使用</h2><ul><li><p>名称：基础入门与初步应用课程实战课程</p><p>描述：这个基础入门与初步应用实战课程将帮助学员掌握相关领域的基础知识，并通过实践应用探索更深入的技能。课程注重实际操作和案例分析，帮助学员将理论知识转化为实践能力，为未来的职业发展打下坚实基础。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/010fc2a2c24d">https://pan.quark.cn/s/010fc2a2c24d</a></p></li></ul><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2>]]></content>
    
    
    <categories>
      
      <category>资源分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>资源</tag>
      
      <tag>分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序员资源分享</title>
    <link href="/2024/01/13/data_sharing1/"/>
    <url>/2024/01/13/data_sharing1/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>程序员资源分享</code>。<br>其中包括了关于我的经验和收集的知识分享。资源来源网络。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>先免责声明，资源来自网络，侵权，请到<a href="https://github.com/AllenDEricDAlexander/AllenDEricDAlexander.github.io">github</a><br>提交<code>Issue</code>，我将在看到的第一时间处理。</p><p>请遵守知识共享协议，转载请署名，禁止演绎，非商业性使用！</p><p>资源来自互联网，请继续保持<code>开放共享</code>的精神。</p><p><strong>课程质量良莠不齐，注意别在垃圾教程上面浪费时间，比如，学Java看着看着，发现事不可为，立马去B站看尚硅谷的视频就行了。</strong></p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul><li><p>名称：王争的算法训练营(第5期)</p><p>描述：课程主要内容包括但不限于：排序算法、树、图、字符串、动态规划等常见的算法和数据结构；算法的时间和空间复杂度分析、编程技巧和调试方法等；这是一套高质量、有深度的算法和数据结构课程，通过深入浅出的方式帮助学员提高自己的算法和数据结构能力，是一门值得学习和推荐的课程。</p><p>链接：<a href="https://www.alipan.com/s/e3oF5zupRnH">https://www.alipan.com/s/e3oF5zupRnH</a></p></li><li><p>名称：数据结构与算法Python版 - 北京大学</p><p>描述：本课基于主讲教师在北京大学讲授数据结构与算法课（Python版）的多年教学实践经验，面向具有Python语言程序设计基础的大学生和社会公众，介绍常见的基本数据结构以及相关经典算法，强调问题-数据-算法的抽象过程，关注数据结构与算法的时间空间效率，培养学生编写出高效程序，具备解决问题的综合能力。</p><p>链接：<a href="https://www.alipan.com/s/9dPgSbHjpcY">https://www.alipan.com/s/9dPgSbHjpcY</a></p></li><li><p>资源名称：22数据结构与程序基础课打包-率辉</p><p>资源简介：22数据结构与程序基础课打包。</p><p>链接：<a href="https://www.alipan.com/s/XUkbZUPxmew">https://www.alipan.com/s/XUkbZUPxmew</a></p></li><li><p>资源名称：【幂次学院】数据结构与算法实战刷题特训营 – 带源码课件</p><p>资源简介：幂次学院的数据结构与算法365天刷题特训营，售价7999，授课教师：陈小玉(带队学生多次获得ACM、蓝桥杯国际赛金奖。)<br>,提升自己的核心竞争力，学习编程真正的核心，拒绝做码农调包侠，我们与《趣学算法》作者共同设计了数据结构与算法特训营。</p><p>链接：<a href="https://www.alipan.com/s/e86Zwm13Db7">https://www.alipan.com/s/e86Zwm13Db7</a></p></li><li><p>名称：【小象学院】面试算法LeetCode刷题班 - 带源码课件</p><p>描述：系统化讲解数据结构与算法中的核心技能，并融合了一线大厂面试真题和高频考点。</p><p>链接：<a href="https://www.alipan.com/s/kP4ZanTj4oG">https://www.alipan.com/s/kP4ZanTj4oG</a></p></li><li><p>名称：22数据结构与程序基础课打包</p><p>描述：22数据结构与程序基础课打包。</p><p>链接：<a href="https://www.alipan.com/s/XUkbZUPxmew">https://www.alipan.com/s/XUkbZUPxmew</a></p></li><li><p>名称：恋上数据结构与算法(第一季)-MJ大神精选</p><p>描述：精选数据结构与算法课程，成为一个合格程序员必会的知识。</p><p>链接：<a href="https://www.aliyundrive.com/s/gkLzhbPjacy">https://www.aliyundrive.com/s/gkLzhbPjacy</a></p></li><li><p>名称：【AcWing】算法基础课 + 算法提高课</p><p>描述：系统讲解常用算法与数据结构，给出相应代码模板，并会布置、讲解相应的基础算法题目。本课程系统讲解常用算法与数据结构的应用方式与技巧。。系统讲解常用算法与数据结构，给出相应代码模板，并会布置、讲解相应的基础算法题目。本课程系统讲解常用算法与数据结构的应用方式与技巧。。</p><p>链接：<a href="https://pan.quark.cn/s/93689ef84831">https://pan.quark.cn/s/93689ef84831</a></p></li><li><p>资源名称：【AcWing】算法基础课 + 算法提高课</p><p>资源简介：系统讲解常用算法与数据结构，给出相应代码模板，并会布置、讲解相应的基础算法题目。本课程系统讲解常用算法与数据结构的应用方式与技巧。。</p><p><a href="https://www.alipan.com/s/8qLNqPGSauR">https://www.alipan.com/s/8qLNqPGSauR</a></p></li><li><p>名称：【蓝桥云课】蓝桥杯省赛无忧班（Java 组） - 带源码课件</p><p>描述：本课程聚焦于算法竞赛必备知识，从 Java<br>语言基础、常用库函数，到复杂数据结构如树状数组、线段树、平衡树；从排序、枚举到动态规划、搜索算法，每个主题都将深入剖析。课程包含大量实战训练和题目解析，以确保知识点的实际运用。。</p><p>链接：<a href="https://pan.quark.cn/s/894e90ab69c9">https://pan.quark.cn/s/894e90ab69c9</a></p></li><li><p>名称：【百战程序员】大厂算法特训班</p><p>描述：课程适配C++ ，Java，Python等主流语言，帮助同学斩获心仪的大厂offer。</p><p>链接：<a href="https://www.aliyundrive.com/s/VJksoX15pmH">https://www.aliyundrive.com/s/VJksoX15pmH</a></p></li><li><p>名称：恋上数据结构与算法(第二季)-MJ大神精选</p><p>描述：数据结构与算法是各大名企业面试题中的常客，想在IT路上走得更远，就必须得学习和熟练掌握数据结构和算法。</p><p>链接：<a href="https://www.aliyundrive.com/s/fnruxFW3WsZ">https://www.aliyundrive.com/s/fnruxFW3WsZ</a></p></li><li><p>资源名称：王争的算法训练营(第5期)</p><p>资源简介：课程主要内容包括但不限于：排序算法、树、图、字符串、动态规划等常见的算法和数据结构；算法的时间和空间复杂度分析、编程技巧和调试方法等；这是一套高质量、有深度的算法和数据结构课程，通过深入浅出的方式帮助学员提高自己的算法和数据结构能力，是一门值得学习和推荐的课程。</p><p><a href="https://www.alipan.com/s/e3oF5zupRnH">https://www.alipan.com/s/e3oF5zupRnH</a></p></li></ul><h3 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h3><h4 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h4><ul><li><p>名称：【人邮异步社区】程序员入门机器学习必备的数学基础</p><p>描述：机器学习的数学基础（53集&#x2F;高等数学&#x2F;线性代数&#x2F;概率论&#x2F;数理统计）。</p><p>链接：<a href="https://www.alipan.com/s/svB2qBpRgpf">https://www.alipan.com/s/svB2qBpRgpf</a></p></li><li><p>名称：百面机器学习+LeetCode刷题-算法面试班-第四期 - 带源码课件</p><p>描述：以 百面机器学习 为教材 结合leetcode筛选刷题。</p><p>链接：<a href="https://www.alipan.com/s/6DUuKnQhFXv">https://www.alipan.com/s/6DUuKnQhFXv</a></p></li><li><p>名称：【七月在线】深度学习集训营-第3期</p><p>描述：本深度学习集训营略过Python基础，直接从人工神经网络起步，实战BAT工业项目，并组织学员参赛，帮助学员成功就业或转行。</p><p>链接：<a href="https://www.alipan.com/s/YfU9hw4W6xo">https://www.alipan.com/s/YfU9hw4W6xo</a></p></li><li><p>资源名称：【开课吧】完成你的第一个智能机器人 002期 - 带源码课件</p><p>资源简介：完成你的第一个智能机器人 002期。</p><p><a href="https://www.alipan.com/s/9sbZNXaPZVL">https://www.alipan.com/s/9sbZNXaPZVL</a></p></li><li><p>名称：【黑马程序员】年度钻石会员-人工智能AI进阶</p><p>描述：人工智能是当前乃至未来时代热门的技术之一，已在全球范围内掀起了研究与学习热潮。<br>本课程由传智研究院匠心打造，课程知识体系完备，从简明的python语言开始，到机器学习，再到AI的两大应用方向：计算机视觉（CV）和自然语言处理（NLP），几乎包含了当下AI就业市场的需求。同时，课程学习曲线设计平滑，根据学习者对知识的消化吸收情况，循序渐进增强自身的AI技能。</p><p>链接：<a href="https://www.aliyundrive.com/s/LZzk8FzzzmU">https://www.aliyundrive.com/s/LZzk8FzzzmU</a></p></li><li><p>名称：【开课吧】完成你的第一个智能机器人 002期 - 带源码课件</p><p>描述：完成你的第一个智能机器人 002期。</p><p>链接：<a href="https://www.alipan.com/s/9sbZNXaPZVL">https://www.alipan.com/s/9sbZNXaPZVL</a></p></li><li><p>名称：《零基础入门实战深度学习Pytorch》</p><p>描述：本课程旨在帮助零基础学员掌握PyTorch深度学习框架。通过实战项目，学员将学习神经网络基础、模型训练和调优技巧。逐步掌握深度学习核心概念，为未来在人工智能领域打下坚实基础。</p><p>链接：<a href="https://www.alipan.com/s/fBr4PwD9ooR">https://www.alipan.com/s/fBr4PwD9ooR</a></p></li><li><p>名称：结合编程学数学 专为程序员设计的线性代数 - 带源码课件</p><p>描述：创新设计+通俗易懂，这一次，bobo老师带你彻底学会线性代数！</p><p>链接：<a href="https://pan.quark.cn/s/f80a2e30fd78">https://pan.quark.cn/s/f80a2e30fd78</a></p></li><li><p>名称：【北风网】人工智能顶级实战工程师就业课程</p><p>描述：课程主要从高等数学必知必会、Python高级应用、Python项目、机器学习算法、机器学习项目、深度学习、推荐算法及数据挖掘、综合项目实战以及职业素养等全方位讲解，更加注重于实际操作以及开发经验的讲解，对学生的日常工作或未来发展将起到十分重要的指导作用。完美学习计划，成就精英人工智能工程师！</p><p>链接：<a href="https://pan.quark.cn/s/ea2e4bd2374f">https://pan.quark.cn/s/ea2e4bd2374f</a></p></li><li><p>名称：【光环国际】人工智能工程师直通车28期</p><p>链接：<a href="https://www.aliyundrive.com/s/QMH67zVcjXz">https://www.aliyundrive.com/s/QMH67zVcjXz</a></p></li><li><p>名称：【北风网】人工智能顶级实战工程师就业课程</p><p>描述：课程主要从高等数学必知必会、Python高级应用、Python项目、机器学习算法、机器学习项目、深度学习、推荐算法及数据挖掘、综合项目实战以及职业素养等全方位讲解，更加注重于实际操作以及开发经验的讲解，对学生的日常工作或未来发展将起到十分重要的指导作用。完美学习计划，成就精英人工智能工程师！</p><p>链接：<a href="https://www.alipan.com/s/Y7XUqwkVhRH">https://www.alipan.com/s/Y7XUqwkVhRH</a></p></li><li><p>资源名称：【北风网】人工智能顶级实战工程师就业课程</p><p>资源简介：课程主要从高等数学必知必会、Python高级应用、Python项目、机器学习算法、机器学习项目、深度学习、推荐算法及数据挖掘、综合项目实战以及职业素养等全方位讲解，更加注重于实际操作以及开发经验的讲解，对学生的日常工作或未来发展将起到十分重要的指导作用。完美学习计划，成就精英人工智能工程师！</p><p><a href="https://www.alipan.com/s/Y7XUqwkVhRH">https://www.alipan.com/s/Y7XUqwkVhRH</a></p></li><li><p>名称：极客时间 - Pandas 数据分析实战</p><p>描述：3 小时掌握数据分析核心技能。</p><p>链接：<a href="https://www.alipan.com/s/EzqkV9GwTGT">https://www.alipan.com/s/EzqkV9GwTGT</a></p></li></ul><h4 id="多模态"><a href="#多模态" class="headerlink" title="多模态"></a>多模态</h4><ul><li><p>名称：多模态项目实战班</p><p>描述：多模态项目实战班！深度的眼。</p><p>链接：<a href="https://pan.quark.cn/s/50601a0efa0d">https://pan.quark.cn/s/50601a0efa0d</a></p></li></ul><h4 id="LLM"><a href="#LLM" class="headerlink" title="LLM"></a>LLM</h4><ul><li><p>名称：程序员的 AI 启蒙课：ChatGPT 让你 1 人顶 3 人 - 带源码课件</p><p>描述：使用 ChatGPT + Copilot 快速开发 Vue3 仿简书项目，90% 代码由 AI 生成，效率质量双提升。</p><p>链接：<a href="https://www.alipan.com/s/5asrnGcz7DJ">https://www.alipan.com/s/5asrnGcz7DJ</a></p></li><li><p>名称：【黑马程序员】ChatGPT超全面从基础到实战视频教程 - 带源码课件</p><p>描述：本课程从ChatGPT的注册和使用讲起，分析了主流ChatGPT的应用场景，针对代码类开发场景做了详细实践，通过ChatGPT完成实战项目，从0-1搭建聊天机器人，轻松学习ChaGPT各知识点，让学习<br>ChtGPT 更加轻松。</p><p>链接：<a href="https://www.alipan.com/s/PA1z5yXuoqQ">https://www.alipan.com/s/PA1z5yXuoqQ</a></p></li><li><p>资源名称：【黑马程序员】ChatGPT超全面从基础到实战视频教程 - 带源码课件</p><p>资源简介：本课程从ChatGPT的注册和使用讲起，分析了主流ChatGPT的应用场景，针对代码类开发场景做了详细实践，通过ChatGPT完成实战项目，从0-1搭建聊天机器人，轻松学习ChaGPT各知识点，让学习ChtGPT<br>更加轻松。</p><p>链接：<a href="https://www.alipan.com/s/PA1z5yXuoqQ">https://www.alipan.com/s/PA1z5yXuoqQ</a></p></li></ul><h4 id="ML"><a href="#ML" class="headerlink" title="ML"></a>ML</h4><ul><li><p>资源名称：【人邮异步社区】程序员入门机器学习必备的数学基础</p><p>资源简介：机器学习的数学基础（53集&#x2F;高等数学&#x2F;线性代数&#x2F;概率论&#x2F;数理统计）。</p><p>链接：<a href="https://www.alipan.com/s/svB2qBpRgpf">https://www.alipan.com/s/svB2qBpRgpf</a></p></li><li><p>名称：概率图模型 - 带源码课件 (深蓝学院)</p><p>描述：课程内容多次迭代，实践环节贯穿始终。。</p><p>链接：<a href="https://www.alipan.com/s/HRamVX5YTZH">https://www.alipan.com/s/HRamVX5YTZH</a></p></li></ul><h4 id="DL"><a href="#DL" class="headerlink" title="DL"></a>DL</h4><ul><li><p>名称：【七月在线】深度学习集训营-第3期</p><p>描述：本深度学习集训营略过Python基础，直接从人工神经网络起步，实战BAT工业项目，并组织学员参赛，帮助学员成功就业或转行。</p><p>链接：<a href="https://www.alipan.com/s/YfU9hw4W6xo">https://www.alipan.com/s/YfU9hw4W6xo</a></p></li><li><p>名称：深度学习 PyTorch 框架</p><p>描述：超口碑课程，手把手教你洞悉 PyTorch 模型训练过程，彻底掌握 PyTorch 项目实战。</p><p>链接：<a href="https://www.alipan.com/s/rGgzy7XQ9rT">https://www.alipan.com/s/rGgzy7XQ9rT</a></p></li></ul><h4 id="CV方向"><a href="#CV方向" class="headerlink" title="CV方向"></a>CV方向</h4><ul><li><p>python深度学习验证码识别全集</p><p>资源链接： <a href="https://www.aliyundrive.com/s/eNiyU9SA1Hq">https://www.aliyundrive.com/s/eNiyU9SA1Hq</a></p></li><li><p>名称：计算机视觉应用基础 - 带源码课件</p><p>描述：溯本清源，把握问题的本质，理解经典方法的思想精髓，举一反三。</p><p>链接：<a href="https://www.alipan.com/s/5JMmoMsHFy8">https://www.alipan.com/s/5JMmoMsHFy8</a></p></li><li><p>名称：计算机视觉应用基础 - 带源码课件</p><p>描述：溯本清源，把握问题的本质，理解经典方法的思想精髓，举一反三。</p><p>链接：<a href="https://www.alipan.com/s/5JMmoMsHFy8">https://www.alipan.com/s/5JMmoMsHFy8</a></p></li><li><p>名称：基于图像的三维重建 - 带源码课件</p><p>描述：学习基于几何的三维重建完整流程，核心算法逐行代码实现。</p><p>链接：<a href="https://www.alipan.com/s/GWftwQYrnon">https://www.alipan.com/s/GWftwQYrnon</a></p></li><li><p>资源名称：计算机视觉-Opencv项目实战(Python版) - 带源码课件</p><p>资源简介：学习计算机视觉需要的基础知识点，结合Opencv进行项目实战。</p><p><a href="https://www.alipan.com/s/E87KCGvqFJL">https://www.alipan.com/s/E87KCGvqFJL</a></p></li><li><p>名称：计算机视觉-Opencv项目实战(Python版) - 带源码课件</p><p>描述：学习计算机视觉需要的基础知识点，结合Opencv进行项目实战。</p><p>链接：<a href="https://www.alipan.com/s/E87KCGvqFJL">https://www.alipan.com/s/E87KCGvqFJL</a></p></li><li><p>名称：计算机视觉-Opencv项目实战(Python版) - 带源码课件</p><p>描述：学习计算机视觉需要的基础知识点，结合Opencv进行项目实战。</p><p>链接：<a href="https://pan.quark.cn/s/a7b1a1f9ede4">https://pan.quark.cn/s/a7b1a1f9ede4</a></p></li><li><p>名称：计算机视觉-Opencv项目实战(Python版) - 带源码课件</p><p>描述：学习计算机视觉需要的基础知识点，结合Opencv进行项目实战。</p><p>链接：<a href="https://www.alipan.com/s/E87KCGvqFJL">https://www.alipan.com/s/E87KCGvqFJL</a></p></li><li><p>名称：【3D视觉工坊】国内首个面向工业级实战的点云处理课程 - 带源码课件</p><p>描述：计算机视觉的最终体现是三维视觉，而三维视觉的表达方式则是点云，点云处理在整个三维视觉领域占有非常重要的地位，几乎涉及到所有相关领域，例如自动驾驶感知定位、SLAM、三维场景重建、AR&#x2F;VR、SFM、姿态估计、三维识别、结构光、立体视觉、三维测量、视觉引导等。</p><p>链接：<a href="https://www.alipan.com/s/WThNognfzma">https://www.alipan.com/s/WThNognfzma</a></p></li><li><p>资源名称：PyTorch深度学习开发医学影像端到端判别项目</p><p>资源简介：构建深度学习模型，综合应用完整企业级项目。</p><p><a href="https://www.alipan.com/s/8hVg2VWM5ZV">https://www.alipan.com/s/8hVg2VWM5ZV</a></p></li></ul><h4 id="自动驾驶"><a href="#自动驾驶" class="headerlink" title="自动驾驶"></a>自动驾驶</h4><ul><li><p>名称：【开课吧】自动驾驶算法工程师 01期 - 带源码课件</p><p>描述：自动驾驶算法工程师！</p><p>链接：<a href="https://www.alipan.com/s/NP5Cmob3gkn">https://www.alipan.com/s/NP5Cmob3gkn</a></p></li><li><p>名称：自动驾驶控制与规划 - 带源码课件</p><p>描述：由于自身的假设以及建模方法不同，各类规划控制方法均存在优劣且适用于不同的场景，比如低速或者高速、直道或者弯道。尽管一些博客文章对部分算法的原理做了简要介绍，但依然没有系统梳理算法的原理推导以及优劣。这门课程希望弥补这些不足，课程不仅会详细讲解主流的规控算法的原理，而且分享算法落地实践的经验，并通过丰富的Project让大家巩固课程中的所学。</p><p>链接：<a href="https://www.alipan.com/s/aJVKXSorMHH">https://www.alipan.com/s/aJVKXSorMHH</a></p></li><li><p>名称：彻底剖析激光-视觉-IMU-GPS融合SLAM算法：理论推导、代码讲解和实战</p><p>描述：我们联合机器人学国家重点实验室的博士大佬推出这门课程，从理论和代码实现两个方面对激光雷达-视觉-IMU-GPS融合的SLAM算法框架和技术难点进行讲解，并且博士大佬会根据自己多年的机器人工程经验，向大家讲解在实际机器人应用中多模态融合的方法和技巧。</p><p>链接：<a href="https://www.alipan.com/s/nCBRK4cXcd8">https://www.alipan.com/s/nCBRK4cXcd8</a></p></li><li><p>资源名称：【深蓝学院】多传感器融合定位 - 带源码课件</p><p>资源简介：由浅入深全面讲解多传感器融合建图与定位原理。</p><p>链接：【阿里云盘】点击获取 (<a href="https://t.me/zaihuaboxbot?start=get17151298798A1C0A">https://t.me/zaihuaboxbot?start=get17151298798A1C0A</a>)</p></li></ul><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><ul><li><p>名称：【开课吧】AI算法落地与工程部署实战</p><p>描述：人工智能（AI）已经成为了当今科技领域的热门话题，但将AI算法应用到实际生产环境中并不是一件容易的事情。AI算法的落地和工程部署需要考虑多种因素，其中包括数据准备、模型选择、计算资源分配、安全性等方面。</p><p>链接：<a href="https://www.alipan.com/s/oLDndY9qqb6">https://www.alipan.com/s/oLDndY9qqb6</a></p></li><li><p>资源名称：【开课吧】AI算法落地与工程部署实战</p><p>资源简介：人工智能（AI）已经成为了当今科技领域的热门话题，但将AI算法应用到实际生产环境中并不是一件容易的事情。AI算法的落地和工程部署需要考虑多种因素，其中包括数据准备、模型选择、计算资源分配、安全性等方面。</p><p><a href="https://www.alipan.com/s/oLDndY9qqb6">https://www.alipan.com/s/oLDndY9qqb6</a></p></li></ul><h4 id="推荐算法"><a href="#推荐算法" class="headerlink" title="推荐算法"></a>推荐算法</h4><ul><li><p>名称：推荐系统训练营-推荐系统工程师</p><p>描述：帮助你成为一名合格的推荐系统工程师，不需要任何AI基础，仅需要编程基础。</p><p>链接：<a href="https://www.aliyundrive.com/s/uYovrdZW8KK">https://www.aliyundrive.com/s/uYovrdZW8KK</a></p></li><li><p>名称：【贪心科技】推荐系统训练营-推荐系统工程师 - 带源码课件</p><p>描述：帮助你成为一名合格的推荐系统工程师，不需要任何AI基础，仅需要编程基础。</p><p>链接：<a href="https://www.alipan.com/s/uYovrdZW8KK">https://www.alipan.com/s/uYovrdZW8KK</a></p></li><li><p>名称：【贪心科技】推荐系统训练营-推荐系统工程师 - 带源码课件</p><p>描述：帮助你成为一名合格的推荐系统工程师，不需要任何AI基础，仅需要编程基础。</p><p>链接：<a href="https://pan.quark.cn/s/d868d29a6e77">https://pan.quark.cn/s/d868d29a6e77</a></p></li></ul><h3 id="Robotics"><a href="#Robotics" class="headerlink" title="Robotics"></a>Robotics</h3><h4 id="机器人"><a href="#机器人" class="headerlink" title="机器人"></a>机器人</h4><ul><li><p>名称：【深蓝学院】机器人学中的状态估计 - 带源码课件</p><p>描述：系统讲述状态估计理论体系。</p><p>链接：<a href="https://www.alipan.com/s/y9v4vktRxnV">https://www.alipan.com/s/y9v4vktRxnV</a></p></li></ul><h4 id="SLAM"><a href="#SLAM" class="headerlink" title="SLAM"></a>SLAM</h4><ul><li><p>名称：【深蓝学院】视觉SLAM进阶：从零开始手写VIO - 带源码课件</p><p>描述：系统讲解Visual与IMU的多传感器信息融合。</p><p>链接：<a href="https://www.alipan.com/s/NSZpyP4iNUz">https://www.alipan.com/s/NSZpyP4iNUz</a></p></li><li><p>名称：【深蓝学院】激光SLAM理论与实践 - 带源码课件</p><p>描述：从零实现一个简单完整的激光SLAM系统。</p><p>链接：<a href="https://www.alipan.com/s/QpoGKWmynvN">https://www.alipan.com/s/QpoGKWmynvN</a></p></li><li><p>名称：【深蓝学院】视觉SLAM理论与实践 - 带源码课件</p><p>描述：精心设计作业和实践项目，班主任全程带班，助教1V1批改作业！</p><p>链接：<a href="https://www.alipan.com/s/Xik6sjWUQ6N">https://www.alipan.com/s/Xik6sjWUQ6N</a></p></li></ul><h4 id="ROS"><a href="#ROS" class="headerlink" title="ROS"></a>ROS</h4><ul><li><p>名称：【深蓝学院】ROS机械臂开发：从入门到实战</p><p>描述：课程设置由浅入深，涵盖ROS机械臂开发中的诸多细节。</p><p>链接：<a href="https://www.alipan.com/s/xEpkP9Fqkkt">https://www.alipan.com/s/xEpkP9Fqkkt</a></p></li><li><p>名称：移动机器人运动规划 - 带源码课件</p><p>描述：系统讲解运动规划实用算法，并涵盖诸多实践工程技巧。</p><p>链接：<a href="https://www.alipan.com/s/kLPDRr9QcyG">https://www.alipan.com/s/kLPDRr9QcyG</a></p></li><li><p>名称：ROS理论与实践 - 带源码课件</p><p>描述：经典课程全新录制，聚焦ROS在移动机器人中的核心功能。</p><p>链接：<a href="https://www.alipan.com/s/fo5VpFp9sLr">https://www.alipan.com/s/fo5VpFp9sLr</a></p></li></ul><h4 id="无人机"><a href="#无人机" class="headerlink" title="无人机"></a>无人机</h4><ul><li><p>名称：多旋翼飞行器设计与控制 - 北京航空航天大学</p><p>描述：北京航空航天大学公开课：多旋翼飞行器设计与控制。</p><p>链接：<a href="https://www.alipan.com/s/rn3EP7Yqcw1">https://www.alipan.com/s/rn3EP7Yqcw1</a></p></li></ul><h4 id="路径规划"><a href="#路径规划" class="headerlink" title="路径规划"></a>路径规划</h4><ul><li><p>名称：移动机器人运动规划 - 带源码课件</p><p>描述：系统讲解运动规划实用算法，并涵盖诸多实践工程技巧。</p><p>链接：<a href="https://www.alipan.com/s/kLPDRr9QcyG">https://www.alipan.com/s/kLPDRr9QcyG</a></p></li></ul><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><ul><li><p>名称：【深蓝学院】多传感器融合定位 - 带源码课件</p><p>描述：由浅入深全面讲解多传感器融合建图与定位原理。</p><p>链接：<a href="https://www.alipan.com/s/6M1ErXRYUWb">https://www.alipan.com/s/6M1ErXRYUWb</a></p></li></ul><h4 id="仿真"><a href="#仿真" class="headerlink" title="仿真"></a>仿真</h4><h4 id="点图"><a href="#点图" class="headerlink" title="点图"></a>点图</h4><ul><li><p>名称：三维点云处理 - 带源码课件</p><p>描述：从零开始掌握三维点云算法与项目应用，聚焦算法细节，提升工程能力。</p><p>链接：<a href="https://www.alipan.com/s/zqx88imj9uP">https://www.alipan.com/s/zqx88imj9uP</a></p></li></ul><h3 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h3><h4 id="全栈测试"><a href="#全栈测试" class="headerlink" title="全栈测试"></a>全栈测试</h4><ul><li><p>名称：全能软件测试工程师</p><p>描述：小白都能轻松学会的热门岗位，就业前景广阔，职业寿命长 遵循大厂用人标准，覆盖主流测试技术，三个半月学成可就业<br>满足多种行业、多种岗位的需求，成为企业争抢的全能人才！</p><p>链接：<a href="https://www.aliyundrive.com/s/1C9frQ6FTwC">https://www.aliyundrive.com/s/1C9frQ6FTwC</a></p></li><li><p>名称：【黑马程序员】软件测试 V5.0 - 带源码课件</p><p>描述：软件测试是对开发的软件功能进行测试，找出软件bug的人员。任何软项目都需要测试，随着数字化时代推进，软件测试人员需求会越来越多。</p><p>链接：<a href="https://www.alipan.com/s/jnt6ZjZrQ2h">https://www.alipan.com/s/jnt6ZjZrQ2h</a></p></li><li><p>名称：【黑马程序员】软件测试 V5.0 - 带源码课件</p><p>描述：软件测试是对开发的软件功能进行测试，找出软件bug的人员。任何软项目都需要测试，随着数字化时代推进，软件测试人员需求会越来越多。</p><p>链接：<a href="https://pan.quark.cn/s/a7b326721357">https://pan.quark.cn/s/a7b326721357</a></p></li><li><p>名称：测试开发核心技术 46 讲</p><p>描述：「功能测试」到「测试开发」的升级锦囊</p><p>链接：<a href="https://www.aliyundrive.com/s/3vivKqfPmsf">https://www.aliyundrive.com/s/3vivKqfPmsf</a></p></li><li><p>名称：【黑马程序员】软件测试 V5.0 - 带源码课件</p><p>描述：软件测试是对开发的软件功能进行测试，找出软件bug的人员。任何软项目都需要测试，随着数字化时代推进，软件测试人员需求会越来越多。</p><p>链接：<a href="https://www.alipan.com/s/jnt6ZjZrQ2h">https://www.alipan.com/s/jnt6ZjZrQ2h</a></p></li><li><p>名称：拉勾教育 - 高效敏捷测试 49 讲</p><p>描述：用敏捷思维重构你的测试技能。</p><p>链接：<a href="https://www.alipan.com/s/fN5cRuWy8vT">https://www.alipan.com/s/fN5cRuWy8vT</a></p></li></ul><h4 id="python自动化测试"><a href="#python自动化测试" class="headerlink" title="python自动化测试"></a>python自动化测试</h4><ul><li><p>名称：【51cto】Pytest全栈自动化测试指南</p><p>描述：掌握Pytest框架的使用和封装测试框架</p><p>链接：<a href="https://pan.quark.cn/s/67bd527757de">https://pan.quark.cn/s/67bd527757de</a></p></li><li><p>名称：Selenium3与Python3实战Web自动化测试框架</p><p>描述：本课程从实战项目验证码破解出发，学习Web自动化测试的方方面面，并且教你如何解决测试过程中经常遇见的问题，以及自动化框架开发的思想，最后开发出能在工作中直接应用的web自动化测试框架。</p><p>链接：<a href="https://www.alipan.com/s/fiarq7rENTu">https://www.alipan.com/s/fiarq7rENTu</a></p></li><li><p>名称：软件测试之JMeter高级性能测试训练营（别再用loadrunner了）</p><p>描述：软件测试之JMeter高级性能测试训练营（别再用loadrunner了）！</p><p>链接：<a href="https://www.aliyundrive.com/s/yPpiEMJbzaR">https://www.aliyundrive.com/s/yPpiEMJbzaR</a></p></li><li><p>名称：软件测试之python高级软件测试开发第07期【柠檬班VIP】</p><p>描述：软件测试之python高级软件测试开发第7期【柠檬班VIP】。</p><p>链接：<a href="https://www.aliyundrive.com/s/wV3bj8iwxMg">https://www.aliyundrive.com/s/wV3bj8iwxMg</a></p></li></ul><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><h4 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h4><ul><li><p>名称：siki学院-Unity2.5D RTS案例-云端战纪</p><p>描述：专注于Unity引擎下2.5D实时战略（RTS）游戏开发的实战课程。课程通过Unity实现2.5D游戏效果，涵盖地图创建、角色控制、战斗系统等多个关键模块。学员将学习如何构建和管理游戏场景，实现角色间的交互和战斗逻辑，提升Unity游戏开发能力。</p><p>链接：<a href="https://pan.quark.cn/s/2dbdd03402eb">https://pan.quark.cn/s/2dbdd03402eb</a></p></li><li><p>名称：剧情对话系统-Unity2022 - 带源码课件</p><p>描述：本课程采用代码的方式来制作Unity中的剧情对话系统。剧情系统以2D的游戏为载体，课程中主要讲解瓦片地图的制作、角色动画的制作、相机跟随、Excel文件内容的制作、Excel文件的解析、对话框的制作等，其中对话有顺序对话和分支对话的处理，对话完成之后可能会影响角色属性的变化。</p><p>链接：<a href="https://pan.quark.cn/s/dc4ab2da9c4d">https://pan.quark.cn/s/dc4ab2da9c4d</a></p></li><li><p>名称：Unity休闲手机游戏开发课程</p><p>描述：Unity休闲开发课程将教您如何利用Unity引擎创建令人愉快的休闲手机游戏。从基础的游戏开发知识到高级的游戏制作技巧，您将学习到创建各种类型的休闲游戏所需的关键技能和工具。无论您是初学者还是有一定经验的开发者，本课程都能帮助您快速入门和精通Unity游戏开发。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/359099ae76c5">https://pan.quark.cn/s/359099ae76c5</a></p></li></ul><h4 id="UI设计"><a href="#UI设计" class="headerlink" title="UI设计"></a>UI设计</h4><ul><li><p>名称：【飞鸟时代】郗鉴UI教程特训班</p><p>描述：了解ui设计师的工作内容:网页设计，app设计，图标设计，主题设计等，分别展示案例。并且讲述UI设计的未来与现状，为同学们梳理职业发展方向。同时每个人写下自己的职业目标，做成太空舱等三年后发回给学生。。</p><p>链接：<a href="https://www.alipan.com/s/uPkpmWPdZx9">https://www.alipan.com/s/uPkpmWPdZx9</a></p></li></ul><h4 id="大前端"><a href="#大前端" class="headerlink" title="大前端"></a>大前端</h4><ul><li><p>名称：移动端架构师 - 带源码课件</p><p>描述：亲历日活千万级APP全流程开发 掌握大小厂通杀的架构技术，快速突破个人职业瓶颈 让你技术更强，思维更深，视野更广。</p><p>链接：<a href="https://www.alipan.com/s/ZZdU7mC9Q1H">https://www.alipan.com/s/ZZdU7mC9Q1H</a></p></li><li><p>名称：NestJS入门到实战前端必学服务端新趋势 - 带源码课件</p><p>描述：近几年快速发展的Node.js框架，掌握未来前端工程师后端开发能力。</p><p>链接：<a href="https://www.alipan.com/s/oxe2FWwvaG3">https://www.alipan.com/s/oxe2FWwvaG3</a></p></li><li><p>名称：Flutter从入门到进阶 实战携程网App 一网打尽核心技术 - 带源码课件</p><p>描述：解锁Flutter开发新姿势，一网打尽Flutter核心技术。。</p><p>链接：<a href="https://www.alipan.com/s/seFEzBqhCKr">https://www.alipan.com/s/seFEzBqhCKr</a></p></li><li><p>名称：Flutter高级进阶实战-仿哔哩哔哩-掌握Flutter高阶技能 - 带源码课件</p><p>描述：一次性深度掌握Flutter高阶技能+商业级复杂项目架构设计与开发方案。</p><p>链接：<a href="https://www.alipan.com/s/F1eJsEnq4YA">https://www.alipan.com/s/F1eJsEnq4YA</a></p></li><li><p>名称：体系课-大前端</p><p>描述：体系课程，知识涵盖面广泛。</p><p>链接：<a href="https://www.aliyundrive.com/s/8Y2z9ku1oCn">https://www.aliyundrive.com/s/8Y2z9ku1oCn</a></p></li><li><p>名称：Node.js入门到企业Web开发中的应用</p><p>描述：随着前端能力增强，Web场景的企业级应用Node.js已经成了首选技术。本课带你从静态页面到本地代码开发、构建发布，甚至线上服务器运维，逐一击破Node.js背后的原理和在实际开发中的应用，助你打开前端通往全栈工程师的大门！</p><p>链接：<a href="https://www.alipan.com/s/iqUUr7yLqVy">https://www.alipan.com/s/iqUUr7yLqVy</a></p></li><li><p>资源名称：千锋教育前端TypeScript入门视频教程（陆神顶配版TS入门教程） - 带源码课件</p><p>资源简介：本套视频带你从官网的知识点入手，结合案例循序渐进带你入门TypeScript。课程共设计四个篇章，基础篇，高级篇，案例篇及项目篇。在看视频的同时，还整理了详细的视频的文字版，你可以看完视频，对着笔记来练习。本套视频将帮大家从<br>0 到 1 学习TypeScript,让你能读懂别人的TS代码的同时也能编写自己的TS代码。</p><p><a href="https://www.alipan.com/s/W4SAUoU66Cr">https://www.alipan.com/s/W4SAUoU66Cr</a></p></li></ul><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><ul><li><p>名称：腾讯课堂 - iOS Flutter高级进阶班级 - 带源码课件</p><p>描述：iOS Flutter高级进阶班级 - 带源码课件。</p><p>链接：<a href="https://pan.quark.cn/s/31d62545d793">https://pan.quark.cn/s/31d62545d793</a></p></li><li><p>资源名称：腾讯课堂 - iOS Flutter高级进阶班级 - 带源码课件</p><p>资源简介：iOS Flutter高级进阶班级 - 带源码课件。</p><p><a href="https://www.alipan.com/s/khjc7sktNxz">https://www.alipan.com/s/khjc7sktNxz</a></p></li></ul><h4 id="哄蒙开发"><a href="#哄蒙开发" class="headerlink" title="哄蒙开发"></a>哄蒙开发</h4><ul><li><p>名称：鸿蒙原生应用项目实战-《锋盟移动办公》 - 带源码课件</p><p>描述：一站式移动办公平台-高保真交互原型一款移动办公软件，企业B端产品，能帮助企业提供办公效率，将线下办公申请流程搬到线上，提供无纸化办公。平台提供流程申请、OA审批、考勤打卡、在线沟通、汇报等功能，随时随地处理工作，提供工作效率。</p><p>链接：<a href="https://www.alipan.com/s/NU2i3eFYWMd">https://www.alipan.com/s/NU2i3eFYWMd</a></p></li><li><p>资源名称：鸿蒙原生应用项目实战-《锋盟移动办公》 - 带源码课件</p><p>资源简介：一站式移动办公平台-高保真交互原型一款移动办公软件，企业B端产品，能帮助企业提供办公效率，将线下办公申请流程搬到线上，提供无纸化办公。平台提供流程申请、OA审批、考勤打卡、在线沟通、汇报等功能，随时随地处理工作，提供工作效率。</p><p><a href="https://www.alipan.com/s/NU2i3eFYWMd">https://www.alipan.com/s/NU2i3eFYWMd</a></p></li></ul><h4 id="安卓开发"><a href="#安卓开发" class="headerlink" title="安卓开发"></a>安卓开发</h4><ul><li><p>名称：Android移动互联网高级开发正式课【码牛学院】 - 02期 - 带源码课件</p><p>描述：Android(安卓)移动互联网高级开发正式课【VIP课程】【码牛学院】 - 02期。</p><p>链接：<a href="https://www.alipan.com/s/NXaHZ3FQdSe">https://www.alipan.com/s/NXaHZ3FQdSe</a></p></li><li><p>名称：安卓应用安全SO进阶培训班</p><p>描述：课程以确实地提高自身水平、直播里一步一步教你、重实战项目高频场景全总结、水平高技术强到违反广告法为目标，课程中讲到的知识点如plthook进阶、frida中javahook实现、inlinehook中可能遇到的bug、通过so装载流程准确定位脱壳点等都是能够解决大家实际工作中的问题的。</p><p>链接：<a href="https://www.alipan.com/s/aRAPoP2SMsK">https://www.alipan.com/s/aRAPoP2SMsK</a></p></li><li><p>名称：【51CTO】移动端混合应用开发及移动端开发框架MUI</p><p>描述：此套混合端移动应用开发及移动端开发框架MUI视频教程将介绍如何使用HTML5完成移动端混合应用开发，课程以移动端框架MUI为基础，以微信项目为目标，介绍MUI框架的使用，包含移动端排版布局，HTML5借助框架完成手机摄像头调用、手机相册调用、手机重力感应调用等特效，并最终完成微信案例项目。教程共包含31讲的学习内容，本课程适合具有HTML与CSS基础的朋友学习。</p><p>链接：<a href="https://www.alipan.com/s/1fofoYt1isW">https://www.alipan.com/s/1fofoYt1isW</a></p></li></ul><h4 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h4><ul><li><p>名称：uni-app实战音频小说app小程序</p><p>描述：本项目为uni-app 实战音频与小说阅读器app、小程序和H5开发，另外还会结合vuex管理项目状态。一次开发，同时搞定Android、小程序和H5端等。</p><p>链接：<a href="https://www.aliyundrive.com/s/bhrt5bUfSse">https://www.aliyundrive.com/s/bhrt5bUfSse</a></p></li><li><p>资源名称：uni-app实战社区交友类app开发 - 带源码课件</p><p>资源简介：本季度为uni-app实战项目第一季度，将实战开发社区交友类app，其中会包括发布到安卓端app，IOS端app、微信小程序和支付宝小程序。</p><p><a href="https://www.alipan.com/s/SNdzo99jfPN">https://www.alipan.com/s/SNdzo99jfPN</a></p></li><li><p>名称：微信小程序商城构建全栈应用</p><p>描述：通过开发一个已上线的小程序商城全栈应用，学会如何打造iOS，Android，Web多端适配的服务端标准API，掌握三端分离开发方式，理解现代Web的基本架构思想</p><p>链接：<a href="https://www.alipan.com/s/FjSMPAELBBg">https://www.alipan.com/s/FjSMPAELBBg</a></p></li><li><p>名称：微信小程序入门与实战 常用组件API开发技巧项目实战</p><p>描述：这是一门蜚声内外的高口碑微信小程序开发课程，也是领先上线的微信小程序开发课程。小程序早期开发者多数都是从这门课程走出去的，经过4年迭代，这里，从一个课程，发展成了一个用户活跃度高、用户技术水平高、用户素质高的“小程序开发社区”。</p><p>链接：<a href="https://www.alipan.com/s/rBrvTWZQAjq">https://www.alipan.com/s/rBrvTWZQAjq</a></p></li><li><p>资源标题：【尚硅谷】2024最新版小程序基础与慕尚花坊项目</p><p>资源描述：教程内容涵盖：基础概念、内置组件、内置<br>API、配置文件、事件处理、模板语法、自定义组件、组件通讯、插槽、NPM支持、分包加载、框架扩展、状态管理、计算属性、页面组件生命周期、小程序开放能力、上线发布流程等核心知识点。资源易和谐，有需要的速度保存。</p><p>链接：<a href="https://pan.quark.cn/s/171c5a2da553">https://pan.quark.cn/s/171c5a2da553</a></p></li><li><p>名称：uni-app多端企业网盘全栈开发</p><p>描述：本季度为uni-app + egg.js实战多端企业网盘全栈开发，另外还会结合vuecli + iview +<br>bootstrap4实现PC端企业网盘，vuex管理项目状态，OSS对象存储分发加速等。本项目会兼容Android、iOS、小程序、H5端和PC端等。</p><p>链接：<a href="https://www.aliyundrive.com/s/8Jc4YEV35eN">https://www.aliyundrive.com/s/8Jc4YEV35eN</a></p></li><li><p>名称：uni-app实战视频点播app小程序</p><p>描述：本季度为uni-app + egg.js 实战视频点播类app、小程序和H5全栈开发，另外还会结合subNVue实现自定义播放器组件，vuex管理项目状态，腾讯云点播<br>VOD转码处理和分发加速等。一次开发，同时搞定Android、iOS、小程序和H5端等。</p><p>链接：<a href="https://www.aliyundrive.com/s/8UrApQu38qF">https://www.aliyundrive.com/s/8UrApQu38qF</a></p></li><li><p>名称：uni-app实战仿微信app开发</p><p>描述：本季度为uni-app + egg.js 实战仿微信app和小程序全栈开发，开启纯nvue原生渲染，大大提高性能。一次开发，同时搞定Android、iOS和小程序端等。</p><p>链接：<a href="https://www.aliyundrive.com/s/F7hrdyTgWSH">https://www.aliyundrive.com/s/F7hrdyTgWSH</a></p></li><li><p>名称：云原生微信小程序开发实战</p><p>描述：揭秘腾讯云研发团队实战锦囊。</p><p>链接：<a href="https://www.aliyundrive.com/s/RHDwinavw92">https://www.aliyundrive.com/s/RHDwinavw92</a></p></li></ul><h4 id="Web开发高手"><a href="#Web开发高手" class="headerlink" title="Web开发高手"></a>Web开发高手</h4><ul><li><p>名称：【渡一教育】WEB前端大师课 - 带源码课件</p><p>描述：WEB前端大师课。</p><p>链接：<a href="https://www.alipan.com/s/JtTPbdjK6ny">https://www.alipan.com/s/JtTPbdjK6ny</a></p></li><li><p>名称：【黑马程序员】Vue.js深入浅出教程</p><p>描述：通过实战项目掌握Vue.js的开发电商网站核心业务开发：用户和权限管理、商品管理、库存管理、购物车、订单、物流等。</p><p>链接：<a href="https://www.alipan.com/s/y3fP33H5KdZ">https://www.alipan.com/s/y3fP33H5KdZ</a></p></li><li><p>名称：Angular4.0从入门到实战 打造股票管理网站</p><p>描述：课程紧跟Angular更新迭代，带你尝鲜最近发布的Angular4.0版本。</p><p>链接：<a href="https://www.alipan.com/s/Jbm5VXU93Zt">https://www.alipan.com/s/Jbm5VXU93Zt</a></p></li><li><p>名称：Web前端大厂工程师训练营</p><p>描述：系统高效定制化前端提升路径。</p><p>链接：<a href="https://www.alipan.com/s/QSYY8RFj8h9">https://www.alipan.com/s/QSYY8RFj8h9</a></p></li><li><p>名称：uni-app实战在线教育类app开发</p><p>描述：本季度基于uni-app实战开发在线教育类app和小程序，课程包括：图文，音频，视频，电子书、会员、直播、问答、考试、拼团秒杀、优惠券。一次开发，同时搞定Android、iOS、微信小程序、H5端。</p><p>链接：<a href="https://www.alipan.com/s/Gnb9KunZBre">https://www.alipan.com/s/Gnb9KunZBre</a></p></li><li><p>资源名称：【思否编程】自顶向下学 React 源码</p><p>资源简介：学习React源码，不仅能掌握业界最顶尖前端框架的运行原理，探索前端边界。也能让自己成为业务线React大拿。</p><p>链接：<a href="https://www.alipan.com/s/ESj6QLqjs81">https://www.alipan.com/s/ESj6QLqjs81</a></p></li><li><p>资源名称：Web前端开发工程师高薪进阶班【金渡教育】 - 04期 - 带源码课件</p><p>资源简介：Web前端开发工程师高薪进阶班【金渡教育】 - 04期。</p><p>链接：<a href="https://www.alipan.com/s/TME56ykdYzS">https://www.alipan.com/s/TME56ykdYzS</a></p></li><li><p>名称：ES6+ 开发电商网站的账号体系 JS SDK</p><p>描述：实战中贯穿ES6+ 语法，前端完全使用原生JS语法，不依赖框架，实现模块、组件、请求、视图渲染和事件绑定等，打造一个电商网站的账号体系SDK，提升自己的开发效率和代码可维护性。</p><p>链接：<a href="https://www.alipan.com/s/khYfLvufdJK">https://www.alipan.com/s/khYfLvufdJK</a></p></li><li><p>名称：Laravel和Angular JS 开发全栈知乎</p><p>描述：前端AngularJS，后端Laravel，开发一个你自己的 “知乎”，特别适合这两门技术的初学者，让你获得技术和开发思维的双重提升。</p><p>链接：<a href="https://www.alipan.com/s/FDf3UWWMoHP">https://www.alipan.com/s/FDf3UWWMoHP</a></p></li><li><p>名称：Web前端开发工程师高薪进阶班【金渡教育】 - 04期 - 带源码课件</p><p>描述：Web前端开发工程师高薪进阶班【金渡教育】 - 04期。</p><p>链接：<a href="https://www.alipan.com/s/TME56ykdYzS">https://www.alipan.com/s/TME56ykdYzS</a></p></li><li><p>名称：【后盾人】系统课程 - Laravel+vue3系统平台</p><p>描述：学习使用 Laravel+Vue3开发系统平台，该项目支持多站点、多模块应用，每个站点可以独立管理，每个站点拥有不同的 RBAC<br>角色权限控制，使用 Ts+JS+pinia+Element Plus+axios+vite+Mysql 等技术。</p><p>链接：<a href="https://www.alipan.com/s/UoYi1mAksJh">https://www.alipan.com/s/UoYi1mAksJh</a></p></li><li><p>名称：响应式开发一招致胜</p><p>描述：忘记设备尺寸，一套代码适配多终端，响应式开发让用户体验和开发效率完美结合。</p><p>链接：<a href="https://www.alipan.com/s/stgckgFDStv">https://www.alipan.com/s/stgckgFDStv</a></p></li><li><p>名称：网易9大前端项目就业实训营</p><p>描述：0基础入门前端开发，实战9个企业级项目。</p><p>链接：<a href="https://www.aliyundrive.com/s/vnQ82KNoDtb">https://www.aliyundrive.com/s/vnQ82KNoDtb</a></p></li><li><p>资源名称：【后盾人】系统课程 - Laravel+vue3系统平台</p><p>资源简介：学习使用 Laravel+Vue3开发系统平台，该项目支持多站点、多模块应用，每个站点可以独立管理，每个站点拥有不同的 RBAC<br>角色权限控制，使用 Ts+JS+pinia+Element Plus+axios+vite+Mysql 等技术。</p><p><a href="https://www.alipan.com/s/UoYi1mAksJh">https://www.alipan.com/s/UoYi1mAksJh</a></p></li><li><p>资源名称：【安全牛】CTF从入门到提升</p><p>资源简介：本课程涉及CTF中WEB、MISC、Crypto三个方向。从各种漏洞原理讲起，并配合实际例题。让大家在系统的学习过程中，再结合大型赛事中较难的题目进行讲解复现，进一步提升技能、拓展思路，实现由点到面的突破。。</p><p><a href="https://www.alipan.com/s/KXaeevtGrFf">https://www.alipan.com/s/KXaeevtGrFf</a></p></li><li><p>资源名称：高阶前端进阶必修，自主打造同比AntD的React组件库 - 带源码课件</p><p>资源简介：React18 开发仿 AntD 组件库，学习业内一流的组件库设计思路与落地实践。</p><p><a href="https://www.alipan.com/s/YhB6NAscikC">https://www.alipan.com/s/YhB6NAscikC</a></p></li><li><p>名称：让你页面速度飞起来 Web前端性能优化 - 带源码课件</p><p>描述：Vue-SSR+PWA 新技术，快速突破Web页面性能的瓶颈。</p><p>链接：<a href="https://www.alipan.com/s/s19NZUVXdev">https://www.alipan.com/s/s19NZUVXdev</a></p></li><li><p>名称：Three.js企业3D可视化实战项目WEBGL系统体系课程 - 带源码课件</p><p>描述：Three.js企业3D可视化实战项目WEBGL系统体系课程。</p><p>链接：<a href="https://www.alipan.com/s/nacE3c8UKBH">https://www.alipan.com/s/nacE3c8UKBH</a></p></li><li><p>名称：【黑马程序员】HTML&amp;JS+前端 V8.0 - 带源码课件</p><p>描述：随着智能设备不断深入人们的生活场景，跨端互联、虚实结合等新的应用场景步入应用阶段，AR、VR等科技的成熟也为前端开发技术的发展与未来提供了丰富的可能性，前端研发工程师岗位的需求量也迎来了爆发式增长。</p><p>链接：<a href="https://www.alipan.com/s/ZfeJhnCHWF2">https://www.alipan.com/s/ZfeJhnCHWF2</a></p></li><li><p>名称：【渡一教育】WEB前端大师课 - 带源码课件</p><p>描述：WEB前端大师课。</p><p>链接：<a href="https://www.alipan.com/s/JtTPbdjK6ny">https://www.alipan.com/s/JtTPbdjK6ny</a></p></li><li><p>名称：Vue+Go 开发企业级微服务网关项目</p><p>描述：本课程带你手把手设计并实现一个通用型前端+后端一体的微服务网关项目，同时利用Go语言本身的性能优势，打造网关的优越性能，提升自身硬实力，还能收获微服务网关项目作品，丰富个人简历。</p><p>链接：<a href="https://www.aliyundrive.com/s/DPfnCSEz3zv">https://www.aliyundrive.com/s/DPfnCSEz3zv</a></p></li><li><p>名称：Vue 实战商业级读书Web APP 全面提升技能</p><p>描述：运用Vue开发一个可商用、功能完备的Web阅读应用。在开发中，将各种知识点穿插应用，让你真实感受到一个明星产品开发的全过程。同时，项目提供一流的用户体验和交互水准，在实现功能之外带你探究各种优秀前端交互的设计和实现。</p><p>链接：<a href="https://www.aliyundrive.com/s/G8LZTqvssqa">https://www.aliyundrive.com/s/G8LZTqvssqa</a></p></li><li><p>名称：51CTO - 游戏化趣学Web前端</p><p>描述：通过丰富的案例，全方位掌握JavaScript语言，理解JavaScript程序设计理念及底层原理。。</p><p>链接：<a href="https://www.alipan.com/s/ViA2Zw2muYK">https://www.alipan.com/s/ViA2Zw2muYK</a></p></li><li><p>资源名称：【黑马程序员】HTML&amp;JS+前端 V7.6 - 带源码课件</p><p>资源简介：课程讲解由浅入深，整个课程以项目为依托，课程内容顺应市场发展需求，按照前端前沿、热门技术及真<br>实企业项目开发需求理念和核心定位设计课程，我们的目标就是为当下的互联网行业输送顶尖的前端开发人才。</p><p><a href="https://www.alipan.com/s/SWX6vHkeica">https://www.alipan.com/s/SWX6vHkeica</a></p></li><li><p>名称：Vuejs全家桶从入门到精通-大神精选</p><p>描述：本系列课程Vuejs全家桶从入门到精通。</p><p>链接：<a href="https://www.aliyundrive.com/s/7EENxgLCksF">https://www.aliyundrive.com/s/7EENxgLCksF</a></p></li><li><p>名称：体系课-Web前端架构师2021版</p><p>描述：掌握前端技术的同时，你还要学了解前端技术之外的技能。跳出前端这个思维，才能看到的更多。那么如果你想从一个前端资深人员进阶架构师，来看看下面的内容吧。</p><p>链接：<a href="https://www.aliyundrive.com/s/QTLupzgDi9M">https://www.aliyundrive.com/s/QTLupzgDi9M</a></p></li><li><p>VUE教程合集</p><p>Vue全家桶实战 从零独立开发企业级电商系统(免费升级Vue3.0)</p><p>文件大小： 共计 17 个文件，合计: 21.9GB</p><p>提取码： 57zr</p><p>资源链接： <a href="https://pan.baidu.com/s/1ZXxPh0t5ZPhl-jM25GNakg">https://pan.baidu.com/s/1ZXxPh0t5ZPhl-jM25GNakg</a></p></li><li><p>Vue全家桶实战 从零独立开发企业级电商系统(免费升级Vue3.0)</p><p>文件大小： 共计 17 个文件，合计: 21.9GB</p><p>提取码： 57zr</p><p>资源链接： <a href="https://pan.baidu.com/s/1ZXxPh0t5ZPhl-jM25GNakg">https://pan.baidu.com/s/1ZXxPh0t5ZPhl-jM25GNakg</a></p></li><li><p>Vue全家桶实战 从零独立开发企业级电商系统(免费升级Vue3.0)【本干货来自笑哥共享网<a href="http://www.xiaogegh.com】/">www.xiaogegh.com】</a></p><p>文件大小： 共计 17 个文件，合计: 21.9GB</p><p>提取码： 398w</p><p>资源链接： <a href="https://pan.baidu.com/s/1z-BU2f4c8VaoEuE7obrjXg">https://pan.baidu.com/s/1z-BU2f4c8VaoEuE7obrjXg</a></p></li><li><p>Vue全家桶实战 从零独立开发企业级电商系统(Vue3.0)</p><p>文件大小： 共计 332 个文件，合计: 11.8GB</p><p>提取码： fm7s</p><p>资源链接： <a href="https://pan.baidu.com/s/1gAQNIyATTcwsyFPkwQBJqg">https://pan.baidu.com/s/1gAQNIyATTcwsyFPkwQBJqg</a></p></li><li><p>Vue3.0全家桶 商场实战</p><p>文件大小： 共计 90 个文件，合计: 16.9GB</p><p>提取码： 624b</p><p>资源链接： <a href="https://pan.baidu.com/s/17fuV4klB5o_Lzhzh7PiRvA">https://pan.baidu.com/s/17fuV4klB5o_Lzhzh7PiRvA</a></p></li><li><p>名称：Vue3 + React18 + TS4入门到实战 系统学习3大热门技术</p><p>描述：专为初级前端人员设计，系统性学习三大技术。</p><p>链接：<a href="https://www.aliyundrive.com/s/64ji5XRwopN">https://www.aliyundrive.com/s/64ji5XRwopN</a></p></li><li><p>名称：Vue3 + React18 + TS4入门到实战 系统学习3大热门技术</p><p>描述：专为初级前端人员设计，系统性学习三大技术。</p><p>链接：<a href="https://www.aliyundrive.com/s/64ji5XRwopN">https://www.aliyundrive.com/s/64ji5XRwopN</a></p></li><li><p>名称：【开课吧】门徒计划算法班-Web方向</p><p>描述：“门徒计划”是开课吧针对学员定制的关于AI、Web、Java技术领域的算法精进计划，主讲老师为ACM亚洲区银牌得主李超，前IBM中国总部数据科学家高民权，前京东资深前端开发高少云，资深Java技术专家李振东，共4位技术行业专家，通过线上授课的方式讲解算法。</p><p>链接：<a href="https://www.aliyundrive.com/s/MwvLvBiXWjq">https://www.aliyundrive.com/s/MwvLvBiXWjq</a></p></li><li><p>名称：【大喵教育】微计算机专业 - 前端培训 07期</p><p>链接：<a href="https://www.aliyundrive.com/s/fCuPNs6GZxn">https://www.aliyundrive.com/s/fCuPNs6GZxn</a></p></li><li><p>名称：开课吧web前端高级工程师课程</p><p>描述：此课程的特点是全面覆盖当下开发各项技术栈前端；紧跟时代的潮流做前端的弄潮儿；以为课程驱动：Nodo实战-《后台管理系统》、React实战-《CNode》、移动端实战-《ReactHooks搭建移动端企业站》、Vue实战-《美食电商系统》；跨平台覆盖C端、移动端、后端、小程序统统搞定，名师亲自授课+高T大牛技术支持，总之是走向大前端的必然之选。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/8b10f2c2fbc4">https://pan.quark.cn/s/8b10f2c2fbc4</a></p></li><li><p>名称：【开课吧】Web前端高级工程师 第20期</p><p>描述：课程适合没有完整项目经验的前端从业者，计算机系前端编程自学者，想要系统完善自己技术栈的前端初学者。熟练使用HTML+CSS、掌握JAVASCRIP<br>基础API,如DOM、BOM、EVENT等技术的人也可以很好的掌握web前端高级工程师相关课程技术。</p><p>链接：<a href="https://www.aliyundrive.com/s/cHtUB949fqJ">https://www.aliyundrive.com/s/cHtUB949fqJ</a></p></li><li><p>名称：【博学谷】HTML&amp;JS+前端就业课 v6.5</p><p>描述：小程序+Vue3+React三大技术点，深入浅出带你透彻掌握前端技术。</p><p>链接：<a href="https://www.aliyundrive.com/s/o1rkRyYh5Pg">https://www.aliyundrive.com/s/o1rkRyYh5Pg</a></p></li><li><p>名称：Three.js企业3D可视化实战项目WEBGL系统体系课程</p><p>描述：Three.js企业3D可视化实战项目WEBGL系统体系课程。</p><p>链接：<a href="https://www.aliyundrive.com/s/nacE3c8UKBH">https://www.aliyundrive.com/s/nacE3c8UKBH</a></p></li><li><p>名称：深入Node.js技术栈</p><p>描述：深入学习nodeJS，掌握后端开发的底层逻辑和基础原理。</p><p>链接：<a href="https://www.aliyundrive.com/s/e331YUqEi27">https://www.aliyundrive.com/s/e331YUqEi27</a></p></li><li><p>名称：晋级TypeScript高手，成为抢手的前端开发人才</p><p>描述：TypeScript已经异常火爆，几乎每一家IT企业在招聘前端时，都要求熟练掌握TS。</p><p>链接：<a href="https://www.aliyundrive.com/s/7r7j7T9D4xK">https://www.aliyundrive.com/s/7r7j7T9D4xK</a></p></li></ul><h3 id="嵌入式"><a href="#嵌入式" class="headerlink" title="嵌入式"></a>嵌入式</h3><h4 id="嵌入式开发"><a href="#嵌入式开发" class="headerlink" title="嵌入式开发"></a>嵌入式开发</h4><ul><li><p>名称：嵌入式零基础到就业年班</p><p>描述：要学习嵌入式系统，需要具备C语言编程、数字电路、微控制器等基础知识。同时，还需要掌握嵌入式系统的基本原理、开发流程、驱动程序编写等技能。对于初学者，可以从一些基本的单片机入手，熟悉嵌入式系统的基本操作和编程方法，再逐渐深入到更复杂的嵌入式系统开发。</p><p>链接：<a href="https://www.alipan.com/s/wx4GhdUCH2J">https://www.alipan.com/s/wx4GhdUCH2J</a></p></li><li><p>名称：手把手教你学Linux系列课程之嵌入式Qt5开发 - 带源码课件</p><p>描述：该课程是正点原子手把手教你学Linux系列课程之嵌入式Qt5 C++开发，该课程配套开发板为正点原子I.MX6&#x2F;STM32MP157开发板。</p><p>链接：<a href="https://www.alipan.com/s/cCcfYdNECSy">https://www.alipan.com/s/cCcfYdNECSy</a></p></li></ul><h4 id="硬件开发"><a href="#硬件开发" class="headerlink" title="硬件开发"></a>硬件开发</h4><ul><li><p>名称：【黑马程序员】集成电路应用开发(含嵌入式) 小白入门课程 - 带源码课件</p><p>描述：集成电路应用开发(含嵌入式) 小白入门课程 - 带源码课件。</p><p>链接：<a href="https://www.alipan.com/s/kqtarvyx3PQ">https://www.alipan.com/s/kqtarvyx3PQ</a></p></li><li><p>名称：数字信号处理 - 西安电子科技大学</p><p>描述：本课程目标在于培养学生对数字信号处理系统化的概念，使学生正确理解其基本理论、基本原理和一般方法；为学习IT类课程奠定基础。本课程强调工程理念，重视提高学生的逻辑思维能力，使学生能够综合应用所学知识分析解决工程问题，促进自主性学习和创造性工作。</p><p>链接：<a href="https://www.alipan.com/s/4oWcjUfByR1">https://www.alipan.com/s/4oWcjUfByR1</a></p></li><li><p>资源名称：懒小木 - 半导体器件建模仿真与分析教程</p><p>资源简介：半导体器件的建模和分析是器件设计的核心环节，熟练掌握器件的建模与分析方法，能够帮助我们更好地开展器件设计和分析工作，提高设计效率，缩短研发周期。</p><p><a href="https://www.alipan.com/s/8ZYT3fD3ZKV">https://www.alipan.com/s/8ZYT3fD3ZKV</a></p></li><li><p>名称：模拟电子电路与技术基础 - 西安电子科技大学</p><p>描述：这是一门研究模拟信号的放大、产生、加工和处理的课程，以“放大”为核心，包括电子器件与电子电路两部分。我们将先介绍运放的基本运用，再介绍半导体知识和分立元件。教学中将突出基本概念与基本分析方法，<br>理论联系实际，注意应用背景，将知识点串成知识链，努力增强学生解决复杂工程问题的能力。</p><p>链接：<a href="https://www.alipan.com/s/X9UbVwr4Kju">https://www.alipan.com/s/X9UbVwr4Kju</a></p></li><li><p>名称：【原子哥】FPGA硬件设计那些事儿 - 带源码课件</p><p>描述：【原子哥】FPGA硬件设计那些事儿。</p><p>链接：<a href="https://www.alipan.com/s/y7r5yUt8Fqe">https://www.alipan.com/s/y7r5yUt8Fqe</a></p></li><li><p>资源名称：Trent-FPGA硬件设计那些事儿</p><p>资源简介：本课程涵盖FPGA硬件的基础概念和实践应用。学生将学习Verilog语言编程、数字电路设计原理、FPGA架构和开发工具的使用。通过项目实践，掌握FPGA设计流程和调试技巧，为硬件加速和嵌入式系统开发打下坚实基础。</p><p>链接：<a href="https://pan.quark.cn/s/12674c1f1257">https://pan.quark.cn/s/12674c1f1257</a></p></li><li><p>名称：【黑马程序员】集成电路应用开发(含嵌入式) 小白入门课程 - 带源码课件</p><p>描述：集成电路应用开发(含嵌入式) 小白入门课程 - 带源码课件。</p><p>链接：<a href="https://pan.quark.cn/s/fae1d24dded3">https://pan.quark.cn/s/fae1d24dded3</a></p></li></ul><h3 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><ul><li><p>名称：HTTP协议原理+实践Web开发工程师必学 - 带源码课件</p><p>描述：很多同学对于HTTP协议基本不了解，或者只了解其中狭小的一部分，导致很多同学无法快速成长，陷入重复coding的地狱。这次课程会从原理到实践，用完整的例子展示HTTP协议的各个环节，让这些同学突破困境，快速成长。</p><p>链接：<a href="https://www.alipan.com/s/uo2pBjc3Wh6">https://www.alipan.com/s/uo2pBjc3Wh6</a></p></li><li><p>名称：Git GitHub视频教程 - 带源码课件</p><p>描述：本套教程内容丰富、详实，囊括：Git安装过程、本地库基本操作、远程基本操作、基于分支的Gitflow工作流、跨团队协作的 Forking工作流、Eclipse中的Git版本控制以及Git对Eclipse特定文件忽略的配置方法。还通过展示Git内部版本管理机制，让你了解 到Git高效操作的底层逻辑。教程的最后完整演示了Gitlab服务器的搭建过程。</p><p>链接：<a href="https://pan.quark.cn/s/2f16de394814">https://pan.quark.cn/s/2f16de394814</a></p></li><li><p>名称：计算机网络通关 29 讲</p><p>描述：突破面试与技术难点，吃透计算机网络知识体系！</p><p>链接：<a href="https://www.alipan.com/s/pzLU5Fvy1cH">https://www.alipan.com/s/pzLU5Fvy1cH</a></p></li><li><p>名称：李述铜：项目实战：从0用10000+行代码实现TCP_IP协议栈 - 带源码课件</p><p>描述：从0行代码开始，一步步用10000+行代码实现一个TCP&#x2F;IP协议栈，该协议栈具备可移植、支持协议丰富等特点。</p><p>链接：<a href="https://www.alipan.com/s/Ygj24dhRqKr">https://www.alipan.com/s/Ygj24dhRqKr</a></p></li></ul><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><ul><li><p>资源名称：【龙果学院】Google Guava深入浅出 - 带源码课件</p><p>资源简介：在本套课程中我们将会全部涵盖以上七大模块内容，部分模块 我们还将深入源码进行剖析，不仅让您能够体会到Guava的强大，还能领略Guava源码的优美，和设计的巧妙。</p><p><a href="https://www.alipan.com/s/XPqpxxzdtZP">https://www.alipan.com/s/XPqpxxzdtZP</a></p></li><li><p>名称：一站式学习Redis 从入门到高可用分布式实践</p><p>描述：由阿里云Redis开发规范原作者为你深入讲解，课程包含Redis基础、使用经验、Java&#x2F;Python客户端示范、Redis使用规范，由浅入深讲解，并伴有大规模Redis的实战经验，是开发和运维人员系统学习Redis的必备内容。</p><p>链接：<a href="https://www.alipan.com/s/GYGGk554hGU">https://www.alipan.com/s/GYGGk554hGU</a></p></li></ul><h4 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h4><ul><li><p>名称：FFmpeg第一季：小白开窍+九阳神功 - 带源码课件</p><p>描述：【FFmpeg第一季：小白开窍+九阳神功】 共30个课程，从系列1到系列30.<br>该系列的课程涉及：FFmpeg,WebRTC,SRS,Nginx,Darwin,Live555,OpenCV等。 包括：音视频、流媒体、直播、Android、视频监控28181、等。</p><p>链接：<a href="https://www.alipan.com/s/JhyVvkRDaL6">https://www.alipan.com/s/JhyVvkRDaL6</a></p></li><li><p>名称：【码牛学院】FFmpeg直播WebRtc音视频会议视频编辑音视频 - 带源码课件</p><p>描述：本课程由浅入深学习FFmpeg音视频处理核心技术,助你成为音视频领域的开发高手.从FFmpeg基础到播放器核心功能开发,一课讲全音视频核心技术</p><p>链接：<a href="https://www.alipan.com/s/mDGM3qxxwSE">https://www.alipan.com/s/mDGM3qxxwSE</a></p></li><li><p>名称：C++音视频实战-FFmpeg基础到工程-多路H265监控录放开发</p><p>描述：课程通过概念分析、代码试验、项目实战的方式当你真正理解音视频。</p><p>链接：<a href="https://www.alipan.com/s/P7eiBdDTBcb">https://www.alipan.com/s/P7eiBdDTBcb</a></p></li></ul><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><ul><li><p>推荐看我的另一篇gitflow的博客。里面有几个比较推荐的教程。</p></li><li><p>名称：极客时间 - 玩转 Git 三剑客</p><p>描述：带你深入掌握 Git、GitHub 和 GitLab！</p><p>链接：<a href="https://pan.quark.cn/s/5d72653f8eb4">https://pan.quark.cn/s/5d72653f8eb4</a></p></li></ul><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><ul><li><p>名称：领域计划-DDD领域模型驱动设计-第一期</p><p>描述：随着微服务架构的出现，很好地实现了应用之间的解耦，解决了单体应用扩展性和弹性伸缩能力不足的问题。业务的复杂度逐渐升级的情况下，其好处自然不言而喻。<br>那微服务到底怎么拆分和设计才算合理，有没有好的方法来指导微服务和中台的设计呢？那就是领域驱动设计（DDD）。</p><p>链接：<a href="https://www.aliyundrive.com/s/x1DzArQRFoH">https://www.aliyundrive.com/s/x1DzArQRFoH</a></p></li><li><p>名称：架构实战营 - 带源码课件</p><p>描述：海量用户业务架构设计、高性能高可用中间件系统架构设计、亿级用户 IM 系统设计与演进。。</p><p>链接：<a href="https://www.alipan.com/s/zzv31MwMA2r">https://www.alipan.com/s/zzv31MwMA2r</a></p></li><li><p>名称：极客 - 架构师训练营 - 带源码课件</p><p>描述：以应用和面试为目标，课程设计紧密贴合架构师必备能力！。</p><p>链接：<a href="https://www.alipan.com/s/qwJojBM6CaF">https://www.alipan.com/s/qwJojBM6CaF</a></p></li><li><p>名称：极客时间 - 微服务架构核心 20 讲</p><p>描述：从理论到实践，理解微服务关键问题！</p><p>链接：<a href="https://pan.quark.cn/s/81da5925a5bf">https://pan.quark.cn/s/81da5925a5bf</a></p></li><li><p>名称：顶级架构师手把手操刀设计实战</p><p>描述：和源码是IT领域中非常重要的概念。设计模式是在软件开发过程中解决常见问题的可复用解决方案，而框架源码是软件框架的核心代码，负责提供框架的功能和特性。设计模式的使用可以帮助在软件开发中遵循最佳实践，提高代码质量和可维护性。常见的设计模式包括单例模式、工厂模式、观察者模式等等。了解设计模式的原理和应用场景，可以帮助开发人员更好地设计和实现代码。框架源码的研究可以帮助开发人员深入了解框架的实现原理和机制，从而更好地利用框架的功能和特性。同时，深入研究框架源码也有助于开发人员更好地定位和解决框架的问题。综上所述，了解设计模式和框架源码对于IT技术人员来说非常重要。它们可以帮助开发人员提高代码质量、提高开发效率，并更好地利用现有的软件框架。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/6625f3ff17aa">https://pan.quark.cn/s/6625f3ff17aa</a></p></li></ul><h4 id="监控工程"><a href="#监控工程" class="headerlink" title="监控工程"></a>监控工程</h4><ul><li><p>名称：拉勾 - 31 讲带你搞懂 SkyWalking</p><p>描述：从源码剖析到应用，一键通关 SkyWalking</p><p>链接：<a href="https://www.alipan.com/s/fT5oSBud8TV">https://www.alipan.com/s/fT5oSBud8TV</a></p></li></ul><h4 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h4><ul><li><p>名称：分布式高性能深度学习实战计划</p><p>描述：高性能实战计划是一门专注于深度学习技术在分布式环境下的应用和优化的课程。学员将学习到分布式系统的基本原理深度学习算法的并行化实现、分布式模型训练和推理技术等内容。课程融合理论和实践，适合希望在深度学习领域深入研究和应用的学员参与。无论是对于学术研究还是工程实践，这门课程都能提供实用的工具和技巧。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/f3b4ba19dd07">https://pan.quark.cn/s/f3b4ba19dd07</a></p></li><li><p>名称：打造私人分布式存储系统课程</p><p>描述：数据存取与安全是数据时代的基石，个人隐私现在愈发重要，拥有属于自己的高安全性迫在眉睫。本课程将带你从项目设计、实现、优化、压力与并发安全测试、部署上线全流程打造业务俱全的系统，并解决数据存储安全问题。助力你实现复杂业务与全栈技术双重提升，大大提升毕设通过率，求职面试通过率，升职加薪成功率。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/ad7272520cf0">https://pan.quark.cn/s/ad7272520cf0</a></p></li><li><p>名称：【龙果学院】Google Guava深入浅出 - 带源码课件</p><p>描述：在本套课程中我们将会全部涵盖以上七大模块内容，部分模块 我们还将深入源码进行剖析，不仅让您能够体会到Guava的强大，还能领略Guava源码的优美，和设计的巧妙。</p><p>链接：<a href="https://www.alipan.com/s/XPqpxxzdtZP">https://www.alipan.com/s/XPqpxxzdtZP</a></p></li></ul><h4 id="云原生系列"><a href="#云原生系列" class="headerlink" title="云原生系列"></a>云原生系列</h4><ul><li><p>名称：架构师必备Docker快速部署提升课程</p><p>描述：用容器化思维解决问题 新增Redis+Docker-应用实战 架构师必备Docker快速部署提升在这门课程中，学到了如何使用 Docker 和<br>Docker Compose来快速部署和管理应用程序。这门课程主要涵盖了以下几个方面：<br>学会了如何使用Docker来容器化应用程序，从而实现快速部署和管理。我学会了如何使用Docker Compose来管理多个容器的组合。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/77a9115cdff1">https://pan.quark.cn/s/77a9115cdff1</a></p></li><li><p>名称：慕课网-基于SpringCloud+Kubernetes ，微服务的容器化持续交付实战（完结）</p><p>描述：慕课网的“基于SpringCloud+Kubernetes，微服务的容器化持续交付实战”课程，专注于微服务与容器技术的实战应用。课程涵盖了Spring Cloud基础、微服务搭建、持续集成、测试与部署，以及Kubernetes容器化部署等核心内容。</p><p>链接：<a href="https://pan.quark.cn/s/88616ae0e5a3">https://pan.quark.cn/s/88616ae0e5a3</a></p></li><li><p>名称：Python DevOps运维开发实战集训营【中级班】04期 - 带源码课件</p><p>描述：Python DevOps运维开发实战集训营【中级班】04期</p><p>链接：<a href="https://pan.quark.cn/s/b3db23b4958c">https://pan.quark.cn/s/b3db23b4958c</a></p></li><li><p>名称：DevOps工具链实践训练营 - 03期</p><p>描述：本课程的核心是以CI&#x2F;CD为核心，逐步覆盖DevOps方方面面，打通DevOps工具链集成，最终实现研发效能的提升！</p><p>链接：<a href="https://www.alipan.com/s/Nkg72qs1b9u">https://www.alipan.com/s/Nkg72qs1b9u</a></p></li><li><p>名称：Kubernetes K8s CKS 认证实战班（安全专家） - 带源码课件</p><p>描述：李振良Kubernetes&#x2F;K8s CKS 认证实战班（安全专家）。</p><p>链接：<a href="https://www.alipan.com/s/CbhPdrLEFu1">https://www.alipan.com/s/CbhPdrLEFu1</a></p></li><li><p>名称：kubernetes k8s+DevOps云原生全栈技术实战课程 - 带源码课件</p><p>描述：带你由浅入深学习k8s、掌握世界1000强真实项目、让k8s可在企业落地实施。</p><p>链接：<a href="https://www.alipan.com/s/UJgjcwVwo8Y">https://www.alipan.com/s/UJgjcwVwo8Y</a></p></li><li><p>名称：云原生训练营</p><p>描述：基于云原生学习路径，提供“基础+理论+实践”的系统学习方案。</p><p>链接：<a href="https://www.aliyundrive.com/s/kLPHToz7WnF">https://www.aliyundrive.com/s/kLPHToz7WnF</a></p></li><li><p>名称：企业级高效微服务与容器云架构师</p><p>描述：微和云是当今互联网领域最热门的职业之一。微服务是一种基于小型、独立可拔插组件的软件架构，可以更快速、灵活地开发和部署应用程序。而容器云则是一种基于容器技术的云计算平台，可以更加高效地管理和运行微服务。因此，微服务和容器云架构师需要掌握多项技能，如Docker、Kubernetes等容器化技术，以及微服务设计、分布式架构等领域的知识。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/108485ec1b94">https://pan.quark.cn/s/108485ec1b94</a></p></li><li><p>名称：云原生KubeEdge打造边缘平台</p><p>描述：云+边缘计算项目-KubeEdge打造边缘管理，实战云边端一体化设计，迈向高阶人才kubernetes<br>CKA实战，BAT大厂基于K8s构建企业容器云平台云原生实战训练营K8s，挑战年薪50万云计算，微服务，容器架构师，全栈架构师，集群实战，部署落地，服务治理，服务网格，原理剖析，实战应用，云原生架构，CKA认证实战班，平台设计与开发等。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/f2447fa871a5">https://pan.quark.cn/s/f2447fa871a5</a></p></li><li><p>名称：极客时间 - Service Mesh 实战</p><p>描述：实战项目深度拆解，手把手带你学会 Istio！</p><p>链接：<a href="https://www.alipan.com/s/wJu9zjPPfna">https://www.alipan.com/s/wJu9zjPPfna</a></p></li><li><p>名称：云原生微服务架构集成实战课程</p><p>描述：全新微服务云架构高级，非常适合想要拔高以及快速增加大厂高级技术经验的同学们研习，课程将云原生及相关新技术进行抽丝剥茧，相信同学们学习完成后一定会有开云见雾的感觉。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/27ff252fc08f">https://pan.quark.cn/s/27ff252fc08f</a></p></li></ul><h4 id="运维工程师"><a href="#运维工程师" class="headerlink" title="运维工程师"></a>运维工程师</h4><ul><li><p>名称：全栈DevQA自动化测试高级工程师</p><p>描述：本课程是针对DevQA自动化领域的高级工程师设计的，通过系统学习测试理论、测试方法和工具技术，掌握全栈开发和质量保证的能力。培养学员成为在项目中能够独立设计、实施和维护自动化测试方案的专业人才。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/116a9f5ff7d9">https://pan.quark.cn/s/116a9f5ff7d9</a></p></li><li><p>名称：Linux高级运维云计算班 - 带源码课件</p><p>描述：Linux高级运维云计算班</p><p>链接：<a href="https://www.alipan.com/s/jfZxJtnixdF">https://www.alipan.com/s/jfZxJtnixdF</a></p></li><li><p>名称：快速上手Linux 玩转典型应用</p><p>描述：随着人工智能、大数据时代的到来，Linux的地位与日俱增！本门课程的讲师用通俗易懂的语言，以主流CentOS操作系统为例，系统讲解Linux知识点：Python\Java\PHP多语言运行环境配置、常用软件及应用部署、运维必备服务等实用技能，助你快速上手独立配置。</p><p>链接：<a href="https://www.alipan.com/s/MvhTH2XfGKM">https://www.alipan.com/s/MvhTH2XfGKM</a></p></li><li><p>名称：DevOps工具链实践训练营 - 03期</p><p>描述：本课程的核心是以CI&#x2F;CD为核心，逐步覆盖DevOps方方面面，打通DevOps工具链集成，最终实现研发效能的提升！</p><p>链接：<a href="https://www.alipan.com/s/Nkg72qs1b9u">https://www.alipan.com/s/Nkg72qs1b9u</a></p></li><li><p>名称：Go Golang DevOps运维开发实战集训营</p><p>描述：熟悉Go编程开发 生产环境真实案例，Get实战经验 熟悉DevOps自动化运维模式 熟悉Web应用的开发</p><p>链接：<a href="https://pan.quark.cn/s/cefd428669d6">https://pan.quark.cn/s/cefd428669d6</a></p></li><li><p>名称：快速上手Linux 玩转典型应用</p><p>描述：随着人工智能、大数据时代的到来，Linux的地位与日俱增！本门课程的讲师用通俗易懂的语言，以主流CentOS操作系统为例，系统讲解Linux知识点：Python\Java\PHP多语言运行环境配置、常用软件及应用部署、运维必备服务等实用技能，助你快速上手独立配置。</p><p>链接：<a href="https://www.alipan.com/s/MvhTH2XfGKM">https://www.alipan.com/s/MvhTH2XfGKM</a></p></li><li><p>名称：马哥Linux高端运维云计算就业班 - 带源码课件</p><p>描述：马哥Linux高端运维云计算就业班-随到随学。</p><p>链接：<a href="https://www.alipan.com/s/TVU8mxDMFpZ">https://www.alipan.com/s/TVU8mxDMFpZ</a></p></li><li><p>名称：Ubuntu快速上手 - 带源码课件</p><p>描述：教程以实际开发为驱动，采用大量具体案例和场景分析，帮助学习者理解吸收。内容设计删繁就简，注重实践，开发应用所需内容完整，拆分讲解，模块清晰。无论你是想体验Ubuntu<br>Linux，还是入门嵌入式开发，本套教程都可以助你快速上手！</p><p>链接：<a href="https://www.alipan.com/s/yAjVT5bAWsG">https://www.alipan.com/s/yAjVT5bAWsG</a></p></li><li><p>名称：【老男孩教育】Linux云计算运维 28期</p><p>描述： 老男孩linux运维28期教程，录制于2016年5月份，收录的比较全</p><p>链接：<a href="https://www.alipan.com/s/ffm9XwARzD5">https://www.alipan.com/s/ffm9XwARzD5</a></p></li><li><p>名称：kubernetes k8s+DevOps云原生全栈技术实战课程 - 带源码课件</p><p>描述：带你由浅入深学习k8s、掌握世界1000强真实项目、让k8s可在企业落地实施。</p><p>链接：<a href="https://www.alipan.com/s/UJgjcwVwo8Y">https://www.alipan.com/s/UJgjcwVwo8Y</a></p></li><li><p>名称：istio架构与k8s中的部署服务实战</p><p>描述：本课程将深入介绍Istio架构及其在Kubernetes中的部署和服务实战。学员将了解如何使用Istio来管理流量、提供服务发现、实现负载均衡，并掌握Istio的安全特性和监控能力。通过实践项目，学员将学会在Kubernetes集群中部署Istio，并使用其各种功能来优化和保护微服务应用程序。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/2acfaeaa84ee">https://pan.quark.cn/s/2acfaeaa84ee</a></p></li><li><p>名称：【大厂学苑】服务端监控 - 2021</p><p>描述：日志、监控系统实战。</p><p>链接：<a href="https://www.aliyundrive.com/s/Cyc3YayLNzU">https://www.aliyundrive.com/s/Cyc3YayLNzU</a></p></li><li><p>名称：华为首套Linux认证工程师课程</p><p>描述：HCIA-openEuler华为openEuler在线课程定位于培养和认证具备企业数据中心核心操作系统基础操作与管理能力的工程师。通过HCIA-OpenEuler<br>V1.0<br>认证，您将掌握openEuler操作系统基础命令，掌握openEuler用户管理、网络管理、权限管理，掌握shell基础知识；具备企业数据中心核心操作系统基础操作与管理能力；能够胜任Linux系统运维工程师等岗位。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/6912b4ffa002">https://pan.quark.cn/s/6912b4ffa002</a></p></li></ul><h4 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h4><ul><li><p>名称：区块链GoWeb - 带源码课件</p><p>描述：本套课程从GoWeb基础讲起，并配有实战案例，内容包含：Web简介、使用Go搭建服务器、使用Go对数据库进行增删改查、使用 Go处理请求和响应以及Go的模板引擎等。实战案例的功能模块包括：登录注册、图书的增删改查、分页、购物车、订单管理等。</p><p>链接：<a href="https://www.alipan.com/s/5gh5F4dd8ab">https://www.alipan.com/s/5gh5F4dd8ab</a></p></li></ul><h4 id="产品经理"><a href="#产品经理" class="headerlink" title="产品经理"></a>产品经理</h4><ul><li><p>名称：新互联网人必学-产品经理课</p><p>描述：产品能力正变得越来越重要，已经渗透到互联网各岗位中</p><p>链接：<a href="https://www.aliyundrive.com/s/HPsJBiRNvyV">https://www.aliyundrive.com/s/HPsJBiRNvyV</a></p></li><li><p>名称：静秋姐姐手把手教你做运营</p><p>描述：注册用户、活跃用户、交易额，运营核心到底是什么？做内容运营，除了编辑我们还能做什么？app靠谱推广渠道到底有哪些？业内首套BAT系运营视频课程为你一一解答。</p><p>链接：<a href="https://pan.quark.cn/s/43a52298dcde">https://pan.quark.cn/s/43a52298dcde</a></p></li><li><p>名称：产品经理电商系统实战，全面掌握前后端设计精髓</p><p>描述：全流程搭建企业级项目，晋级高阶产品经理</p><p>链接：<a href="https://www.aliyundrive.com/s/xXfv8eFzU58">https://www.aliyundrive.com/s/xXfv8eFzU58</a></p></li><li><p>名称：90天B端产品经理实战班</p><p>描述：90天B端产品经理实战班，成为产业互联网时代的抢手人才。</p><p>链接：<a href="https://www.aliyundrive.com/s/GCXSuxbvsK9">https://www.aliyundrive.com/s/GCXSuxbvsK9</a></p></li></ul><h4 id="大数据开发"><a href="#大数据开发" class="headerlink" title="大数据开发"></a>大数据开发</h4><ul><li><p>大数据开发高薪训练营 14期</p><p>描述：拉勾训练营 大数据开发高薪训练营 14期。</p><p>链接：<a href="https://www.aliyundrive.com/s/URxPSBrTSuB">https://www.aliyundrive.com/s/URxPSBrTSuB</a></p></li><li><p>名称：基于阿里云搭建数据仓库（离线）</p><p>描述：本项目教程以国内电商巨头实际业务应用场景为依托，同时以阿里云ECS服务器为技术支持，紧跟大数据主流场景，对接企业实际需求，对电商数仓的常见实战指标进行了详尽讲解，让你迅速成长，获取更前沿的技术经验。</p><p>链接：<a href="https://www.alipan.com/s/davC9WX33So">https://www.alipan.com/s/davC9WX33So</a></p></li><li><p>名称：大数据项目之电商数仓V1.2新版 - 带源码课件</p><p>描述：本套视频教程从搭建之初的框架选型、数据服务的整体策划，到随着数据的流向，数据的采集、存储和计算，循序渐进，庖丁解牛，一步步地展开，进行细致剖析。涉及大数据与数据仓库概论、项目需求描述、项目部署的环境准备、用户行为数据采集、业务数据采集模块、数据仓库搭建模块、数据可视化模块、即席查询模块、元数据管理模块等。</p><p>链接：<a href="https://pan.quark.cn/s/57a19d24f967">https://pan.quark.cn/s/57a19d24f967</a></p></li><li><p>名称：云计算与大数据零基础特训班</p><p>描述：本课将通过理论加实战的课程体系助你真正掌握实用技术。课程包含云计算介绍、hadoop知识体系、Storm生态体系等重点知识，并采用真实项目案例，让你在案例中理解技术概念，并学会如何使用这些技术。以实战带动学习，助你在更短的时间内掌握目前业界主流、前沿的云计算和大数据技术，为你开辟一条通往IT精英的通道。</p><p>链接：<a href="https://www.alipan.com/s/uxNG3ozyQxq">https://www.alipan.com/s/uxNG3ozyQxq</a></p></li><li><p>名称：2024最新版Spark视频教程 - 带源码课件</p><p>描述：本套教程基于Spark 3.3版本，使用Java语言，详解了Spark技术生态的三个核心模块：Spark<br>Core核心模块，讲解Spark运行环境，以及分布式数据模型RDD的使用和原理；Spark<br>SQL模块，讲解Spark在结构化数据场景中的使用方式，包括SQL语法、DSL语法、UDF函数、UDAF函数等；Spark<br>Streaming模块，讲解Spark在流式数据处理中的使用方式，包括无界数据流的处理、Kafka系统的对接和数据窗口的应用等。</p><p>链接：<a href="https://www.alipan.com/s/PUrk6mM2MjW">https://www.alipan.com/s/PUrk6mM2MjW</a></p></li><li><p>名称：拉勾教育 - 42讲轻松通关 Flink</p><p>描述：快速掌握大厂必备的大数据前沿技术。</p><p>链接：<a href="https://www.alipan.com/s/MWnQ1AkLXnf">https://www.alipan.com/s/MWnQ1AkLXnf</a></p></li><li><p>资源名称：轻松入门大数据 一站式完成核心能力构建 - 带源码课件</p><p>资源简介：十二年技术老兵，带你操盘企业级项目，打造数据思维。</p><p><a href="https://www.alipan.com/s/H8LJeRSU5hs">https://www.alipan.com/s/H8LJeRSU5hs</a></p></li><li><p>名称：【奈学科技】P6大数据研发工程师11期 - 带源码课件</p><p>描述：奈学教育独家高质量课程，通过深入讲解Hadoop、Spark与Flink<br>3大数据生态体系，我们不仅要讲得透、学得会，还要用得好；彻底掌握不同数据规模下的业界最前沿的优秀处理解决方案，带你解锁数据处理各种新姿势；紧跟目前主流OLAP生态下的ClickHouse、Kylin等，首次通过落地实操案例来深度揭秘与实战；最后2套大数据离线项目+<br>3 套大数据实时项目等，带你彻底攻下大数据开发。《大数据研发工程师》IT人成长与进阶的必修课，你值得拥有。。</p><p>链接：<a href="https://www.alipan.com/s/dywsvvFNqQe">https://www.alipan.com/s/dywsvvFNqQe</a></p></li><li><p>名称：【开课吧】数据分析高薪培养计划就业班035期</p><p>描述：数据分析高薪培养计划-就业班35期。</p><p>链接：<a href="https://www.alipan.com/s/UB83bcxkLsi">https://www.alipan.com/s/UB83bcxkLsi</a></p></li><li><p>资源名称：网易云 - 微专业 - 大数据开发工程师 - 带源码课件</p><p>资源简介：企业级数据仓库建设，PB级历史数据离线计算，毫秒级低延迟实时计算。</p><p><a href="https://www.alipan.com/s/fL7zjt8iSXg">https://www.alipan.com/s/fL7zjt8iSXg</a></p></li><li><p>名称：【尚硅谷】大数据技术之Greenplum</p><p>描述：Greenplum是基于开源PostgreSQL的分布式数据库，采用shared-nothing架构，即主机、操作系统、内存、存储都是每台服务器独立自我控制，不存在共享。<br>Greenplum本质上是一个关系型数据库集群，实际上是由多个独立的数据库服务组合而成的一个逻辑数据库。这种数据库集群采取的是MPP（Massively<br>Parallel Processing）架构，大规模并行处理。资源易和谐，有需要的速度保存。</p><p>链接：<a href="https://pan.quark.cn/s/191934f18d8d">https://pan.quark.cn/s/191934f18d8d</a></p></li><li><p>资源标题：【尚硅谷】2024最新版大数据技术之Kafka3.x</p><p>资源描述：本套教程基于Kafka<br>3.6.1版本设计，零基础入门，将理论、演示、源码融合在一起讲解，通过源码演示效果，通过效果印证理论，再通过理论梳理源码，让整个Kafka的技术架构，更加清晰地呈现在你的面前。教程采用简单直白的语言，以及图形化与操作相结合的形式，快速直观地讲解Kafka核心功能，降低软件本身的学习难度，缩减学习周期。你可以通过本套教程的学习，快速掌握Kafka核心组件的用法，理清核心数据的处理流程，并将Kafka应用于自己的项目中。资源易和谐，有需要的速度保存。</p><p>链接：<a href="https://pan.quark.cn/s/146bb2c2b88d">https://pan.quark.cn/s/146bb2c2b88d</a></p></li><li><p>名称：【尚硅谷】大数据项目之Flink实时数仓4.0</p><p>描述：本套项目教程以电商采集项目为前置基础，整体内容分为三大部分：实时数仓架构介绍、数仓模型搭建、Suger可视化大屏展示。教程通过精炼的业务体系逻辑，带你快速掌握实时数仓所使用的技术手段。使用到的框架包括：Hadoop、Kafka、Flume、Maxwell、Flink、HBase、Redis、Doris、Suger、StreamPark等。资源易和谐，有需要的速度保存。</p><p>链接：<a href="https://pan.quark.cn/s/ad4a3662505b">https://pan.quark.cn/s/ad4a3662505b</a></p></li><li><p>名称：拉勾 - 大数据开发高薪训练营 14期 - 带源码课件</p><p>描述：拉勾训练营 大数据开发高薪训练营 14期。</p><p>链接：<a href="https://www.alipan.com/s/URxPSBrTSuB">https://www.alipan.com/s/URxPSBrTSuB</a></p></li><li><p>名称：网易云 - 微专业 - 大数据开发工程师 - 带源码课件</p><p>描述：企业级数据仓库建设，PB级历史数据离线计算，毫秒级低延迟实时计算。</p><p>链接：<a href="https://pan.quark.cn/s/b4098d132a41">https://pan.quark.cn/s/b4098d132a41</a></p></li><li><p>名称：大数据Ai超级能量架构师实战</p><p>描述：分布式存储+数仓+系统架构+Kafka真正企业级开发和生产环境的大数据人工智能开发课程，很贴合实际并能够快速的增加项目和架构实践能力，帮助同学们迅速提升能力。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/acb4559b6e7f">https://pan.quark.cn/s/acb4559b6e7f</a></p></li><li><p>名称：【奈学科技】P8百万大数据架构师1期</p><p>描述：百万大数据架构师是奈学教育全网独家首创的P8级高端大数据架构设计与真实案例驱动的实践课程，由前58集团技术委员会主席孙玄联合快狗CTO&amp;到家集团技术VP沈剑打造。</p><p>链接：<a href="https://www.aliyundrive.com/s/VDJpPxqozDY">https://www.aliyundrive.com/s/VDJpPxqozDY</a></p></li><li><p>名称：Apache Pulsar万亿级调优课</p><p>描述：课程作为百万大数据架构师的锤炼课程，将为同学们进行技能拔高教学，通过和千亿万亿级别的数据实战，让你更懂海量数据级别的性能调优，掌控大数据世界的试金石。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/9b3a5f5b95c3">https://pan.quark.cn/s/9b3a5f5b95c3</a></p></li></ul><h4 id="网络工程"><a href="#网络工程" class="headerlink" title="网络工程"></a>网络工程</h4><ul><li><p>《Wireshark从入门到精通》抓包教程完结</p><p>下载：<a href="https://www.aliyundrive.com/s/nyB2UzppfvC">https://www.aliyundrive.com/s/nyB2UzppfvC</a></p></li><li><p>名称：华为HCNA HCIA网络工程师 自学视频[肖哥] - 带源码课件</p><p>描述：本课程涉及计算机网络基础知识、企业网常用技术介绍、华为路由器和交换机配置以及网络运维和系统集成常用知识，常用工具介绍、华为模拟器介绍、华为资料和手册。配置和维护中小型企业网络，构建和管理中小型企业网络。</p><p>链接：<a href="https://www.alipan.com/s/ttpboF2XUqo">https://www.alipan.com/s/ttpboF2XUqo</a></p></li><li><p>名称：Wireshark+Sniffer视频课程</p><p>描述：本课程全面介绍Wireshark和Sniffer的使用，覆盖从基础到进阶的全方位内容。包括Wireshark的安装、抓包原理、界面操作、数据包分析、过滤器设置等，以及Sniffer的嗅探原理和应用。通过实战案例，深入解析网络协议原理，帮助学员掌握网络故障排查和网络攻击分析技能。</p><p>链接：<a href="https://pan.quark.cn/s/dae269b9a268">https://pan.quark.cn/s/dae269b9a268</a></p></li><li><p>名称：H3CSE高级企业园区网业务部署</p><p>描述：H3C作为国内知名度极高的数字化服务解决方案提供商，是网络工程师及运维工程师在工作中都能够经常解除到的，所以学习基于H3C网络设备的企业园区网技术就显得尤为重要，所以同学们在学习网络技术的同时应该抽出时间多了解更多厂商的技术，能够更好的融会贯通。</p><p>链接：<a href="https://pan.quark.cn/s/624ad1cf47d6">https://pan.quark.cn/s/624ad1cf47d6</a></p></li><li><p>名称：实战华为全新企业园区网技术</p><p>描述：华为HCIA-Datacom是定位于数通基础通用知识和技能水平的工程师认证。通过HCIA-<br>Datacom认证，将证明您初步掌握路由交换原理、WLAN基本原理、网络安全、网络管理与运维基础知识、以及SDN与编程自动化基础知识的能力。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/5bccde3a7e65">https://pan.quark.cn/s/5bccde3a7e65</a></p></li><li><p>名称：华为HCNA HCIA网络工程师</p><p>描述：本课程旨在培养学员成为具备基础和高级技能的专业人士。涵盖网络基础知识、路由器与交换机配置、网络安全等内容，通过实际案例和模拟实验，让学员掌握华为网络工程师所需的核心技能与知识体系。</p><p>链接1：<a href="https://pan.quark.cn/s/cb76020c3995">https://pan.quark.cn/s/cb76020c3995</a></p><p>链接2：<a href="https://pan.quark.cn/s/dba3e5565828">https://pan.quark.cn/s/dba3e5565828</a></p></li><li><p>名称：华为认证无线局域网架构工程师</p><p>描述：该课程适用于华为认证HCIA-WLAN V3.0。本课程将介绍并演示WLAN的理论基础，安全与业务配置方案，故障排查方法及WLAN项目部署案例等知识。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/9aebece121fa">https://pan.quark.cn/s/9aebece121fa</a></p></li></ul><h4 id="网络安全工程师"><a href="#网络安全工程师" class="headerlink" title="网络安全工程师"></a>网络安全工程师</h4><ul><li><p>名称：全栈网络安全工程师精品班_陈鑫杰</p><p>描述：《全栈网络安全进阶班》是基于ATT&amp;CK红蓝对抗框架，面向中高级安全工程师推出的项目实战型班级。。</p><p>链接：<a href="https://www.aliyundrive.com/s/SRqvkD8nbEz">https://www.aliyundrive.com/s/SRqvkD8nbEz</a></p></li><li><p>名称：全栈网络安全工程师精品班_陈鑫杰 - 带源码课件</p><p>描述：《全栈网络安全进阶班》是基于ATT&amp;CK红蓝对抗框架，面向中高级安全工程师推出的项目实战型班级。。</p><p>链接：<a href="https://www.alipan.com/s/SRqvkD8nbEz">https://www.alipan.com/s/SRqvkD8nbEz</a></p></li><li><p>名称：安卓应用安全SO进阶培训班</p><p>描述：课程以确实地提高自身水平、直播里一步一步教你、重实战项目高频场景全总结、水平高技术强到违反广告法为目标，课程中讲到的知识点如plthook进阶、frida中javahook实现、inlinehook中可能遇到的bug、通过so装载流程准确定位脱壳点等都是能够解决大家实际工作中的问题的。</p><p>链接：<a href="https://www.alipan.com/s/aRAPoP2SMsK">https://www.alipan.com/s/aRAPoP2SMsK</a></p></li><li><p>名称：2023老男孩网络安全16期</p><p>描述：专注于Unity引擎下2.5D实时战略（RTS）游戏开发的实战课程。课程通过Unity实现2.5D游戏效果，涵盖地图创建、角色控制、战斗系统等多个关键模块。学员将学习如何构建和管理游戏场景，实现角色间的交互和战斗逻辑，提升Unity游戏开发能力。</p><p>链接：<a href="https://pan.quark.cn/s/5b1bbb2eb7b3">https://pan.quark.cn/s/5b1bbb2eb7b3</a></p></li><li><p>名称：VMProtect分析与还原 - 带源码课件</p><p>描述：《VMProtect分析与还原》虚拟代码、应用层终极代码保护</p><p>链接：<a href="https://pan.quark.cn/s/7ea66e1730d0">https://pan.quark.cn/s/7ea66e1730d0</a></p></li><li><p>资源名称：Kali安全渗透+Web白帽子高级工程师+黑客攻防 - 带源码课件</p><p>资源简介：本课程为Kali安全渗透+Web白帽子。</p><p>链接：<a href="https://www.alipan.com/s/k4EzHa4YjP9">https://www.alipan.com/s/k4EzHa4YjP9</a></p></li><li><p>资源名称：【长亭科技】计算机安全培训课程 - 2020</p><p>资源简介：长亭培训主要内容是网络安全、黑客攻防方面的技术培训，从Linux基础讲起！</p><p>链接：<a href="https://www.alipan.com/s/c9pKbAnwEmU">https://www.alipan.com/s/c9pKbAnwEmU</a></p></li><li><p>资源名称：掌控安全学院-web安全工程师高薪正式班</p><p>资源简介：掌控安全首创安全渗透工程师微专业课。</p><p>链接：<a href="https://www.alipan.com/s/4gCxwRchace">https://www.alipan.com/s/4gCxwRchace</a></p></li><li><p>资源名称：【易锦】安卓逆向基础 11期 - 带源码课件</p><p>资源简介：安卓逆向安全技术就是针对安卓手机应用做破解攻击，以达到测试与逆向调试、安全分析，应用保护的效果。</p><p>链接：<a href="https://www.alipan.com/s/F7UngLHM1Lg">https://www.alipan.com/s/F7UngLHM1Lg</a></p></li><li><p>资源名称：【易锦】WEB渗透安全工程师精英培养计划班第一期</p><p>资源简介：WEB渗透精英计划是易锦教育为提升教学质量与就业指标组织的一期直播计划，学习精英课程需要有渗透基础知识。</p><p>链接：<a href="https://www.alipan.com/s/nvwGmZmEh7X">https://www.alipan.com/s/nvwGmZmEh7X</a></p></li><li><p>资源名称：【安全牛】至尊技术会员免费课程合集 - 带源码课件</p><p>资源简介：在这个数字时代，网络安全已经成为我们日常生活中不可或缺的一部分。然而，随着网络攻击手段的不断升级，我们如何才能有效地保护自己的数据和隐私呢？不要担心，安全牛至尊会员课程来帮你解决这个问题！</p><p>链接：<a href="https://www.alipan.com/s/TrK4MDGctVy">https://www.alipan.com/s/TrK4MDGctVy</a></p></li><li><p>资源名称：【看雪论坛】Unicorn高级逆向与反混淆</p><p>资源简介：Unicorn高级逆向、反混淆、使用Unicorn跨平台调用Android的Native库，解决o-llvm路径分析问题。</p><p>链接：<a href="https://www.alipan.com/s/yFMEJtGERt9">https://www.alipan.com/s/yFMEJtGERt9</a></p></li><li><p>资源名称：PHP代码审计入门教程（SQL注入+XSS+CSRF+命令注入） - 带源码课件</p><p>资源简介：从PHP代码层面了解常见Web漏洞的形成原因及修补方法，并针对高职信息安全比赛进行试题分析。</p><p><a href="https://www.alipan.com/s/NZPuYrG4s4U">https://www.alipan.com/s/NZPuYrG4s4U</a></p></li><li><p>资源名称：【安全牛】CTF从入门到提升</p><p>资源简介：本课程涉及CTF中WEB、MISC、Crypto三个方向。从各种漏洞原理讲起，并配合实际例题。让大家在系统的学习过程中，再结合大型赛事中较难的题目进行讲解复现，进一步提升技能、拓展思路，实现由点到面的突破。。</p><p><a href="https://www.alipan.com/s/KXaeevtGrFf">https://www.alipan.com/s/KXaeevtGrFf</a></p></li><li><p>名称：【八方网域】网络安全大师课 - 2022 - 带源码课件</p><p>描述：想要从事网络安全行业，必然要先对行业建立一个整体的认知，了解网络安全对于国家和社会的作用，避免出现“一叶障目，不见森林”的情况。</p><p>链接：<a href="https://www.alipan.com/s/YtVGsLh1yxc">https://www.alipan.com/s/YtVGsLh1yxc</a></p></li><li><p>名称：安卓逆向开发11期</p><p>描述：由吾爱汇编论坛出品的安卓逆向开发11期</p><p>链接：<a href="https://www.alipan.com/s/qv3rWDSXDuP">https://www.alipan.com/s/qv3rWDSXDuP</a></p></li><li><p>名称：腾讯大牛亲授 Web前后端漏洞分析与防御技巧</p><p>描述：项目终于上线了，却面临安全威胁，你怕不怕？本课程以一个实战项目演示XSS、CSRF、点击劫持、SQL注入等主要安全问题和防御措施，打消你对项目安全的担忧，为自己开发的项目撑起一把保护伞。</p><p>链接：<a href="https://www.alipan.com/s/29bJDGxhY3p">https://www.alipan.com/s/29bJDGxhY3p</a></p></li><li><p>名称：Kali安全渗透+Web白帽子高级工程师+黑客攻防 - 带源码课件</p><p>描述：Kali安全渗透+Web白帽子高级工程师+黑客攻防。</p><p>链接：<a href="https://www.alipan.com/s/fvfFbKtwy7c">https://www.alipan.com/s/fvfFbKtwy7c</a></p></li><li><p>名称：【易锦】WEB渗透Hacker技术特训营（直播课第14期）</p><p>描述：课程涵盖了完整的渗透测试流程，从工具篇到信息收集、常见洞、漏洞挖掘利用复现以及内网的初探，同时还能自己独立搭建属于自己的靶场实验室;并且学完还能了解到各种灰色内幕SQ和BC诱导、诈P钓鱼的防范方法。</p><p>链接：<a href="https://www.alipan.com/s/Po5fiVggtBP">https://www.alipan.com/s/Po5fiVggtBP</a></p></li><li><p>名称：【路飞学城】爬虫开发+APP逆向超级大神班-03期 - 带源码课件</p><p>描述：基础知识、网站分析、网页解析、Python文件的读写、Python与数据库、AJAX技术、模拟登录、文本与数据分析、网站测试、Scrapy爬虫框架、，内容覆盖网络抓取与爬虫编程中的主要知识和技术。</p><p>链接：<a href="https://www.alipan.com/s/4WTJegCibJf">https://www.alipan.com/s/4WTJegCibJf</a></p></li><li><p>名称：Kali安全渗透+Web白帽子高级工程师+黑客攻防 - 带源码课件</p><p>描述：本课程为Kali安全渗透+Web白帽子。</p><p>链接：<a href="https://www.alipan.com/s/k4EzHa4YjP9">https://www.alipan.com/s/k4EzHa4YjP9</a></p></li><li><p>名称：【长亭科技】计算机安全培训课程 - 2020</p><p>描述：长亭培训主要内容是网络安全、黑客攻防方面的技术培训，从Linux基础讲起！</p><p>链接：<a href="https://www.alipan.com/s/c9pKbAnwEmU">https://www.alipan.com/s/c9pKbAnwEmU</a></p></li><li><p>名称：掌控安全学院-web安全工程师高薪正式班</p><p>描述：掌控安全首创安全渗透工程师微专业课。</p><p>链接：<a href="https://www.alipan.com/s/4gCxwRchace">https://www.alipan.com/s/4gCxwRchace</a></p></li><li><p>资源名称：守夜人Jaden - 2023网络安全攻防渗透大师课 - 带源码课件</p><p>资源简介：守夜人jaden-吴老板全力打造，适合小白的零基础入门教程分享。</p><p><a href="https://www.alipan.com/s/LWiHPZeeXUo">https://www.alipan.com/s/LWiHPZeeXUo</a></p></li><li><p>名称：【路飞学城】爬虫开发+APP逆向超级大神班-01期 - 带源码课件</p><p>描述：这是一套系统的培训教程，适合零基础小白进阶提升，同时也适合缺少实战经验的应届大学生学习。</p><p>链接：<a href="https://www.alipan.com/s/Hr8Jp4y1ETC">https://www.alipan.com/s/Hr8Jp4y1ETC</a></p></li><li><p>名称：【易锦】WEB渗透安全工程师精英培养计划班第一期</p><p>描述：WEB渗透精英计划是易锦教育为提升教学质量与就业指标组织的一期直播计划，学习精英课程需要有渗透基础知识。</p><p>链接：<a href="https://www.alipan.com/s/nvwGmZmEh7X">https://www.alipan.com/s/nvwGmZmEh7X</a></p></li><li><p>名称：【易锦】安卓逆向基础 11期 - 带源码课件</p><p>描述：安卓逆向安全技术就是针对安卓手机应用做破解攻击，以达到测试与逆向调试、安全分析，应用保护的效果。</p><p>链接：<a href="https://www.alipan.com/s/F7UngLHM1Lg">https://www.alipan.com/s/F7UngLHM1Lg</a></p></li><li><p>名称：【安全牛】至尊技术会员免费课程合集 - 带源码课件</p><p>描述：在这个数字时代，网络安全已经成为我们日常生活中不可或缺的一部分。然而，随着网络攻击手段的不断升级，我们如何才能有效地保护自己的数据和隐私呢？不要担心，安全牛至尊会员课程来帮你解决这个问题！</p><p>链接：<a href="https://www.alipan.com/s/TrK4MDGctVy">https://www.alipan.com/s/TrK4MDGctVy</a></p></li><li><p>名称：【看雪论坛】Unicorn高级逆向与反混淆</p><p>描述：Unicorn高级逆向、反混淆、使用Unicorn跨平台调用Android的Native库，解决o-llvm路径分析问题。</p><p>链接：<a href="https://www.alipan.com/s/yFMEJtGERt9">https://www.alipan.com/s/yFMEJtGERt9</a></p></li><li><p>名称：掌控安全学院-渗透利器进阶班 - 带源码课件</p><p>描述：渗透利器进阶班！kali&#x2F;代码审计&#x2F;网络安全&#x2F;web安全&#x2F;测试&#x2F;信息安全。。</p><p>链接：<a href="https://www.alipan.com/s/3TFNt9rMPX4">https://www.alipan.com/s/3TFNt9rMPX4</a></p></li><li><p>名称：掌控安全学院-渗透利器进阶班 04期 - 带源码课件</p><p>描述：渗透利器进阶班！kali&#x2F;代码审计&#x2F;网络安全&#x2F;web安全&#x2F;测试&#x2F;信息安全。</p><p>链接：<a href="https://www.alipan.com/s/xELBjzAQSQx">https://www.alipan.com/s/xELBjzAQSQx</a></p></li><li><p>名称：蚁景网络安全学院网络安全课程</p><p>描述：这可能是B站最好的网络安全课程，实战教学。</p><p>链接：<a href="https://www.aliyundrive.com/s/xc6bBtkrvY3">https://www.aliyundrive.com/s/xc6bBtkrvY3</a></p></li><li><p>名称：【尚硅谷】Java安全密码学详解</p><p>描述：通过本课程的学习，大家不仅能够理解密码学的基本概念，同时对于密码学中各种加密和解密方式的使用，以及各种实际应用场景，也会有更深入的认识。</p><p>链接：<a href="https://www.aliyundrive.com/s/RSqGuJenmmC">https://www.aliyundrive.com/s/RSqGuJenmmC</a></p></li><li><p>名称：PHP代码审计入门教程（SQL注入+XSS+CSRF+命令注入） - 带源码课件</p><p>描述：从PHP代码层面了解常见Web漏洞的形成原因及修补方法，并针对高职信息安全比赛进行试题分析。</p><p>链接：<a href="https://www.alipan.com/s/NZPuYrG4s4U">https://www.alipan.com/s/NZPuYrG4s4U</a></p></li><li><p>名称：守夜人Jaden - 2023网络安全攻防渗透大师课 - 带源码课件</p><p>描述：守夜人jaden-吴老板全力打造，适合小白的零基础入门教程分享。</p><p>链接：<a href="https://pan.quark.cn/s/b9fb36913564">https://pan.quark.cn/s/b9fb36913564</a></p></li><li><p>名称：安全软件生命周期SDLC课程</p><p>描述：生命周期（SDLC）课程旨在教授安全软件开发的方法和流程。涵盖需求分析、设计、编码、测试和部署等阶段，重点关注安全漏洞的预防和修复。培养学员的安全意识和技能，提供全面的安全软件开发知识。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/5ace36076860">https://pan.quark.cn/s/5ace36076860</a></p></li><li><p>名称：企业安全建设之安全运营</p><p>描述：建设之安全运营是一门专注于企业安全管理的课程。学习者将了解企业安全运营的重要性和原则，学习建立安全管理体系，掌握风险评估和应对策略，培养安全意识，以确保企业的信息和资产得到有效保护。课程内容丰富实用，涵盖各个方面的企业安全管理。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/b071ece2eb8d">https://pan.quark.cn/s/b071ece2eb8d</a></p></li><li><p>名称：【学神IT】Kali渗透高级工程师+Web白帽子工程师</p><p>描述：本课程为Kali安全渗透+Web白帽子。</p><p>链接：<a href="https://www.aliyundrive.com/s/k4EzHa4YjP9">https://www.aliyundrive.com/s/k4EzHa4YjP9</a></p></li><li><p>名称：零基础系统学习网络安全教程（从入门到精通）</p><p>描述：零基础系统学习网络安全教程（从入门到精通）是一个全面覆盖网络安全领域知识体系的教程，专为初学者量身打造。从网络安全的基本概念、原理讲起，逐步深入剖析各种攻击手段、防御策略和技术实践。教程内容详实丰富，既包含理论知识，又注重实战技能的培养，帮助学习者逐步构建起完整的安全防护体系。无论你是网络安全爱好者还是从业者，本教程都能为你提供系统、全面的学习指导，助你轻松掌握网络安全的核心知识和技能。</p><p>链接：<a href="https://pan.quark.cn/s/197a044c5420">https://pan.quark.cn/s/197a044c5420</a></p></li><li><p>名称：2023新课直播算法逆向解密课程</p><p>描述：林枫2023新课算法逆向解密，选品、建模、老号重启、控流、罗盘分析、小店随心推、正价平播等视频内容，让你了解2023如何直播。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/d5db42a2c2d0">https://pan.quark.cn/s/d5db42a2c2d0</a></p></li><li><p>名称：【安全牛】CTF从入门到提升</p><p>描述：本课程涉及CTF中WEB、MISC、Crypto三个方向。从各种漏洞原理讲起，并配合实际例题。让大家在系统的学习过程中，再结合大型赛事中较难的题目进行讲解复现，进一步提升技能、拓展思路，实现由点到面的突破。。</p><p>链接：<a href="https://www.alipan.com/s/u6zo8QEaXWq">https://www.alipan.com/s/u6zo8QEaXWq</a></p></li></ul><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><ul><li><p>名称：【尚硅谷】Linux教程（2024版） - 带源码课件</p><p>描述：这是一套真正适合程序员的Linux教程，以实际开发为驱动，解决方案式讲授，注重实操，通俗易懂，去繁就简，尽量避免了更多的原理介绍，减少了开发人员使用不到或极少使用的内容。同时，授之以鱼更授之以渔，讲解中注重学习方法和解决问题思路的传授，实用更实战，所学即所用。</p><p>链接：<a href="https://pan.quark.cn/s/6895eb20fa61">https://pan.quark.cn/s/6895eb20fa61</a></p></li><li><p>名称：零基础玩转Linux+Ubuntu实战视频课程</p><p>描述：让Linux初学者快速学习使用Linux、熟悉Ubuntu环境，熟练学习各种格式的软件的安装、卸载；学习Linux的常用命令、在Linux下创建一个软件项目的方法；熟悉Linux下Samba、SSH、NFS等常用网络服务的配置和使用。</p><p>链接：<a href="https://www.aliyundrive.com/s/dMx94LCSK4x">https://www.aliyundrive.com/s/dMx94LCSK4x</a></p></li><li><p>名称：Linux性能分析之CPU实战</p><p>描述：本课程专注于教授学员如何利用各种工具和技术来分析系统中的CPU性能问题。通过实际操作和案例研究，学员将深入了解CPU性能优化和故障排除，提升其在Linux环境下的技能水平。</p><p>链接：<a href="https://pan.quark.cn/s/6cf38a9cc957">https://pan.quark.cn/s/6cf38a9cc957</a></p></li><li><p>名称：手把手教你学习Centos Linux</p><p>描述：这门课程由一位经验丰富的讲师手把手教你学习CentOS<br>操作系统。通过系统化的教学，你将学会CentOS的安装、配置和管理技巧，掌握命令行操作以及常见应用的部署与优化。无论你是初学者还是有一定Linux基础的人，都能从中受益，提高在Linux环境下的工作效率和技术能力。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/84faafbc6a28">https://pan.quark.cn/s/84faafbc6a28</a></p></li><li><p>名称：Ubuntu Linux的高级系统运维进阶</p><p>描述：这门课程主要基于 Ubuntu Server<br>操作系统知识为基础，延伸至互联网应用、架构管理、云计算以及新的数据管理技术等各方面。对于初学系统运维的工程师来讲，首先要认真完成第一部分的学习，完全熟悉并精通Ubuntu<br>Server操作系统原理以及运维操作，然后才能延伸学习架构以及后续的云计算及数据管理的知识，最终才能掌握并提升为系统运维管理的综合技能，才能应对当前互联网迅猛发展的IT环境的运维管理。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/c5c9e607fd14">https://pan.quark.cn/s/c5c9e607fd14</a></p></li><li><p>名称：Linux内核源码深度解析开发实战</p><p>描述：《深度解析开发实战》是一门深入剖析Linux内核源码并进行实际开发的课程。学员将了解Linux内核的基本结构、关键技术和调试方法，掌握如何编写内核模块、驱动程序等实际项目。通过本课程，学员能够深入理解Linux操作系统的工作原理，并具备在Linux内核层面进行开发的能力。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/ceaaed738091">https://pan.quark.cn/s/ceaaed738091</a></p></li></ul><h4 id="DBA"><a href="#DBA" class="headerlink" title="DBA"></a>DBA</h4><ul><li><p>名称：LAMP兄弟连 - MySQL特级课视频教程</p><p>描述：如何从一个构架上的角度去分析网站的运营，如何去解决一些突发的事件，如何去防止网站因为访问量过大而出现崩溃，如果你对这些都有疑问，那么《兄弟连大型网站架构之MySQL视频教程》很适合你，一起来解开这些疑问吧！！！</p><p>链接：<a href="https://pan.quark.cn/s/a53a9472c280">https://pan.quark.cn/s/a53a9472c280</a></p></li><li><p>名称：知数堂mysql实战班+核心优化18期</p><p>描述：知数堂MySQL实战班+核心优化18期课程，涵盖MySQL数据库从基础到高级优化的全方位内容。实战班注重DBA基础提升，包括备份恢复、复制管理、高可用架构等实战操作；优化班则系统学习MySQL优化原理和实战技巧，通过解析MySQL锁、故障集锦等视频，深入了解MySQL内部机制。</p><p>链接：<a href="https://pan.quark.cn/s/e70f767c537f">https://pan.quark.cn/s/e70f767c537f</a></p></li><li><p>名称：高性能可扩展MySQL数据库设计及架构优化 电商项目</p><p>描述：十多年一线电商企业数据库架构师，以电商项目为例，从基础设计入手一步步教你如何设计高性能可扩展的千万级数据库架构，并针对高负载和高并发问题，给出多种解决方案。</p><p>链接：<a href="https://www.alipan.com/s/2dnEJN25U6Q">https://www.alipan.com/s/2dnEJN25U6Q</a></p></li><li><p>名称：MySQL提升课程 全面讲解MySQL架构设计 - 带源码课件</p><p>描述：如何获得MySQL最优性能？如何建立MySQL高可用集群？如何搭建稳定高效的MySQL环境？国内顶级电商公司数据库专家带你成为一名优秀的DBA。</p><p>链接：<a href="https://www.alipan.com/s/Ec3whojaoFv">https://www.alipan.com/s/Ec3whojaoFv</a></p></li><li><p>资源名称：LAMP兄弟连 - MySQL特级课视频教程</p><p>资源简介：如何从一个构架上的角度去分析网站的运营，如何去解决一些突发的事件，如何去防止网站因为访问量过大而出现崩溃，如果你对这些都有疑问，那么《兄弟连大型网站架构之MySQL视频教程》很适合你，一起来解开这些疑问吧！！！</p><p><a href="https://www.alipan.com/s/oh8vuQGXa2y">https://www.alipan.com/s/oh8vuQGXa2y</a></p></li><li><p>资源名称：【黑马程序员】全面深入Mysql数据库优化_java进阶教程</p><p>资源简介：本课程作为MySQL高级课程, 主要讲解了MySQL中的视图&#x2F;存储过程&#x2F;触发器&#x2F;索引等对象的使用、常见的SQL语句优化的技巧<br>、应用优化、数据库优化、数据库日志等方面的知识，并通过综合案例，对课程中的知识进行一个整合应用。</p><p><a href="https://www.alipan.com/s/BLAHJtJQdYY">https://www.alipan.com/s/BLAHJtJQdYY</a></p></li></ul><h4 id="搜索中间件"><a href="#搜索中间件" class="headerlink" title="搜索中间件"></a>搜索中间件</h4><ul><li><p>名称：【咕泡学院】P6ElasticStack高级开发与架构（实战班）- 2期</p><p>描述：P6ElasticStack高级开发与架构（实战班） - 2期</p><p>链接：<a href="https://www.aliyundrive.com/s/hP4KneYdKVt">https://www.aliyundrive.com/s/hP4KneYdKVt</a></p></li><li><p>名称：BAT大牛亲授 基于ElasticSearch的搜房网实战</p><p>描述：使用ElasticSearch开发企业级房屋信息搜索网站，将技术特性与业务功能完美结合。</p><p>链接：<a href="https://www.alipan.com/s/vYyxfGSRQqK">https://www.alipan.com/s/vYyxfGSRQqK</a></p></li></ul><h4 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h4><ul><li><p>名称：RabbitMQ - 2024 - 带源码课件</p><p>描述：本套教程基于RabbitMQ 3.13.x讲解，分为基础篇、进阶篇、集群篇，从消息队列概念入手，既包括RabbitMQ工作模式、消息可靠性投递、死信队列、延迟队列等基础内容，又包括RabbitMQ官方推出的Quorum仲裁队列、Stream流式队列、事务消息、优先级队列等新特性。集群篇详细展示了从安装Erlang环境、安装RabbitMQ到搭建集群、配置负载均衡的全过程，并完整讲解了Federation机制和Shovel功能的使用方法。</p><p>链接：<a href="https://pan.quark.cn/s/62dbc36d255d">https://pan.quark.cn/s/62dbc36d255d</a></p></li></ul><h4 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h4><ul><li><p>名称：【博学谷】从Dokcer到爬虫技术架构+Python爬虫京东项目</p><p>描述：这是一套特别强悍的Docker+Python爬虫实战课程，课程共有10个章节进行全面详细的教学。相比较往常比较常见的Python爬虫课程，本课程在技术中更加融入了Docker理论和实践，课程通过对整个爬虫技术架构及实战和理论的提升，将整体技术含量提高了多个水平，特别适合从事相关开发工作的同学们进行学习研究。</p><p>链接：<a href="https://www.aliyundrive.com/s/MfK3CNY6hCv">https://www.aliyundrive.com/s/MfK3CNY6hCv</a></p></li><li><p>名称：Python分布式爬虫与逆向进阶实战</p><p>描述：本课程从 0 到 1 构建完整的知识体系，精选 20 + 案例，可接单级项目，应用热门爬虫框架 Scrapy、Selenium、多种验证码识别技术，JS<br>逆向破解层层突破反爬，带你从容抓取主流网站数据，掌握爬虫工程师硬核技能。 建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/b1813171bc4b">https://pan.quark.cn/s/b1813171bc4b</a></p></li></ul><h4 id="数据科学"><a href="#数据科学" class="headerlink" title="数据科学"></a>数据科学</h4><ul><li><p>名称：ISC数据科学安全分析应用与实践</p><p>描述：随着技术发展，也成为越来越热的话题，传统的基于特征识别的技术日益显示出其局限性。我们为此探索出一套基于的方法，将分析，机器学习等数据科学技术与安全领域结合，碰撞出新的火花。本课程从安全数据采集，预处理，存储，分析，可视化，机器学习等方面系统介绍如何用数据驱动安全业务，从数据角度去发现安全风险以及问题。课程会提供仿真环境，实践安全数据如何快速采集存储，可视化展示系统的设计与快速搭建，可视化分析组件的使用与掌握，机器学习基础与入门，安全领域的数据分析，机器学习在安全中的应用等小的实例。通过此门课程让学员系统的将数据科学领域的方法在安全领域中应用，工作中数据科学成为有力的工具。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/8a3c8f46e643">https://pan.quark.cn/s/8a3c8f46e643</a></p></li><li><p>名称：系统化学习直通车精准投放课</p><p>描述：系统化学习直通车投放课，针对数字营销领域，涵盖精准广告投放策略、数据分析与优化等内容。课程通过案例分析和实操指导，帮助学员掌握精准投放的关键技能，提升数字营销效果。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/c8e128524baa">https://pan.quark.cn/s/c8e128524baa</a></p></li><li><p>名称：Python数据处理实战：基于真实场景的数据 - 带源码课件</p><p>描述：Python数据处理实战，以真实的场景数据为案例，包括征信，电商，零售数据等。掌握好数据处理，有利于今后从事或者转行数据分析或者数据挖掘以及解决工作和项目中遇到的各种数据处理问题。。</p><p>链接：<a href="https://www.alipan.com/s/2upN6YG5hCb">https://www.alipan.com/s/2upN6YG5hCb</a></p></li><li><p>名称：算法学习直通套餐 - 带源码课件</p><p>描述：Python数据处理实战，以真实的场景数据为案例，包括征信，电商，零售数据等。掌握好数据处理，有利于今后从事或者转行数据分析或者数据挖掘以及解决工作和项目中遇到的各种数据处理问题。。</p><p>链接：<a href="https://www.alipan.com/s/BuyozjRem7h">https://www.alipan.com/s/BuyozjRem7h</a></p></li><li><p>名称：【奈学科技】P7数据分析架构师1期</p><p>描述：课程由现任竞技世界首席数据科学家， 中国计算机学会技术前线委员会数据科学研讨会主席，奈学教育数据首席内容官巴川老师领衔，携手多为10年+数据分析专家共同打造。</p><p>链接：<a href="https://www.alipan.com/s/sxnnBiPRS3C">https://www.alipan.com/s/sxnnBiPRS3C</a></p></li><li><p>资源名称：【开课吧】数据分析高薪培养计划就业班035期</p><p>资源简介：数据分析高薪培养计划-就业班35期。</p><p>链接：<a href="https://www.alipan.com/s/UB83bcxkLsi">https://www.alipan.com/s/UB83bcxkLsi</a></p></li><li><p>名称：微专业 - 数据挖掘分析之Python篇 - 带源码课件</p><p>描述：从零开始学 Python，15 个实战项目，网易+硅谷真实案例，4 个月助你成为行业急需的数据人才。</p><p>链接：<a href="https://www.alipan.com/s/uq7HvsVuas8">https://www.alipan.com/s/uq7HvsVuas8</a></p></li><li><p>名称：【贪心科技】京东数据分析训练营</p><p>描述：京东商业数据分析师训练营。</p><p>链接：<a href="https://pan.quark.cn/s/1107f2b6f0c7">https://pan.quark.cn/s/1107f2b6f0c7</a></p></li><li><p>名称：【贪心科技】京东数据分析训练营</p><p>描述：京东商业数据分析师训练营。。。</p><p>链接：<a href="https://www.alipan.com/s/j9p6B58q8jc">https://www.alipan.com/s/j9p6B58q8jc</a></p></li><li><p>名称：CPBA商业分析师能力证书班</p><p>描述：商业分析就是通过清晰定义和拆解问题，在明确的目标下，使用案头研究、访谈等各种调研方法。</p><p>通过定性分析、定量模型判断，解决行业发展、公司经营、岗位价值等商业场景相关问题的能力。无论你是咨询、金融工作，还是在互联网、快消等行业工作，他们工作中遇到的大量问题，无一例外，都与商业分析能力缺失有关。</p><p>链接：<a href="https://pan.quark.cn/s/5a376edf3265">https://pan.quark.cn/s/5a376edf3265</a></p></li><li><p>名称：CPBA商业分析师能力证书班</p><p>描述：商业分析就是通过清晰定义和拆解问题，在明确的目标下，使用案头研究、访谈等各种调研方法，通过定性分析、定量模型判断，解决行业发展、公司经营、岗位价值等商业场景相关问题的能力。无论你是咨询、金融工作，还是在互联网、快消等行业工作，他们工作中遇到的大量问题，无一例外，都与商业分析能力缺失有关。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/12839109dbc7">https://pan.quark.cn/s/12839109dbc7</a></p></li><li><p>名称：构建数据分析工程师能力模型</p><p>描述：能力模型，实战八大企业级项目，本课重点剖析了构建数据分析思维，基于真实企业场景，系统讲解了数据工程师核心技术，带你构建数据工程师通用能力模型，深度讲解数据分析算法应用，并基于真实企业项目实战，强化数据分析技能，在实战中快速提升企业级项目经验。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/541794b70881">https://pan.quark.cn/s/541794b70881</a></p></li><li><p>名称：10周成为数据分析师</p><p>描述：10周成为数据分析师。</p><p>链接：<a href="https://www.aliyundrive.com/s/tbVRLsNDTLo">https://www.aliyundrive.com/s/tbVRLsNDTLo</a></p></li></ul><h4 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h4><ul><li><p>名称：Java项目之尚庭公寓 - 带源码课件</p><p>描述：项目分为用户端和后台管理系统，用户端包含了找房、看房预约、租约管理等功能，后台管理系统包含了公寓（房源）管理、租赁管理、用户管理等功能。项目覆盖完整的开发流程，逻辑清晰，设计精妙，带你从零开始，从设计（数据库设计、接口设计）到开发，再到部署，环环相扣，层层递进！对于后端技术的初学者，这套教程尤其适合你，作为学完基础的第一个实战项目。项目聚焦于后端开发，全部采用主流的技术框架：Spring、SpringMVC、SpringBoot、Mybatis、Mybatis Plus、MySQL、Redis、Minio等。学习本套项目，需要具备的前置知识：SSM、Spring Boot、MySQL，其它技术均会在教程中简明扼要地进行讲解。</p><p>链接：<a href="https://pan.quark.cn/s/63e9715aadb5">https://pan.quark.cn/s/63e9715aadb5</a></p></li></ul><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><h4 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h4><ul><li><p>名称：深度讲解Kotlin特性与框架设计</p><p>描述：本课程深入探讨Kotlin语言的核心特性及其在框架设计中的应用。通过案例分析和实际操作，学员将学会如何利用Kotlin的强大功能构建高效框架，并掌握最佳实践。快来加入我们，探索Kotlin编程的无限可能！建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/18ff7ef6dc38">https://pan.quark.cn/s/18ff7ef6dc38</a></p></li></ul><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><ul><li><p>名称：PHP工程师就业班-2019 - 带源码课件</p><p>描述：这是一门集合多位BAT资深PHP工程师十几年工作经验的课程。以最新版PHP7构建你的PHP知识体系。</p><p>链接：<a href="https://www.alipan.com/s/PGkefVTPDc8">https://www.alipan.com/s/PGkefVTPDc8</a></p></li><li><p>名称：PHP秒杀系统 高并发高性能的极致挑战</p><p>描述：从万次到亿万次的性能优化，从单机到分布式的架构升级。</p><p>链接：<a href="https://www.alipan.com/s/g9oPfiJJ654">https://www.alipan.com/s/g9oPfiJJ654</a></p></li><li><p>名称：PHP开发高可用高安全App后端</p><p>描述：本课程根据新闻类App业务逻辑，采用主流的RESTful<br>接口方式，带你在真实的项目实战中，开发一套完整的、安全的、高效的App后台系统，并带你学会API数据传输安全、第三方消息推送，前后台联调，App<br>复杂登录等多种实用技术。</p><p>链接：<a href="https://www.alipan.com/s/bno3mUQjymL">https://www.alipan.com/s/bno3mUQjymL</a></p></li><li><p>名称：前端到后台ThinkPHP开发整站</p><p>描述：前端到后台ThinkPHP开发整站。</p><p>链接：<a href="https://www.alipan.com/s/hbbKvJXd5gn">https://www.alipan.com/s/hbbKvJXd5gn</a></p></li><li><p>名称：360大牛带你横扫PHP职场 全面解读PHP面试</p><p>描述：全面剖析PHP面试考点及考官考察思路，帮助准备参加面试的学员系统复习面试考点，总结面试重难点，理解解题技巧和方法，以不变应万变解决所有考点内容，面试时从容不迫。</p><p>链接：<a href="https://www.alipan.com/s/SfLkbCnJHtF">https://www.alipan.com/s/SfLkbCnJHtF</a></p></li></ul><h4 id="Cpp"><a href="#Cpp" class="headerlink" title="Cpp"></a>Cpp</h4><ul><li><p>名称：C语言系统化精讲 重塑编程思想 打造坚实的开发基础 - 带源码课件</p><p>描述：如果通向大牛的道路有捷径，那就是先学好C语言。</p><p>链接：<a href="https://www.alipan.com/s/ufeYonrQaKP">https://www.alipan.com/s/ufeYonrQaKP</a></p></li><li><p>名称：C++ 设计模式理论与实战大全 - 带源码课件</p><p>描述：1.理解23种设计模式的结构，并能熟练使用C++代码描述设计模式的表现形式。2.从工程开发角度角度深入讲解设计模式的使用场景。3.通过案例讲解建立起使用设计模式完成面向对象的设计概念，为工程应用打下基础。。</p><p>链接：<a href="https://www.alipan.com/s/XJvy2JhFpPD">https://www.alipan.com/s/XJvy2JhFpPD</a></p></li><li><p>名称：C++微服务架构及安全云盘项目实训 - 带源码课件</p><p>描述：从实践中理解软件工程，学习需求分析、架构设计、详细设计文档的编写，学习编程规范，了解多人协作开发策略，理解并引用软件的版本管理，熟悉git工具和软件发布管理流程， bug管理提交问题。</p><p>链接：<a href="https://www.alipan.com/s/WTSFU5iLonW">https://www.alipan.com/s/WTSFU5iLonW</a></p></li><li><p>名称：C++ 百万并发网络通信引擎架构与实现 - 带源码课件</p><p>描述：从基础的网络知识开始由浅入深地讲解如何使用C++实现一套支持百万级别并发的网络通信引擎。包含：高频并发、多线程、多进程、线程池、内存池、软件硬件瓶颈、如何测试优化网络处理能力等技术知识。可以应用在Windows、Linux、Android、IOS系统上。对从事高性能网络处理的前后端开发人员有极大帮助。</p><p>链接：<a href="https://www.alipan.com/s/TiCfWYCw1sW">https://www.alipan.com/s/TiCfWYCw1sW</a></p></li><li><p>名称：【王道计算机教育】C++长期班43th - 2022</p><p>描述：历史悠久，地位稳固，市场需求量一直居高不下。尤其是贴近底层、贴近硬件或者性能要求严格的程序，往往只能用C&#x2F;C++系语言才写好。。</p><p>链接：<a href="https://www.aliyundrive.com/s/pCiGjjCbizh">https://www.aliyundrive.com/s/pCiGjjCbizh</a></p></li><li><p>名称：C&#x2F;C++从0到1系统精讲项目开发综合基础课</p><p>描述：C&#x2F;C++语法、 Linux系统、网络编程、数据结构全覆盖。</p><p>链接：<a href="https://www.aliyundrive.com/s/fJvGdWKeVux">https://www.aliyundrive.com/s/fJvGdWKeVux</a></p></li><li><p>名称：算法与数据结构（C++版） 面试评级的算法复习技能包</p><p>描述：口碑人气双高的bobo老师算法课，让算法变得简单好学，真实好评看的到！</p><p>链接：<a href="https://www.alipan.com/s/cT6wfdPm6d5">https://www.alipan.com/s/cT6wfdPm6d5</a></p></li></ul><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><ul><li><p>资源名称：【尚硅谷】SpringCloud2024 - 带源码课件</p><p>资源简介：学习本套教程，可以掌握构建分布式系统所需的知识和技能，熟悉新版的SpringCloud组件，理解微服务架构的优势和实践方法，从而能够更好地应对复杂软件开发的挑战。</p><p>链接：<a href="https://www.alipan.com/s/3w1DU5zvKP6">https://www.alipan.com/s/3w1DU5zvKP6</a></p></li><li><p>名称：2024黑马AI+java若依框架专题课</p><p>描述：本课程专注于AI技术与Java若依框架的结合应用。若依框架以其基于Spring Boot的简洁、快速、易用特性，结合强大的ORM和快速开发组件，为开发者提供高效解决方案。课程将涵盖若依框架的模块化设计、权限管理、代码生成器等功能，并深入探索与AI技术的融合，助力学员掌握现代软件开发的前沿技术。</p><p>链接：<a href="https://pan.quark.cn/s/e3684010281f">https://pan.quark.cn/s/e3684010281f</a></p></li><li><p>名称：2024年4月版本Java全端工程师线下就业班 - 带源码课件</p><p>描述：Java的开发前景依然广阔。随着5G技术的发展和物联网产业的迅速增长，大数据、云计算和人工智能等领域也在蓬勃发展。Java以其强大的功能、易于使用和稳定安全的特性在这些领域中扮演重要角色。作为全场景开发语言的代表之一，Java在不同的开发角色中承担着重要的作用，如Web开发、大数据开发和Android开发等。</p><p>链接：<a href="https://www.alipan.com/s/FdyprRG1fHT">https://www.alipan.com/s/FdyprRG1fHT</a></p></li><li><p>名称：2024年4月版本Java全端工程师线下就业班 - 带源码课件</p><p>描述：Java的开发前景依然广阔。随着5G技术的发展和物联网产业的迅速增长，大数据、云计算和人工智能等领域也在蓬勃发展。Java以其强大的功能、易于使用和稳定安全的特性在这些领域中扮演重要角色。作为全场景开发语言的代表之一，Java在不同的开发角色中承担着重要的作用，如Web开发、大数据开发和Android开发等。</p><p>链接：<a href="https://www.alipan.com/s/FdyprRG1fHT">https://www.alipan.com/s/FdyprRG1fHT</a></p></li><li><p>名称：技术风口 Spring Al+ChatGPT Java接入AI大模型 - 带源码课件</p><p>描述：通过动力节点的Spring AI与人工智能大模型课程，你将学会从零开始接入AI大模型到熟练运用。本套课程的内容非常详细并且易于理解，每个知识点都有对应的教学视频，逐步带领学员掌握Spring AI接入人工智能大模型的各种技能。</p><p>链接：<a href="https://www.alipan.com/s/y5Sa3Qb5WMC">https://www.alipan.com/s/y5Sa3Qb5WMC</a></p></li><li><p>资源名称：【乐字节】云日记-JAVAEE王牌入门项目 - 带源码课件</p><p>资源简介：JAVAEE工程师入门项目，分享内容、成长自己、利于他人，搭建属于自己的博客系统。</p><p>链接：<a href="https://www.alipan.com/s/89TLG7kXHan">https://www.alipan.com/s/89TLG7kXHan</a></p></li><li><p>资源名称：【小滴课堂】互联网架构之权限认证ApacheShiro零基础到高级实战 - 带源码课件</p><p>资源简介：小滴课堂-权限框架Shiro+SpringBoot2.x零基础到高级实战。</p><p>链接：<a href="https://www.alipan.com/s/goN93Z5GHyU">https://www.alipan.com/s/goN93Z5GHyU</a></p></li><li><p>名称：Java开发企业级权限管理系统 Spring Security Apache Shiro对比分析</p><p>描述：全程手把手带你运用Java技术栈，打造一套基于最流行的RBAC拓展模型的，分布式的，有界面的，高灵活性，高拓展性的企业级权限管理系统。学完本课程你将可以轻松应对绝大多数企业开发中与权限管理及后台系统相关的需求。</p><p>链接：<a href="https://www.alipan.com/s/zMNoqM6TzNz">https://www.alipan.com/s/zMNoqM6TzNz</a></p></li><li><p>名称：Java秒杀系统方案优化 掌握海量访问通用解决方案</p><p>描述：以“秒杀”这一Java高性能高并发的试金石场景为例，带你通过一系列系统级优化，学会应对高并发。。</p><p>链接：<a href="https://www.alipan.com/s/1Px31ynzoF6">https://www.alipan.com/s/1Px31ynzoF6</a></p></li><li><p>名称：【鲁班学院】Java架构师VIP第03期 - 带源码课件</p><p>描述：本套课程来自鲁班学院：Java架构师VIP课程，课程官方售价6380元，且销售评价较高，课程是由多名业界大牛主讲。</p><p>链接：<a href="https://www.alipan.com/s/Ht9M7tXD77L">https://www.alipan.com/s/Ht9M7tXD77L</a></p></li><li><p>资源名称：新版Springboot3.0打造能落地的高并发仿12306售票系统 - 带源码课件</p><p>资源简介：明星讲师“甲蛙”全新力作,带你学习各种高并发场景的解决方案。</p><p><a href="https://www.alipan.com/s/5sK3ZWi2ShJ">https://www.alipan.com/s/5sK3ZWi2ShJ</a></p></li><li><p>资源名称：【百知教育】Java全栈开发精英课程 - 带源码课件</p><p>资源简介：Java全栈开发精英课程，课程官方售价9999元，课程内容主要涵盖Java编程语言、Spring Boot和Spring MVC等流行的Java<br>Web框架、关系型数据库如MySQL、Oracle等，HTML、CSS、JavaScript以及前端框架如Angular、React等前端开发技术。同时还包括自动化构建工具Maven或Gradle、版本控制工具Git等。</p><p><a href="https://www.alipan.com/s/FT1BnqKTfoR">https://www.alipan.com/s/FT1BnqKTfoR</a></p></li><li><p>资源名称：【图灵课堂】Java-架构师VIP精品课程（第六期） - 带源码课件</p><p>资源简介：这门课是2023最新一期的！更新快，覆盖广，技术新，高使用。12大专题覆盖所有互联网技术 20+技术点深入源码分析结合大厂面试题深入讲解<br>循序渐进晋升P6-P8, 项目驱动获取真实项目经验。</p><p><a href="https://www.alipan.com/s/WDbJMWH2bAy">https://www.alipan.com/s/WDbJMWH2bAy</a></p></li><li><p>资源名称：SpringCloudalibaba+Vue开发仿社交小程序 - 带源码课件</p><p>资源简介：完整微服务实战项目，毕设&#x2F;求职高质量优秀案例。</p><p><a href="https://www.alipan.com/s/NKbGw2VXwkP">https://www.alipan.com/s/NKbGw2VXwkP</a></p></li><li><p>资源名称：SpringBoot2.X + Vue + UniAPP，全栈开发医疗小程序 - 带源码课件</p><p>资源简介：毕设&#x2F;求职可用的新潮优秀案例（Web管理端+小程序用户端）。</p><p><a href="https://www.alipan.com/s/G3Z3Fj94mRh">https://www.alipan.com/s/G3Z3Fj94mRh</a></p></li><li><p>名称：Java高并发编程，构建并发知识体系，提升面试成功率 - 带源码课件</p><p>描述：构建并发编程知识体系，提升面试成功率。</p><p>链接：<a href="https://www.alipan.com/s/UZLnpU5NkHK">https://www.alipan.com/s/UZLnpU5NkHK</a></p></li><li><p>名称：体系课-Java架构师-技术专家</p><p>描述：国内外一线大厂技术大咖与慕课网组成专家团队12个月磨一剑 千万级电商项目从0到1到100全过程 涵盖Java程序员不同成长阶段的问题及优选解决方案</p><p>链接：<a href="https://www.aliyundrive.com/s/5z2zkWsbEJr">https://www.aliyundrive.com/s/5z2zkWsbEJr</a></p></li><li><p>资源名称：【开课吧】并发编程与JVM领域进阶计划 - 带源码课件</p><p>资源简介：本课程从解决学员面试过程中存在的痛点出发，专注于帮助学员系统构建并发编程与JVM的整套知识体系,增加实际生产调优经验，积累实战项目经历，多维度提升你在面试时的核心竞争力。</p><p><a href="https://www.alipan.com/s/VhQNQCXFJPd">https://www.alipan.com/s/VhQNQCXFJPd</a></p></li><li><p>资源名称：【艾编程教育】Java架构师VIP系统黄埔班 - 带源码课件</p><p>资源简介：本课程是系统班级直播后录播课回放的地方，后面的课程陆续会更新在里面。</p><p><a href="https://www.alipan.com/s/tguA6RU7PW5">https://www.alipan.com/s/tguA6RU7PW5</a></p></li><li><p>名称：7个经典应用诠释Java算法精髓收藏</p><p>描述：以Java语言主讲，通过7款经典好玩游戏，真正将算法用于实际开发。</p><p>链接：<a href="https://www.alipan.com/s/TiR5FV4KzdQ">https://www.alipan.com/s/TiR5FV4KzdQ</a></p></li><li><p>名称：【乐字节】云日记-JAVAEE王牌入门项目 - 带源码课件</p><p>描述：JAVAEE工程师入门项目，分享内容、成长自己、利于他人，搭建属于自己的博客系统。</p><p>链接：<a href="https://www.alipan.com/s/89TLG7kXHan">https://www.alipan.com/s/89TLG7kXHan</a></p></li><li><p>新版分布式调度XXL-Job+SpringBoot2.X项目实战 - 带源码课件</p><p>资源简介：XL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展||多数互联网公司里面用的技术，周期性业务<br>如消息推送、支付对账、数据统计等。。</p><p><a href="https://www.alipan.com/s/TiX5Te5Rzfn">https://www.alipan.com/s/TiX5Te5Rzfn</a></p></li><li><p>名称：【动力节点】Java基础班 - 2018</p><p>描述：从零基础出发，讲解Java编程的基础知识和实践技巧，涵盖了Java编程的方方面面。。</p><p>链接：<a href="https://www.alipan.com/s/iA6adD2jy1o">https://www.alipan.com/s/iA6adD2jy1o</a></p></li><li><p>名称：【马士兵教育】MCA高级架构师 - 2024 - 带源码课件</p><p>描述：程序员升职加薪必备知识体系：互联网架构师+大数据推荐系统.。</p><p>链接：<a href="https://www.alipan.com/s/fkx751CygYL">https://www.alipan.com/s/fkx751CygYL</a></p></li><li><p>名称：【马士兵教育】MCA高级架构师 - 2024 - 带源码课件</p><p>描述：程序员升职加薪必备知识体系：互联网架构师+大数据推荐系统.。</p><p>链接：<a href="https://www.alipan.com/s/fkx751CygYL">https://www.alipan.com/s/fkx751CygYL</a></p></li><li><p>名称：Java从0到架构师①②③④合辑 - 带源码课件</p><p>描述：Java从0到架构师①②③④合辑。。</p><p>链接：<a href="https://pan.quark.cn/s/a06fc4fa77fb">https://pan.quark.cn/s/a06fc4fa77fb</a></p></li><li><p>名称：微专业 - Java高级架构师 2021架构福利期</p><p>描述：5大技能专题，8大网易实战项目，带你成为高级架构师。</p><p>链接：<a href="https://www.aliyundrive.com/s/4SYxb3GECNQ">https://www.aliyundrive.com/s/4SYxb3GECNQ</a></p></li><li><p>名称：Java项目实战营 - 6期</p><p>描述：极客时间价值3999元的Java实战项目课程。</p><p>链接：<a href="https://www.aliyundrive.com/s/9HCF1z2V3df">https://www.aliyundrive.com/s/9HCF1z2V3df</a></p></li><li><p>名称：高级Java工程师体系课2.0</p><p>描述：高级Java工程师体系课2.0。</p><p>链接：<a href="https://www.aliyundrive.com/s/TdcEYSgQUWU">https://www.aliyundrive.com/s/TdcEYSgQUWU</a></p></li><li><p>名称：【小滴课堂】急速掌握-新版分布式调度XXL-Job+SpringBoot2.X项目实战 - 带源码课件</p><p>描述：XL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展||多数互联网公司里面用的技术，周期性业务<br>如消息推送、支付对账、数据统计等。。</p><p>链接：<a href="https://www.alipan.com/s/TiX5Te5Rzfn">https://www.alipan.com/s/TiX5Te5Rzfn</a></p></li><li><p>名称：Java从0到架构师①②③④合辑 - 带源码课件</p><p>描述：Java从0到架构师①②③④合辑。。</p><p>链接：<a href="https://www.alipan.com/s/v14hHjPcgEW">https://www.alipan.com/s/v14hHjPcgEW</a></p></li><li><p>名称：Java并发编程高阶技术-高性能并发框架源码解析与实战</p><p>描述：全网唯一深度解析并发编程框架disruptor底层源码课程，助你成为并发编程高手，拿下高薪！</p><p>链接：<a href="https://www.aliyundrive.com/s/iLDpa1wCngU">https://www.aliyundrive.com/s/iLDpa1wCngU</a></p></li><li><p>名称：Spring Cloud 进阶 Alibaba 微服务体系自媒体实战</p><p>描述：分布式&#x2F;前后端分离&#x2F;项目分层聚合 养成应对复杂业务的综合技术能力</p><p>链接：<a href="https://www.aliyundrive.com/s/tNYUtK1GBTC">https://www.aliyundrive.com/s/tNYUtK1GBTC</a></p></li><li><p>名称：体系课 - Java全栈工程师</p><p>描述：7七月亲授，Web领域市场呼声最高的主流技术栈逐一精讲 技术与业务深度融合，电商项目前后端开发的教科书级别案例<br>赋能Java从业者拥有更强的职场适应力和工作竞争力！</p><p>链接：<a href="https://www.aliyundrive.com/s/3yGBD7hVGcW">https://www.aliyundrive.com/s/3yGBD7hVGcW</a></p></li><li><p>名称：【黑马程序员】JavaEE就业课 V12.5</p><p>描述：全新升级四大课程优势，助力IT职业教育行业变革：1、分层次学习体系，把课程分成三个篇章来进行学习，以分层的方式，逐层增加难度，稳固学习成果，让学生真正能够动手干活后，再深入高级知识，理解透彻、稳步提高。</p><p>链接：<a href="https://www.aliyundrive.com/s/tPS2G1SqtTs">https://www.aliyundrive.com/s/tPS2G1SqtTs</a></p></li><li><p>名称：体系课-Java工程师 2022版</p><p>描述：2022全新升级，就业率常年霸榜，王牌编程语言 0基础入门，高效掌握Java工程师所需能力，冲击大厂高薪 给你更高的就业起点，更好的就业终点</p><p>链接：<a href="https://www.aliyundrive.com/s/udaGjNLJ9w7">https://www.aliyundrive.com/s/udaGjNLJ9w7</a></p></li><li><p>名称：【艾编程教育】Java架构师VIP系统黄埔班 - 带源码课件</p><p>描述：本课程是系统班级直播后录播课回放的地方，后面的课程陆续会更新在里面。</p><p>链接：<a href="https://pan.quark.cn/s/915d67873484">https://pan.quark.cn/s/915d67873484</a></p></li><li><p>名称：【尚硅谷】SpringCloud2024 - 带源码课件</p><p>描述：学习本套教程，可以掌握构建分布式系统所需的知识和技能，熟悉新版的SpringCloud组件，理解微服务架构的优势和实践方法，从而能够更好地应对复杂软件开发的挑战。</p><p>链接：<a href="https://www.alipan.com/s/3w1DU5zvKP6">https://www.alipan.com/s/3w1DU5zvKP6</a></p></li><li><p>名称：拓薪教育 Java互联网架构师之路</p><p>描述：Java互联网架构师之路&#x2F;微服务&#x2F;高性能&#x2F;分布式&#x2F;底层源码&#x2F;高并发。</p><p>链接：<a href="https://www.aliyundrive.com/s/cR4cdNMnmwp">https://www.aliyundrive.com/s/cR4cdNMnmwp</a></p></li><li><p>名称：【奈学科技】P7Java架构师13期</p><p>描述：奈学教育P7 Java 架构师课程 Java 金字塔职业发展模型，让“进阶架构师”成为职业路径的必经之路；架构技能也成了市场上的稀缺能力。奈学教育P7<br>Java 架构师对标大厂 P7 架构师&#x2F;技术专家，带你从需求分析开始，进行技术选型、架构设计、服务治理等 8<br>大企业级经典架构实践，培养你实现高可用、高性能、高拓展架构的能力。</p><p>链接：<a href="https://www.aliyundrive.com/s/84C6vArwprs">https://www.aliyundrive.com/s/84C6vArwprs</a></p></li><li><p>名称：【黑马程序员】JavaEE就业课 V13.0 - 带源码课件</p><p>链接：<a href="https://www.aliyundrive.com/s/ZZrN8URUsxB">https://www.aliyundrive.com/s/ZZrN8URUsxB</a></p></li><li><p>名称：极客时间 - Java项目实战营 - 6期 - 带源码课件</p><p>描述：极客时间价值3999元的Java实战项目课程。</p><p>链接：<a href="https://www.alipan.com/s/9HCF1z2V3df">https://www.alipan.com/s/9HCF1z2V3df</a></p></li><li><p>名称：极客时间 - 零基础学 Java</p><p>描述：通俗易懂的 Java 入门课！</p><p>链接：<a href="https://pan.quark.cn/s/0190605c59d6">https://pan.quark.cn/s/0190605c59d6</a></p></li><li><p>名称：全新Java进阶课【每特教育】</p><p>描述：全新Java进阶课【每特教育】！</p><p>链接：<a href="https://www.aliyundrive.com/s/gaH6sbeFdzL">https://www.aliyundrive.com/s/gaH6sbeFdzL</a></p></li></ul><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><ul><li><p>名称：B站-3小时学会用Python处理Excel及各种自动化办公小案例</p><p>描述：B站-3小时学会用Python处理Excel及各种自动化办公小案例</p><p>链接：<a href="https://www.aliyundrive.com/s/TqFRubcXD5h">https://www.aliyundrive.com/s/TqFRubcXD5h</a></p></li><li><p>名称：Python全栈开发脱产班16期 - 带源码课件</p><p>描述：Python全栈开发脱产班通常是指为期16周的培训班，旨在培养能够从事全栈开发工作的学员。全栈开发通常包括前端开发、后端开开发和全栈设计。</p><p>链接：<a href="https://www.alipan.com/s/vTQmzxy6r7U">https://www.alipan.com/s/vTQmzxy6r7U</a></p></li><li><p>资源名称：【博学谷】从Dokcer到爬虫技术架构+Python爬虫京东项目</p><p>资源简介：这是一套特别强悍的Docker+Python爬虫实战课程，课程共有10个章节进行全面详细的教学。相比较往常比较常见的Python爬虫课程，本课程在技术中更加融入了Docker理论和实践，课程通过对整个爬虫技术架构及实战和理论的提升，将整体技术含量提高了多个水平，特别适合从事相关开发工作的同学们进行学习研究。</p><p>链接：<a href="https://www.alipan.com/s/MfK3CNY6hCv">https://www.alipan.com/s/MfK3CNY6hCv</a></p></li><li><p>资源名称：python零基础入门移动端爬虫班</p><p>资源简介：《Python零基础入门移动端班》课程旨在帮助学习者从零开始学习Python编程，掌握移动端爬虫技术。通过简单易懂的教学内容，学员将学会如何利用Python编写爬虫程序，实现数据采集与分析，拓展在移动端应用的应用能力。</p><p><a href="https://pan.quark.cn/s/00247cbc1258">https://pan.quark.cn/s/00247cbc1258</a></p></li><li><p>名称：Python高效编程技巧实战 - 带源码课件</p><p>描述：精选50个Python各领域开发及面试常见问题作为训练任务，每个任务先提出问题，然后分析问题、并给出高效的解决办法，最后手把手带你解决问题，全面提升用Python快速解决问题与高效编程的能力。</p><p>链接：<a href="https://www.alipan.com/s/QXfbJUKj9Ud">https://www.alipan.com/s/QXfbJUKj9Ud</a></p></li><li><p>名称：Python操作三大主流数据库</p><p>描述：在用Python做开发时，你不可避免的会与数据库打交道，这次，带你入门Python操作不同类型数据库的实用技术。</p><p>链接：<a href="https://www.alipan.com/s/C3AMYKCZp69">https://www.alipan.com/s/C3AMYKCZp69</a></p></li><li><p>名称：【万门大学】Python数据可视化从入门到实战</p><p>描述：【万门大学】Python数据可视化从入门到实战！</p><p>链接：<a href="https://www.alipan.com/s/LNrNxkfyxJ5">https://www.alipan.com/s/LNrNxkfyxJ5</a></p></li><li><p>名称：【博学谷】从Dokcer到爬虫技术架构+Python爬虫京东项目</p><p>描述：这是一套特别强悍的Docker+Python爬虫实战课程，课程共有10个章节进行全面详细的教学。相比较往常比较常见的Python爬虫课程，本课程在技术中更加融入了Docker理论和实践，课程通过对整个爬虫技术架构及实战和理论的提升，将整体技术含量提高了多个水平，特别适合从事相关开发工作的同学们进行学习研究。</p><p>链接：<a href="https://www.alipan.com/s/MfK3CNY6hCv">https://www.alipan.com/s/MfK3CNY6hCv</a></p></li><li><p>名称：【黑马程序员】Python开发就业课 - 2022 - 带源码课件</p><p>描述：【黑马程序员】Python开发就业课 - 2022。</p><p>链接：<a href="https://www.alipan.com/s/p7rhrgkTob4">https://www.alipan.com/s/p7rhrgkTob4</a></p></li><li><p>名称：Python网络爬虫工程师系列培训视频课程（全套详细版）（无答疑）</p><p>描述：本套课程为完整版的网络爬虫课程，学员可以通过该课程学习网络爬虫的相关知识，以便学习网络爬虫方方面面的知识，学完后胜任网络爬虫相关工作。<br>1、体系完整科学，可以系统化学习； 2、课程通俗易懂，可以让学员真正学习； 3、从零开始教学直到深入，零基础的同学亦可以学习。</p><p>链接：<a href="https://www.aliyundrive.com/s/VU9xZvwqdnk">https://www.aliyundrive.com/s/VU9xZvwqdnk</a></p></li><li><p>资源标题：【尚硅谷】2024最新版Python视频教程</p><p>资源描述：教程分为三大模块：基础语法、面向对象编程、案例实战。基础语法阶段，带你写出含有分支结构、循环结构等复杂结构的代码，掌握Python基本的数据类型与内置命令的使用；面向对象编程阶段，学习函数的使用，类和对象的创建以及类的三大特性，从对象出发进行模块化编程，文件交互操作和掌握读写文件的方法；案例实战阶段，综合运用所学知识，进行代码复杂度高的网络聊天室、飞机大战游戏等的案例开发。资源易和谐，有需要的速度保存。</p><p>链接：<a href="https://pan.quark.cn/s/300a961737a6">https://pan.quark.cn/s/300a961737a6</a></p></li><li><p>名称：【百战程序员】 Python 全栈工程师 32个学习阶段</p><p>描述：Python 被广泛应用于数据分析、机器学习以及 Web 开发等领域，尤其是近些年人工智能的发展更加助推了 Python 的火热程度。<br>学习 Python 是非科班出身进入程序员岗位的选择。本套 Python全栈工程师<br>课程旨在培养学员成为全面掌握Python编程和Web开发技术的专业人士。课程内容包括Python基础、前端和后端开发、数据库管理、版本控制、部署和维护等，为学员提供广泛的全栈开发技能，以满足不同领域的需求。</p><p>链接：<a href="https://www.aliyundrive.com/s/Dq38iuw3SJS">https://www.aliyundrive.com/s/Dq38iuw3SJS</a></p></li><li><p>名称：【普门教育】Python数据分析</p><p>描述：【普门教育】Python数据分析。</p><p>链接：<a href="https://pan.quark.cn/s/7de83c9b752e">https://pan.quark.cn/s/7de83c9b752e</a></p></li><li><p>名称：Django前后端分离项目实战</p><p>描述：本课程将重点介绍Django框架下前后端分离的开发方法。学员将学习如何结合Django REST<br>framework和现代前端框架（如React、Vue.js）构建全栈应用。通过实际项目实践，帮助学员掌握前后端分离开发流程及最佳实践。</p><p>链接：<a href="https://pan.quark.cn/s/f1e8ca21bd21">https://pan.quark.cn/s/f1e8ca21bd21</a></p></li></ul><h4 id="Csharp"><a href="#Csharp" class="headerlink" title="Csharp"></a>Csharp</h4><h4 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h4><ul><li><p>名称：慕课网-基于Golang协程实现流量统计系统</p><p>描述：程详细讲解了如何使用Golang协程实现流量统计系统，包含6小时学习内容，涉及高并发场景下的流量分析计数功能。课程涵盖Go协程并发机制、数据收集、Nginx打点统计、数据存储与查询方案等关键技术点。</p><p>链接：<a href="https://pan.quark.cn/s/09c73a246452">https://pan.quark.cn/s/09c73a246452</a></p></li></ul><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><ul><li>见 web 部分</li></ul><h3 id="面试宝典"><a href="#面试宝典" class="headerlink" title="面试宝典"></a>面试宝典</h3><ul><li><p>名称：全栈后端高级工程师面试专题第一季</p><p>描述：中高级面试题对标【阿里P6，腾讯T2-3高级工程师】|| 工作1~5年，想成为高级工程师&#x2F;技术经理的同学||想通过校招 或<br>社招进大厂的同学||【最重要的是针对想 离职、跳槽的同学准备的面试教程】</p><p>链接：<a href="https://www.alipan.com/s/josszMXx1Co">https://www.alipan.com/s/josszMXx1Co</a></p></li><li><p>名称：【大圣编程】前端工程师算法课</p><p>描述：JS实现算法+ Vue&#x2F;React框架中的算法 + leetcode200题 一次性解决前端工程师面试中的算法难题。</p><p>链接：<a href="https://www.alipan.com/s/RQwXvpDSHBS">https://www.alipan.com/s/RQwXvpDSHBS</a></p></li></ul><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><ul><li><p>名称：翼狐 《C4D教程宝典-重制版》从基础入门到进阶高手 C4D OC</p><p>描述：这套课程主要以更系统全面的学习C4D各项功能而打造,专为C4D初学者量身定制的从入门到实操的全功能自学宝典。|<br>本套课程会主以R19讲解。并包含R20 21<br>22的新功能讲解，OC渲染器也会以新版本进行讲解；因为很多东西还是老版本兼容性比较强，这样既能照顾到C4D老用户，也能让新用户从头开始学习。同时我会融入很多我个人技巧和经验，学会举一反三的思路</p><p>链接：<a href="https://pan.quark.cn/s/7c79d4ad03e6">https://pan.quark.cn/s/7c79d4ad03e6</a></p></li></ul><h4 id="绘画"><a href="#绘画" class="headerlink" title="绘画"></a>绘画</h4><ul><li><p>名称：B站 - 代代木动画学院：零基础绘画课程（角色篇）</p><p>描述：让日本历史最悠久的二次元人才培训机构——代代木动画学院（简称YOANI）的专业老师们，带你入门绘画基础，成为大触的日子指日可待？！每周三准时更新！一起来画画吧！</p><p>链接：<a href="https://www.alipan.com/s/2nMBwhCmmEA">https://www.alipan.com/s/2nMBwhCmmEA</a></p></li></ul><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><ul><li><p>名称：CSDN会员免费电子书1000本</p><p>描述：CSDN会员免费电子书1000本</p><p>链接：<a href="https://pan.quark.cn/s/86e3b779e406">https://pan.quark.cn/s/86e3b779e406</a></p></li><li><p>名称：少儿科普启蒙动画片《小小科学探索家》</p><p>描述：《小小科学探索家》主要讲述马拉宝通过与各种动物的互动来探索宇宙及地球上各种物理知识，比如海底的火山、流星雨、彗星、月球诞生、陨石等等。</p><p>链接：<a href="https://pan.quark.cn/s/a11dcc717038">https://pan.quark.cn/s/a11dcc717038</a></p></li><li><p>名称：900份各行各业实用合同模板</p><p>描述：包含32个行业各类合同模板 共900套</p><p>链接：<a href="https://pan.quark.cn/s/267257932305">https://pan.quark.cn/s/267257932305</a></p></li></ul><h3 id="电子书"><a href="#电子书" class="headerlink" title="电子书"></a>电子书</h3><ul><li><p>名称：付费小说300+</p><p>描述：自费购买的付费小说300+</p><p>链接：<a href="https://pan.quark.cn/s/4e1a6d8e3b6b">https://pan.quark.cn/s/4e1a6d8e3b6b</a></p></li></ul><h3 id="软考"><a href="#软考" class="headerlink" title="软考"></a>软考</h3><ul><li><p>名称：202305软考中级系统集成项目管理</p><p>描述：该课程是针对中级考试而设计的。课程内容涵盖了系统集成项目管理的基本理论和方法，包括项目规划、需求分析、项目组织、进度控制、风险管理等方面的知识和技能。通过学习该课程，学员将提升系统集成项目管理能力，为顺利通过软考中级考试打下坚实基础。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/ef0dfcbfdfa9">https://pan.quark.cn/s/ef0dfcbfdfa9</a></p></li><li><p>名称：2022年系统架构设计师 + 架构冲刺班</p><p>描述：2022年系统架构设计师 + 架构冲刺班。</p><p>链接：<a href="https://pan.quark.cn/s/6ff82a34179d">https://pan.quark.cn/s/6ff82a34179d</a></p></li><li><p>希赛王勇.202205.软考高级系统分析师</p><p>链接：<a href="https://pan.baidu.com/s/1cFlN6Rk2ENuM0CkUak8DeA">https://pan.baidu.com/s/1cFlN6Rk2ENuM0CkUak8DeA</a></p><p>提取码：5afe</p></li><li><p>希赛李阿妹老师.202305.软考中级软件设计师</p><p>链接：<a href="https://pan.baidu.com/s/1xfNhk0SP9JnUbaHgZJCFHA">https://pan.baidu.com/s/1xfNhk0SP9JnUbaHgZJCFHA</a></p><p>提取码：v7e3</p></li><li><p>野人老师.202305.软考高级信息系统项目管理师</p><p><a href="https://pan.baidu.com/share/init?surl=eqGgva4GQLRnsBGA8eQzvw&pwd=ruga">https://pan.baidu.com/share/init?surl=eqGgva4GQLRnsBGA8eQzvw&amp;pwd=ruga</a></p></li><li><p>希赛软考-高级系统架构师全程指导教程</p><p><a href="https://pan.baidu.com/share/init?surl=VX8Z4AijpQhEVbRejK8xkQ">https://pan.baidu.com/share/init?surl=VX8Z4AijpQhEVbRejK8xkQ</a>   8wdf</p></li><li><p>名称：熊老师12节论文求生指南视频课程</p><p>描述：熊老师12节求生指南视频是一门专为学术论文写作而设计的课程。通过这门课程，你将学习到如何选择论文题目、进行文献综述、构建合理的论文结构、有效地撰写和编辑论文等技巧和方法。无论你是初次接触学术写作还是希望提升论文写作水平，这门课程都能够帮助你顺利完成高质量的学术论文。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/1ec7d5e3e9a0">https://pan.quark.cn/s/1ec7d5e3e9a0</a></p></li></ul><h3 id="PLC"><a href="#PLC" class="headerlink" title="PLC"></a>PLC</h3><ul><li><p>名称：PLC编程入门精通73节全套教程</p><p>描述：PLC全套视频教程共73课,从入门到精通。从基础讲起，一步步提高PLC编程技巧。本套教程分为：电工基础教程、PLC入门教程、PLC高级教程、PLC经验与技巧、触摸屏(<br>人机)编程教学。此视频通俗易懂，而且很实用。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/3d38f362b3f9">https://pan.quark.cn/s/3d38f362b3f9</a></p></li></ul><h2 id="人类语言"><a href="#人类语言" class="headerlink" title="人类语言"></a>人类语言</h2><h3 id="普通话"><a href="#普通话" class="headerlink" title="普通话"></a>普通话</h3><ul><li><p>名称：新普通话水平测试课程</p><p>描述：课程通过测试标准解读、发音要领讲解、示范领读训练，让学习者了解和掌握普通话水平测试内容、评分标准和测试流程，以及普通话语音的基础知识，提高汉语口语表达能力。</p><p>链接：<a href="https://pan.quark.cn/s/ed1b5da91590">https://pan.quark.cn/s/ed1b5da91590</a></p></li></ul><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ul><li><p>名称：英语口语系统学习班</p><p>描述：【考虫】英语口语系统学习班。</p><p>链接：<a href="https://www.aliyundrive.com/s/ugWNdESdNBd">https://www.aliyundrive.com/s/ugWNdESdNBd</a></p></li><li><p>名称：耿建超治愈系英语课程</p><p>描述：课程设置七大体系八大节学习内容，一次英语备考复习大串讲，让学生豁然开朗，短时间内暴涨英语能力。</p><p>链接：<a href="https://pan.quark.cn/s/b214ef389317">https://pan.quark.cn/s/b214ef389317</a></p></li><li><p>名称：欧阳萍经典听口训练营30季</p><p>描述： 听口训练营帮助学习方向和方法出现偏差的学生，用最科学的方式，回归英语听力、口语最真实有效的学习以及训练道路。</p><p>链接：<a href="https://pan.quark.cn/s/a68113b8fbab">https://pan.quark.cn/s/a68113b8fbab</a></p></li><li><p>名称：英语高效磨耳朵</p><p>描述：英语高效磨耳朵是一种通过大量英语听力输入来提高英语听说能力的学习方法。它强调选择适合个人英语水平的听力材料，如儿歌、动画、绘本音频等，并通过精听和泛听相结合的方式，让孩子在不知不觉中感知英语的语音、语调和韵律节奏。</p><p>链接：<a href="https://pan.quark.cn/s/6da2bdb954df">https://pan.quark.cn/s/6da2bdb954df</a></p></li><li><p>资源名称：snow英语《零基础英语口语课》</p><p>资源简介：Snow英语的《零基础英语口语课》是一门专为英语初学者设计的口语课程，帮助学员从零开始建立英语口语基础，逐步掌握流利的口语表达能力。<br>课程的内容全面且实用，涵盖了英语口语的各个方面。学员将学习基本的语音、语调，掌握常用的词汇和语法结构，并通过丰富的口语练习提升口语流利度和准确性。课程还注重培养学员的实际运用能力，通过模拟真实场景的对话练习，让学员能够在不同场合下自如地进行口语交流。</p><p><a href="https://pan.quark.cn/s/d4236c670aa4">https://pan.quark.cn/s/d4236c670aa4</a></p></li><li><p>资源名称：21天暴力突破英语视频课程</p><p>资源简介：本课程送给那些零基础学员、想要高考、四六级、专八考试、雅思、托福、GRE拿高分，想要不看字幕就能听懂Youtube、TED和英文公开课，想要出国游玩和老外顺畅沟通交流，想要掌握科学学习法则，实现知识、技能指数增长的人。</p><p><a href="https://pan.quark.cn/s/79757037c34b">https://pan.quark.cn/s/79757037c34b</a></p></li><li><p>资源名称：母语思维30小时吃透英语语法</p><p>资源简介：面对“压力山大”的高考，你有十足把握考上理想大学吗？面对模拟考试的分数榜，本来很高的总成绩是不是又被英语拖后腿了呢？面对伤透脑筋的英语成绩，你是不是有很多知识盲点想补，但又不知从何补起呢？帮助你搭建语法体系，了解语法全貌，真正吃透语法精髓！讲练结合活学活用，英语高分so<br>easy!</p><p><a href="https://pan.quark.cn/s/2cf3db4b1c38">https://pan.quark.cn/s/2cf3db4b1c38</a></p></li><li><p>资源名称：2024年6月英语四六级资料大合集</p><p>资源简介：2024年6月英语四六级资料大合集，为广大考生提供全面、详尽的备考资料，帮助他们顺利通过即将到来的四六级考试。该合集涵盖了听力、阅读、翻译和写作等各个考试环节，包含了大量的模拟试题、历年真题、解题技巧以及备考策略等内容。</p><p><a href="https://pan.quark.cn/s/fdae9c5838f2">https://pan.quark.cn/s/fdae9c5838f2</a></p></li><li><p>名称：【橙啦】宝爷万词班 22000词汇速记营</p><p>描述：宝爷万词班挺不错的，宝爷作为国内首位站在TEDx讲台上的催眠讲师，宝爷专攻大脑认知和社交心理，在10年间帮助了数万学员走出心理困惑。</p><p>链接：<a href="https://www.alipan.com/s/vjrDFHYR71o">https://www.alipan.com/s/vjrDFHYR71o</a></p></li><li><p>名称：瑞秋美式英语Rachel美语发音全集（带字幕）</p><p>描述：《Rachel美语发音全集》通过深入细致的指导和练习，你将能够掌握正确的发音技巧，提升口语表达的自信度。本课程适合所有希望提高英语发音的学习者，无论是初学者还是已有一定基础的人士。无论你是在学校、工作、旅行或社交中使用英语，这门课程都将帮助你有效地表达自己。</p><p>链接：<a href="https://www.aliyundrive.com/s/9B8VsKCoKhP">https://www.aliyundrive.com/s/9B8VsKCoKhP</a></p></li><li><p>名称：2024考研复试英语口语课</p><p>描述：英语复试的要求，一般有笔试，听力和口语三种形式。有的学校可能三种形式都要考查，笔试面试相结合，笔试听力-张卷，而口语考查则比较灵活。</p><p>链接：<a href="https://pan.quark.cn/s/4e52d893a4fd">https://pan.quark.cn/s/4e52d893a4fd</a></p></li><li><p>名称：【新学未】国际音标-精华班（剑桥认证国际教师）</p><p>描述：【新学未】国际音标-精华班（剑桥认证国际教师）。</p><p>链接：<a href="https://pan.quark.cn/s/94b32942cffc">https://pan.quark.cn/s/94b32942cffc</a></p></li><li><p>名称：零基础英语语法 零基础适用（全集50讲）</p><p>描述：《英语语法入门》（共50讲），由崔荣容老师主讲，课讲得非常好，只要认真听完本套课程，你的英语语法一定没问题，建议大家循序渐进学习，切不可操之过急，听完一讲下去练习之后再听下一讲。</p><p>链接：<a href="https://pan.quark.cn/s/a2bcc3f4b78d">https://pan.quark.cn/s/a2bcc3f4b78d</a></p></li></ul><h3 id="日语"><a href="#日语" class="headerlink" title="日语"></a>日语</h3><ul><li><p>名称：零基础入门日语</p><p>描述：零基础入门日语。</p><p>链接：<a href="https://www.alipan.com/s/GFLkBiJAdZA">https://www.alipan.com/s/GFLkBiJAdZA</a></p></li><li><p>资源名称：B站 - 唐盾：N3+N2日语中级精讲</p><p>资源简介：N3N2词汇&#x2F;语法&#x2F;课文&#x2F;练习精讲，高考、考研、工作、生肉。</p><p><a href="https://www.alipan.com/s/iyLpSdEX4jc">https://www.alipan.com/s/iyLpSdEX4jc</a></p></li></ul><h3 id="韩语"><a href="#韩语" class="headerlink" title="韩语"></a>韩语</h3><ul><li><p>名称：【沪江网校】韩语入门至TOPIK高级</p><p>描述：TOPIK签约护考，输入+输出科学循环，1V1深入指导，口语考试也有招！</p><p>链接：<a href="https://www.alipan.com/s/be78t3Qe9Rv">https://www.alipan.com/s/be78t3Qe9Rv</a></p></li></ul><h2 id="锻炼"><a href="#锻炼" class="headerlink" title="锻炼"></a>锻炼</h2><h3 id="急救"><a href="#急救" class="headerlink" title="急救"></a>急救</h3><ul><li><p>名称：夜鹰10分钟救命课（完结）</p><p>描述：《夜鹰10分钟救命课（完结）》是一系列急救知识课程，由拥有13年一线急救经验的专家精心总结并传授。这些课程致力于将灵活的急救知识应用于现实场景，帮助公众在紧急情况下能够迅速、有效地采取急救措施。课程涵盖了23个家庭常用必备急救知识点，全面解析谣言和误区，确保学员能够全面、准确地掌握急救知识。</p><p>链接：<a href="https://pan.quark.cn/s/ced0246e1576">https://pan.quark.cn/s/ced0246e1576</a></p></li><li><p>名称：灾难、应急、求生、手册</p><p>描述：如题</p><p>链接：<a href="https://www.alipan.com/s/Sxb88xtQuUp">https://www.alipan.com/s/Sxb88xtQuUp</a></p></li></ul><h3 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h3><ul><li><p>名称：一介粗人健身房入门计划课程</p><p>描述：很多人办了卡却不知道怎么锻炼，也不知道去健身房应该准备些什么。他们比较茫然，每次去健身房的时候都只会跑跑步就回家了，这样的锻炼方式是比较低效的。</p><p>第一次去健身房锻炼，你需要准备些什么？学会这几个要点，让你成功入门，更加高效锻炼！</p><p>链接：<a href="https://pan.quark.cn/s/a930336e1ef2">https://pan.quark.cn/s/a930336e1ef2</a></p></li><li><p>健助师小珂带你领略健身精华</p><p>链接：<a href="https://pan.quark.cn/s/4817acccbd2c">https://pan.quark.cn/s/4817acccbd2c</a></p></li><li><p>名称：范李猿：14天体态矫正计划</p><p>描述：范李猿：14天体态矫正计划（上下篇）</p><p>链接：<a href="https://www.alipan.com/s/hjf5gJz8bhn">https://www.alipan.com/s/hjf5gJz8bhn</a></p></li><li><p>资源名称：《八段锦12分钟完整版—带呼吸口令版》</p><p>资源简介：《八段锦12分钟完整版—带呼吸口令版》是一套集健身、养生于一体的传统功法，通过12分钟的完整练习，结合呼吸口令的指导，帮助练习者全面调节身心，达到强身健体、舒缓压力的效果。<br>八段锦作为一种历史悠久的健身方法，其动作设计科学合理，能够全面锻炼人体的各个部位。通过缓慢而连贯的动作，配合深呼吸，可以有效地改善神经体液调节功能，加强血液循环，对腹腔脏器进行柔和的按摩。同时，对神经系统、心血管系统、消化系统、呼吸系统以及运动器官都有良好的调节作用。</p><p><a href="https://pan.quark.cn/s/6e6a111df5e4">https://pan.quark.cn/s/6e6a111df5e4</a></p></li></ul><h3 id="减脂"><a href="#减脂" class="headerlink" title="减脂"></a>减脂</h3><ul><li><p>名称：28天根本性减脂视频课程</p><p>描述：这个28天的根本性视频是为那些希望通过科学方法减脂的人设计的。课程包括专业指导、全面的营养计划和高效的锻炼指导。通过每天的视频教学，学员们将学习到正确的饮食习惯、有效的运动技巧以及如何保持良好的身体状态。这个课程旨在帮助学员在28天内实现根本性的减脂目标，并培养健康的生活方式。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/d754479bfdeb">https://pan.quark.cn/s/d754479bfdeb</a></p></li><li><p>名称：5分钟200讲定位思维战略</p><p>描述：这门课程将在5分钟内为您介绍战略，帮助您了解如何在市场竞争中找到自己的独特位置。通过简洁明了的讲解和实例分析，您将学会如何确定目标受众、区分竞争对手、塑造品牌形象，并制定有效的营销策略。快速获得有关定位思维战略的关键知识，提升您的市场竞争力！建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/c2a5856c0cbe">https://pan.quark.cn/s/c2a5856c0cbe</a></p></li><li><p>名称：30天整容级减肥训练营视频课程</p><p>描述：六大保障让你花最少的钱，请最好的私教，真的能坚持下去，元老级教练增肥30斤，陪你同步瘦，四不限+无器械练习，即使像明星那么忙，也能随时随地练起来!</p><p>链接：<a href="https://pan.quark.cn/s/312a855ba5ba">https://pan.quark.cn/s/312a855ba5ba</a></p></li></ul><h3 id="塑形"><a href="#塑形" class="headerlink" title="塑形"></a>塑形</h3><ul><li><p>名称：中医瑜伽减脂塑形双休提气质</p><p>描述：这门中医课程旨在通过汇集中国传统养生技术和瑜伽的体位法、呼吸法和冥想等练习，为学员提供全面而有效的健身计划。课程包括塑形、提升线条以及增强气质等方面的内容，帮助学员达到理想的外在形态，同时改善内在身心状态。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/dfd2436582be">https://pan.quark.cn/s/dfd2436582be</a></p></li><li><p>名称：迷罗养生理疗健身视频课程</p><p>描述：养生理疗健身是一门全面的健康课程，其中包含了锻炼身体、调理身心、改善饮食、促进睡眠等方面的内容。课程采用专业的视频教学，让学员更加直观地掌握各项技能和方法，并且内容详实实用，适合任何想要提升健康水平的人群。建议先收藏保存，不定时失效。</p><p>链接：<a href="https://pan.quark.cn/s/477cc6d945be">https://pan.quark.cn/s/477cc6d945be</a></p></li><li><p>资源名称：18天教你体态矫正腰臀比雕刻</p><p>资源简介：这款软件提供一套专业的18天训练计划，帮助用户矫正、雕刻完美腰臀比。结合科学运动和饮食建议，用户可实现身材管理目标。简单易懂的指导和定制化方案，让用户轻松在短时间内塑造理想体态。</p><p><a href="https://pan.quark.cn/s/8c1226f0d203">https://pan.quark.cn/s/8c1226f0d203</a></p></li></ul><h2 id="B站系列"><a href="#B站系列" class="headerlink" title="B站系列"></a>B站系列</h2><ul><li><p>名称：B站 - 翟东升：人民币汇率与人民币国际化</p><p>描述：关于货币汇率波动的规律，至今仍存在着广泛的错误认知。《人民币汇率与人民币国际化》的价值，就在于帮助观众改变思维和观念，避免再被各路半吊子专家们忽悠去做一些自挖墙脚、亲痛仇快的事情，真正认识了解人民币。</p><p>链接：<a href="https://pan.quark.cn/s/fd669bcc8f0d">https://pan.quark.cn/s/fd669bcc8f0d</a></p></li><li><p>资源名称：B站 - 北大陈连山教授解读宝藏《山海经》</p><p>资源简介：中华第一部地理志及神话传说大汇编。北大教授陈连山30年+研究成果首次线上系统开讲，全网独家播出。</p><p><a href="https://www.alipan.com/s/gu8P7BKL6T5">https://www.alipan.com/s/gu8P7BKL6T5</a></p></li><li><p>名称：B站 - 人大蔡丹君老师：提纲挈领读《红楼梦》</p><p>描述：崭新视角，立体解读红楼梦的种种谜团。</p><p>链接：<a href="https://www.alipan.com/s/QiB5YnMnwD8">https://www.alipan.com/s/QiB5YnMnwD8</a></p></li><li><p>名称：B站 - 翟东升：人民币汇率与人民币国际化</p><p>描述：关于货币汇率波动的规律，至今仍存在着广泛的错误认知。《人民币汇率与人民币国际化》的价值，就在于帮助观众改变思维和观念，避免再被各路半吊子专家们忽悠去做一些自挖墙脚、亲痛仇快的事情，真正认识了解人民币。</p><p>链接：<a href="https://www.alipan.com/s/pHv2j84JVKU">https://www.alipan.com/s/pHv2j84JVKU</a></p></li><li><p>名称：B站 - 珍大户 - 认知世界的经济学</p><p>描述：千万财经大V珍大户力作，十余年投管经验，耗时三年倾心打造。</p><p>链接：<a href="https://www.alipan.com/s/DA6frAV3Fo1">https://www.alipan.com/s/DA6frAV3Fo1</a></p></li><li><p>名称：B站 - 顶级互联网工程师的计算机思维课</p><p>描述：信息时代最重要的竞争力！</p><p>链接：<a href="https://www.alipan.com/s/xcQLEqtcKG7">https://www.alipan.com/s/xcQLEqtcKG7</a></p></li><li><p>名称：B站 - 十分绘画：绘画萌新入门创造营</p><p>描述：绘画萌新入门必修，靠谱导师带你冲冲冲！这套课程一共设置了绘画基础、进阶演练和高阶应用三大版块，是适用于板绘领域所有绘画学习的基础课程，请大家放心大胆食用哦~</p><p>链接：<a href="https://www.alipan.com/s/YZYJ2V4RvRS">https://www.alipan.com/s/YZYJ2V4RvRS</a></p></li><li><p>名称：B站 - 唐盾：N3+N2日语中级精讲</p><p>描述：N3N2词汇&#x2F;语法&#x2F;课文&#x2F;练习精讲，高考、考研、工作、生肉。</p><p>链接：<a href="https://www.alipan.com/s/iyLpSdEX4jc">https://www.alipan.com/s/iyLpSdEX4jc</a></p></li><li><p>名称：B站 - 马勇教授：极简中国史</p><p>描述：全球史观重构中国历史叙事，首次以横向共时的全球视角回望中国历史演进。</p><p>链接：<a href="https://www.alipan.com/s/SuURcKFN1o1">https://www.alipan.com/s/SuURcKFN1o1</a></p></li><li><p>名称：B站 - 王骁Albert：美国背面研究报告</p><p>描述：王骁带你从社会、战略、制度三大方面，12个热点问题出发，使用宏观历史对比的方法、社会学和经济学原理，让你一课看懂美国的内政外交的行为逻辑，理解美国历史、文化和社会，掌握新闻学透过现象看本质的分析方法。</p><p>链接：<a href="https://www.alipan.com/s/ZxkVRqKh8VB">https://www.alipan.com/s/ZxkVRqKh8VB</a></p></li><li><p>名称：B站 - 戴锦华大师电影课：性别与凝视</p><p>描述：戴锦华精选20部全球经典影片，关于女性与社会的独到解读。</p><p>链接：<a href="https://www.alipan.com/s/4UmfzuTrcCB">https://www.alipan.com/s/4UmfzuTrcCB</a></p></li><li><p>名称：B站 - 沈逸：白宫里的主角们</p><p>描述：细说美国的“黄金40年”与霸权陨落。</p><p>链接：<a href="https://pan.quark.cn/s/d738fcac65ca">https://pan.quark.cn/s/d738fcac65ca</a></p></li><li><p>名称：B站 - 江无情：福尔摩斯的推理笔记</p><p>描述：精选【福尔摩斯探案集】中的四个长篇小说，以及十个经典的短篇小说。带你穿越回维多利亚时代的伦敦，与福尔摩斯一起重返犯罪现场，在紧张刺激的冒险中，学习他的逻辑思维、推理方法、观察技巧。</p><p>链接：<a href="https://pan.quark.cn/s/46edf41eb668">https://pan.quark.cn/s/46edf41eb668</a></p></li><li><p>名称：B站 - 林超：给年轻人的跨学科通识课</p><p>描述：集齐22个学科100个知识点 打破文理商分科僵化世界。</p><p>链接：<a href="https://pan.quark.cn/s/42b3ef3840c8">https://pan.quark.cn/s/42b3ef3840c8</a></p></li><li><p>名称：B站 - 孙志立简明英语音标教程50讲</p><p>描述：一句话总结当节所学音标核心要领，让音标学习不再神秘、困难 摆脱“中式化”发音，开口即惊艳！</p><p>链接：<a href="https://pan.quark.cn/s/66a501607cc9">https://pan.quark.cn/s/66a501607cc9</a></p></li><li><p>名称：B站 - 武汉大学赵林教授的西方哲学课</p><p>描述：哲学零基础系统入门西方哲学！</p><p>链接：<a href="https://pan.quark.cn/s/387e6b2f4c39">https://pan.quark.cn/s/387e6b2f4c39</a></p></li><li><p>名称：B站 许倬云讲世界历史：五百年大变局（完结）</p><p>描述：《许倬云讲世界历史：五百年大变局》是一部在B站完结的历史类视频课程，由著名历史学家许倬云教授主讲。许倬云教授以“大历史观”的角度，系统地讲解了世界历史的发展脉络，特别是16世纪以来，以西方为主轴的人类文明演进的历程。同时，他也关注了中国与西方的双向互动，包括东亚天下帝国的兴衰、中东伊斯兰文明的盛衰、西欧现代文明的启蒙与全球扩张、非洲的殖民与美洲的开发等内容。</p><p>链接：<a href="https://pan.quark.cn/s/f1969ad00f09">https://pan.quark.cn/s/f1969ad00f09</a></p></li><li><p>名称：B站 - 温铁军：从“老冷战”到“新冷战”</p><p>描述：跨越两次“冷战”的历史讲述、温铁军亲身经历实地考察和调查研究产生的系统知识、在任何教课书上看不到的客观分析、关于中国如何应对“冷战”的犀利见解。</p><p>链接：<a href="https://pan.quark.cn/s/8f928ae5b482">https://pan.quark.cn/s/8f928ae5b482</a></p></li><li><p>名称：B站 - 金灿荣：中国周边安全环境十讲</p><p>描述：金灿荣教授作为国际关系和地缘政治研究专家，从中国与周边邻国的外交关系、地缘政治态势、历史交往等多个维度出发，为您梳理中国和当前各个邻国的交往状态，解读中国将从哪些方向受到安全压力！</p><p>链接：<a href="https://pan.quark.cn/s/d14b67b2c063">https://pan.quark.cn/s/d14b67b2c063</a></p></li><li><p>名称：B站 - 戴锦华大师电影课：性别与凝视</p><p>描述：戴锦华精选20部全球经典影片，关于女性与社会的独到解读。</p><p>链接：<a href="https://pan.quark.cn/s/bb26254a8324">https://pan.quark.cn/s/bb26254a8324</a></p></li><li><p>名称：B站 - PPT大神上分攻略</p><p>描述：从职场、校园全场景养成你的思维、设计、版式的高能方法论，各大厂牌的御用设计师手把手带你上分神技能！</p><p>链接：<a href="https://www.alipan.com/s/yKsdKEP18hH">https://www.alipan.com/s/yKsdKEP18hH</a></p></li><li><p>名称：B站 - 戴建业高能诗词课</p><p>描述：前方高能，国民教授魔性解读唐宋诗词。</p><p>链接：<a href="https://pan.quark.cn/s/87e548bc5061">https://pan.quark.cn/s/87e548bc5061</a></p></li><li><p>名称：B站 - 北大杨立华教授讲庄子哲学</p><p>描述：北大原汁原味硬核《庄子》精读课，还原作为哲学家的庄子。</p><p>链接：<a href="https://www.alipan.com/s/LjomfymXMLf">https://www.alipan.com/s/LjomfymXMLf</a></p></li><li><p>名称：B站 - 28天增肌减脂，居家打造黄金比例</p><p>描述：28天型男打造，一套适合更多人的全周期，科学化居家健身方案。</p><p>链接：<a href="https://www.alipan.com/s/26De5M5MqWU">https://www.alipan.com/s/26De5M5MqWU</a></p></li><li><p>名称：B站 - 北大钱理群教授讲鲁迅</p><p>描述：著名人文学者钱理群教授关于鲁迅的最新读解，为新一代青年理想主义者开设的鲁迅课。</p><p>链接：<a href="https://www.alipan.com/s/9hdyykHxPuR">https://www.alipan.com/s/9hdyykHxPuR</a></p></li><li><p>名称：B站 - Unity休闲手机游戏开发｜M_Studio - 带源码课件</p><p>描述：从零开始快速入门Unity游戏开发｜完整手机休闲游戏制作教程。</p><p>链接：<a href="https://www.alipan.com/s/KpCGnWhorLM">https://www.alipan.com/s/KpCGnWhorLM</a></p></li><li><p>名称：B站 - 王昱珩：环球博物馆中的自然科学</p><p>描述：“水哥”王昱珩带你在全球13个自然博物馆中学习自然科学。</p><p>链接：<a href="https://www.alipan.com/s/PjzLsVFBX7Q">https://www.alipan.com/s/PjzLsVFBX7Q</a></p></li><li><p>名称：B站 - 范勇鹏：美国的诞生——制度的起源与本质</p><p>描述：社会上流行着关于美国制度的各种故事，从“五月花号”到“山巅之城”，从契约精神到宪政民主。但是，这其中既包含真相，也充斥着虚假。做这门课的初衷，就是想带大家客观认识美国制度，抛掉神话，回归常识理性。</p><p>链接：<a href="https://www.alipan.com/s/1bPMh39sU8b">https://www.alipan.com/s/1bPMh39sU8b</a></p></li><li><p>名称：B站 - 野路子特效课：像P图一样“P”视频</p><p>描述：手把手带你整出百万爆款绝活儿。</p><p>链接：<a href="https://www.alipan.com/s/NomVKBZZFFV">https://www.alipan.com/s/NomVKBZZFFV</a></p></li><li><p>名称：B站 - 代代木动画学院：零基础绘画课程（角色篇）</p><p>描述：本课程由代代木动画学院资深导师亲自授课，从零基础出发，深入剖析角色绘画的精髓。课程内容丰富，涵盖了角色设计、线条勾勒、色彩运用等多个方面，让学员们能够全面掌握角色绘画的技巧和要领。无论是初学者还是有一定绘画基础的爱好者，都能在这里找到适合自己的学习路径。</p><p>链接：<a href="https://pan.quark.cn/s/a2bf5e712e38">https://pan.quark.cn/s/a2bf5e712e38</a></p></li><li><p>名称：B站 - 北大陈连山教授解读宝藏《山海经》</p><p>描述：中华第一部地理志及神话传说大汇编。北大教授陈连山30年+研究成果首次线上系统开讲，全网独家播出。</p><p>链接：<a href="https://pan.quark.cn/s/c2493ddc7eae">https://pan.quark.cn/s/c2493ddc7eae</a></p></li><li><p>名称：B站 - PS异闻录：萌新系统入门课 - 带源码课件</p><p>描述：从零开始的PS系统入门课，3位伙伴用轻松的剧情带你玩转设计！</p><p>链接：<a href="https://pan.quark.cn/s/5fd1ba896b3c">https://pan.quark.cn/s/5fd1ba896b3c</a></p></li><li><p>名称：B站蜗牛学苑UI设计全套教程</p><p>描述：零基础小白转行UI自学必备UI设计全套教程，便于大家从0到1 上手学习，妥妥的技术干货。</p><p>链接：<a href="https://pan.quark.cn/s/1851e092acb2">https://pan.quark.cn/s/1851e092acb2</a></p></li><li><p>名称：B站 - 北师大物理系赵峥教授的宇宙学16讲</p><p>描述：和爱因斯坦、霍金一起漫步宇宙。</p><p>链接：<a href="https://www.alipan.com/s/Lt4vjmdyqSd">https://www.alipan.com/s/Lt4vjmdyqSd</a></p></li><li><p>名称：B站 - 剪辑生意-剪辑师个人ip流量思维与运营策略课</p><p>描述：这是一套只针对于剪辑师，帮助剪辑师做好剪辑生意的ip打造课程。</p><p>链接：<a href="https://www.alipan.com/s/6rT6c6ET3GG">https://www.alipan.com/s/6rT6c6ET3GG</a></p></li><li><p>名称：B站 - 从0开始的PPT高手修神记</p><p>描述：学PPT必看的18节必修课！精准解决你的PPT制作难题！。</p><p>链接：<a href="https://www.alipan.com/s/pxMjd9JEFVh">https://www.alipan.com/s/pxMjd9JEFVh</a></p></li><li><p>资源名称：200个知乎收费LIVE精品内容合集（价值上万元）</p><p><a href="https://www.alipan.com/s/gTDcJgtZhsn">https://www.alipan.com/s/gTDcJgtZhsn</a></p></li><li><p>资源名称：极客时间视频课、专栏课合辑180+</p><p>资源简介：极客时间视频课专栏课</p><p><a href="https://www.alipan.com/s/D6mQ6qvZHoZ">https://www.alipan.com/s/D6mQ6qvZHoZ</a></p></li><li><p>资源名称：B站 - 王无术：10小时刷完考研核心母词990</p><p>资源简介：考试up王无术，带你10小时刷完考研核心高频词汇！</p><p><a href="https://www.alipan.com/s/1zyFKH7Lp6H">https://www.alipan.com/s/1zyFKH7Lp6H</a></p></li><li><p>名称：B站 - 成田电吉他基础入门课 - 带源码课件</p><p>描述：适合零基础小白的电吉他保姆级教程！</p><p>链接：<a href="https://www.alipan.com/s/fpjjB7Fx59B">https://www.alipan.com/s/fpjjB7Fx59B</a></p></li><li><p>名称：B站 - 成田电吉他中级进阶课 - 带源码课件</p><p>描述：适合入门之后希望进阶提高的超实用电吉他技巧课程。</p><p>链接：<a href="https://www.alipan.com/s/Za66iYeTGox">https://www.alipan.com/s/Za66iYeTGox</a></p></li></ul><h2 id="录课分享or致富"><a href="#录课分享or致富" class="headerlink" title="录课分享or致富"></a>录课分享or致富</h2><ul><li><p>名称：零基础学虚拟录课+直播间搭建，普通设备也能玩出高清画质（36节高清课）</p><p>链接：<a href="https://pan.quark.cn/s/1896f204a593">https://pan.quark.cn/s/1896f204a593</a></p></li><li><p>名称：猫和老鼠电影合集</p><p>描述：以闹剧为特色，描绘了一对水火不容的冤家：汤姆和杰瑞猫鼠之间的战争，片中的汤姆经常使用狡诈的诡计来对付杰瑞，而杰瑞则时常利用汤姆诡计中的漏洞逃脱他的迫害并给于报复。</p><p>链接：<a href="https://www.aliyundrive.com/s/fLmmg5mLmEW">https://www.aliyundrive.com/s/fLmmg5mLmEW</a></p></li><li><p>名称：3DS中文游戏全集</p><p>描述：任天堂3DS游戏机中文游戏全集，官中+汉化总计275款，游戏文件为cia格式。有塞尔达、宝可梦、星之卡比等知名游戏。</p><p>链接：<a href="https://www.aliyundrive.com/s/rwVspWfnLi8">https://www.aliyundrive.com/s/rwVspWfnLi8</a></p></li><li><p>名称：吾爱破解2023精华合集（全网唯一，稀有资源）</p><p>描述：随着2023年的“进度条”加载完毕，我们的吾爱破解的2023年度精华、优秀文章荟萃也新鲜出炉！</p><p>今年的《吾爱破解精华集》论坛收到了来自125位同学发布的共计202篇<br>优秀、精华帖（精华帖118篇）。同时还额外收录了15篇春节红包解题活动被官方推荐的未加精华的帖子。每一篇优秀文章的背后都凝结着同学们的辛勤汗水，在此向你们表示崇高的敬意！</p><p>链接：<a href="https://www.alipan.com/s/CEEaLnY6dNc">https://www.alipan.com/s/CEEaLnY6dNc</a></p></li><li><p>名称：天涯神贴去水印纯干货 收藏版</p><p>描述：《天涯神贴》600多篇合集纯干货 要说大神 还得是当年</p><p>链接：<a href="https://pan.quark.cn/s/7a16302ce13d">https://pan.quark.cn/s/7a16302ce13d</a></p></li></ul><h2 id="厨艺"><a href="#厨艺" class="headerlink" title="厨艺"></a>厨艺</h2><ul><li><p>名称：365道名菜制作视频教程</p><p>描述：每天一道美味菜肴，365天不重样，助你成为名副其实的烹饪达人。</p><p>链接：<a href="https://pan.quark.cn/s/c1d149dedb31">https://pan.quark.cn/s/c1d149dedb31</a></p></li></ul><h2 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h2><ul><li><p>名称：末世、穿越者必备知识合集</p><p>描述：包括野外求生、农业和食品加工基础。 掌握基础工业知识，如找矿、制造玻璃、炼铁炼钢等。学习三酸两碱的制备、火药制造及轻武器原理。制造简易电池、发电机，了解电报机原理。拉拢人才、防范他人，保持冷静与理智。此合集涵盖了从基础到进阶的全方位知识，为末世或穿越者提供了全面的生存与发展指南。</p><p>链接：<a href="https://pan.quark.cn/s/0a1b8dc8f86e">https://pan.quark.cn/s/0a1b8dc8f86e</a></p></li><li><p>名称：笔记本台式电脑维修</p><p>描述：电脑维修</p><p>链接：<a href="https://www.alipan.com/s/uvH9VrqZnBj">https://www.alipan.com/s/uvH9VrqZnBj</a></p></li><li><p>要养一个成好习惯：来历不明的软件先放虚拟机测试或在病毒检测网站上扫描一下后，在进行使用。</p><p>这里推荐几个在线扫描病毒网站：</p><ul><li><p>1.VirScan<br><a href="https://www.virscan.org/">https://www.virscan.org/</a></p></li><li><p>2.VirusTotal<br><a href="https://www.virustotal.com/">https://www.virustotal.com/</a></p></li><li><p>3.微步在线云沙箱<br><a href="https://s.threatbook.cn/">https://s.threatbook.cn/</a></p></li><li><p>4.腾讯哈勃分析系统<br><a href="https://habo.qq.com/">https://habo.qq.com/</a></p></li></ul></li></ul><h2 id="训狗"><a href="#训狗" class="headerlink" title="训狗"></a>训狗</h2><ul><li><p>名称：狗狗基本训练技巧视频教程</p><p>描述：训狗技巧</p><p>链接：<a href="https://www.alipan.com/s/ZTJQaLxU8W9">https://www.alipan.com/s/ZTJQaLxU8W9</a></p></li></ul><h2 id="考一些证"><a href="#考一些证" class="headerlink" title="考一些证"></a>考一些证</h2><ul><li><p>名称：科一到科四全套讲解</p><p>描述：零基础教学，助你轻松学车考驾照</p><p>链接：<a href="https://pan.quark.cn/s/efacc26c96e3">https://pan.quark.cn/s/efacc26c96e3</a></p></li><li><p>名称：注册会计师(CPA)课程</p><p>描述：资源比较老了，不过视频和讲义都齐全，六门课都有，需要自取</p><p>链接：<a href="https://www.alipan.com/s/sLjPxJWcP2R">https://www.alipan.com/s/sLjPxJWcP2R</a></p></li><li><p>名称：全国导游证考试课程</p><p>描述：导游证考试相关课程</p><p>链接：<a href="https://pan.quark.cn/s/9a3c85422965">https://pan.quark.cn/s/9a3c85422965</a></p></li><li><p>名称：GRE逻辑题分数提升教程</p><p>描述：本课将为你系统介绍逻辑题的特点及得分要素，再通过不同题型的例题讲解为你全方位展示逻辑题的题目构成及解题思路。7大题型完整覆盖逻辑题重要知识点，为你理清知识脉络，把握考试出题方向，帮助你考前轻松抢分！</p><p>链接：<a href="https://pan.quark.cn/s/78530e371af4">https://pan.quark.cn/s/78530e371af4</a></p></li><li><p>名称：CFA资料网课合集</p><p>描述：特许金融分析师（Chartered Financial Analyst，简称CFA）代表全球投资行业最高水平并受到最高道德标准约束。 CFA是由美国投资管理与研究协会（AIMR）于1963年开始设立的特许金融分析师职业资格认证。其职业考试每年举办两次，是世界上规模最大的职业考试之一，是当今世界证券投资与管理界普遍认可的一种职业称号。 CFA、CMA、USCPA并称为美国财会领域的国际三大黄金认证。</p><p>链接：<a href="https://pan.quark.cn/s/fef590dfcf35">https://pan.quark.cn/s/fef590dfcf35</a></p></li><li><p>名称：2024CPA全科</p><p>描述：椰子全科音频+全科思维导图+高顿芒果会计分录大全+轻4(会计、审计、财管、战略）最后六套、抢分21天</p><p>链接：<a href="https://pan.quark.cn/s/c08c8e6b847b">https://pan.quark.cn/s/c08c8e6b847b</a></p></li><li><p>名称：2024AI赋能高阶课，AI赋能教师高效办公、教学、教研</p><p>描述：2024年AI赋能高阶课专注于提升教师办公、教学和教研效率。课程涵盖AI基础、高效办公技巧、高质量备课、多彩教学及深度教研等内容，通过AI技术助力教师实现个性化教学、智能备课、精准学情分析等功能，提升教学质量与效率，为教育领域注入新活力</p><p>链接：<a href="https://pan.quark.cn/s/74c29f7c389f">https://pan.quark.cn/s/74c29f7c389f</a></p></li></ul><h2 id="考公"><a href="#考公" class="headerlink" title="考公"></a>考公</h2><ul><li><p>名称：抗遗忘计划表</p><p>描述： 内含多种记忆模板，可帮助你在一两月之内快捷高效形成长期记忆，适用于英语四六级、考研单词、以及各种繁杂专业知识的记忆。</p><p>链接：<a href="https://pan.quark.cn/s/4fb49e8d3e2c">https://pan.quark.cn/s/4fb49e8d3e2c</a></p></li><li><p>名称：省考系统班</p><p>描述：FB省考系统班,赶紧下载保存吧！！！</p><p>链接：<a href="https://pan.quark.cn/s/c28825340a3d">https://pan.quark.cn/s/c28825340a3d</a></p></li><li><p>名称：李卜常识2天速成课（系统课精简版）</p><p>描述：公考常识精简课程，包括历史、文化常识、生物常识、物理常识、法律等，附带讲义。</p><p>链接：<a href="https://pan.quark.cn/s/252c63a7f4f4">https://pan.quark.cn/s/252c63a7f4f4</a></p></li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>资源分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>资源</tag>
      
      <tag>分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第四章-操作系统</title>
    <link href="/2024/01/13/system_analyst4/"/>
    <url>/2024/01/13/system_analyst4/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·操作系统</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h4><p>操作系统定义:能有效地组织和管理系统中的各种软&#x2F;硬件资源，合理地组织计算机系统工作流程，控制程序的执行，并且向用户提供一个良好的工作环境和友好的接口。</p><p>操作系统有两个重要的作用:第一，通过资源管理提高计算机系统的效率第二，改善人机界面向用户提供友好的工作环境。</p><p>操作系统的4个特征是并发性、共享性、虚拟性和不确定性</p><p>操作系统的功能:</p><ul><li>(1)进程管理。实质上是对处理机的执行“时间”进行管理采用多道程序等技术将CPU的时间合理地分配给每个任务，主要包括进程控制、进程同步、进程通信和进程调度。</li><li>(2)文件管理。主要包括文件存储空间管理、目录管理、文件的读&#x2F;写管理和存取控制。</li><li>(3)存储管理。存储管理是对主存储器“空间”进行管理，主要包括存储分配与回收、存储保护、地址映射(变换)和主存扩充。</li><li>(4)设备管理。实质是对硬件设备的管理，包括对输入&#x2F;输出设备的分配、启动、完成和回收。</li><li>(5)作业管理。包括任务、界面管理、人机交互、图形界面、语音控制和虚拟现实等。</li></ul><p>操作系统的分类;</p><ul><li>批处理操作系统:单道批处理和多道批处理(主机与外设可并行)</li><li>分时操作系统:一个计算机系统与多个终端设备连接。将CPU 的工作时间划分为许多很短的时间片，轮流为各个终端的用户服务。</li><li>实时操作系统:实时是指计算机对于外来信息能够以足够快的速度进行处理并在被控对象允许的时间范围内做出快速反应。实时系统对交互能力要求不高但要求可靠性有保障。</li><li>网络操作系统:是使联网计算机能方便而有效地共享网络资源，为网络用户提供各种服务的软件和有关协议的集合。三种模式:<br>集中模式、客户端&#x2F;服务器模式、对等模式。</li><li>分布式操作系统:分布式计算机系统是由多个分散的计算机经连接而成的计算机系统，系统中的计算机无主、次之分，任意两台计算机可以通过通信交换信息。</li><li>微型计算机操作系统:简称微机操作系统，常用的有Windaws、Mac os.LinuX。</li></ul><p>嵌入式操作系统主要特点:</p><ul><li>(1)微型化。从性能和成本角度考虑，希望占用的资源和系统代码量少，如内存少、字长短、运行速度有限、能源少(用微小型电池)</li><li>(2)可定制。从减少成本和缩短研发周期考虑，要求嵌入式操作系统能运行在不同的微处理器平台上，能针对硬件变化进行结构与功能上的配置，以满足不<br>同应用需要。</li><li>(3)实时性。嵌入式操作系统主要应用于过程控制、数据采集、传输通信、多媒体信息及关键要害领域需要迅速响应的场合，所以对实时性要求较高。</li><li>(4)可靠性。系统构件、模块和体系结构必须达到应有的可靠性，对关键要害应用还要提供容错和防故障措施。</li><li>(5)易移植性。为了提高系统的易移植性，通常采用硬件抽象层和板级支撑包的底层设计技术</li></ul><p>嵌入式系统初始化过程按照自底向上、从硬件到软件的次序依次为:片级初始化&gt;板级初始化&gt;系统初始化。</p><h4 id="进程组成和状态"><a href="#进程组成和状态" class="headerlink" title="进程组成和状态"></a>进程组成和状态</h4><p>进程的组成:进程控制块PCB(唯一标志)、程序(描述进程要做什么)、数据(存放进程执行时所需数据）。</p><p>进程基础的状态是三态图。</p><p>进程资源图。</p><h4 id="前趋图"><a href="#前趋图" class="headerlink" title="前趋图"></a>前趋图</h4><h4 id="进程同步与互斥"><a href="#进程同步与互斥" class="headerlink" title="进程同步与互斥"></a>进程同步与互斥</h4><p>临界资源:各进程间需要以互斥方式对其进行访问的资源</p><p>临界区:指进程中对临界资源实施操作的那段程序。本质是一段程序代码。</p><p>互斥:某资源 (即临界资源)在同一时间内只能由一个任务单独使用，使用时需要加锁，使用完后解锁才能被其他任务使用;如打印机。</p><p>同步:多个任务可以并发执行，只不过有速度上的差异，在一定情况下停下等待，不存在资源是否单独或共享的问题;如自行车和汽车。</p><p>互斥信号量:对临界资源采用互斥访问，使用互斥信号量后其他进程无法访问，初值为1。</p><p>同步信号量:对共享资源的访问控制，初值一般是共享资源的数量</p><p>PV操作必考。</p><h4 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h4><p>进程调度方式是指当有更高优先级的进程到来时如何分配CPU。分为可剥夺和不可剥夺两种，可剥夺指当有更高优先级进程到来时，强行将正在运行进程的CPU分配给高优先级进程;不可剥夺是指高优先级进程必须等待当前进程自动释放CPU。</p><p>在某些操作系统中，一个作业从提交到完成需要经历高、中、低三级调度</p><ol><li><p>高级调度。高级调度又称“长调度”“作业调度”或“接纳调度”它决定处于输入池中的哪个后备作业可以调入主系统做好运行的准备，成为一个或组就绪进程。在系统中一个作业只需经过一次高级调度。</p></li><li><p>中级调度。中级调度又称“中程调度”或“对换调度”，它决定处于交换区中的哪个就绪进程可以调入内存，以便直接参与对CPU 的竞争。</p></li><li><p>低级调度。低级调度又称“短程调度”或“进程调度”，它决定处于内存中的哪个就绪进程可以占用CPU，低级调度是操作系统中最活跃、最重要的调度程序，对系统的影响很大</p></li></ol><p>调度算法:</p><ul><li>先来先服务FCFS:先到达的进程优先分配CPU。用于宏观调度</li><li>时间片轮转:分配给每个进程CPU时间片，轮流使用CPU，每个进程时间片大小相同，很公平，用于微观调度</li><li>优先级调度:每个进程都拥有一个优先级，优先级大的先分配CPU。</li><li>多级反馈调度:<br>时间片轮转和优先级调度结合而成，设置多个就绪队列每个队列分别赋予不同的优先级，分配不同的时间片长度，新进程先1.2,3…n,进入队列1的末尾，按FCFS原则，执行队列1的时间片;若末能执行完进程，则转入队列2的末尾，如此重复。</li></ul><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>当一个进程在等待永远不可能发生的事件时，就会产生死锁，若系统中有多个进程处于死锁状态，就会造成系统死锁。</p><p>死锁产生的四个必要条件:</p><ul><li>资源互斥</li><li>每个进程占有资源并等待其他资源</li><li>系统不能剥夺进程资源</li><li>进程资源图是一个环路</li></ul><p>死锁产生后解决措施是打破四大条件，有下列方法</p><ul><li>死锁预防：采用某种策略限制并发进程对于资源的请求，破坏死锁产生的四个条件之一，使系统任何时刻都不满足死锁的条件。</li><li>死锁避免:<br>一般采用银行家算法来避免，银行家算法，就是提前计算出一条不会死锁的资源分配方法，才分配资源，否则不分配资源，相当于借贷，考虑对方还得起才借钱，提前考虑好以后，就可以避免死锁。</li><li>死锁检测:<br>允许死锁产生，但系统定时运行一个检测死锁的程序，若检测到系统中发生死锁，则设法加以解除。</li><li>死锁解除:<br>即死锁发生后的解除方法，如强制剥夺资源，撤销进程等</li><li>死锁资源计算:<br>系统内有n个进程，每个进程都需要R个资源，那么其发生死锁的最大资源数为n*(R-1)。其不发生死锁的最小资源数为n*(R-1)+1。</li></ul><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><p>传统的进程有两个属性:可拥有资源的独立单位;可独立调度和分配的基本单位。</p><p>引入线程的原因是进程在创建、撤销和切换中，系统必须为之付出较大的时空开销，故在系统中设置的进程数目不宜过多，进程切换的频率不宜太高，这就限制了并发程度的提高。引入线程后，将传统进程的两个基本属性分开，线程作为调度和分配的基本单位，进程作为独立分配资源的单位。用户可以通过创建线程来完成任务，以减少程序并发执行时付出的时空开销。</p><p>线程是进程中的一个实体，是被系统独立分配和调度的基本单位。线程基本上不拥有资源，只拥有一点运行中必不可少的资源(<br>如程序计数器一组寄存器和栈)，它可与同属一个进程的其他线程共享进程所拥有的全部资源，例如进程的公共数据、全局变量、代码、文件等资源，但不能共享线程独有的资源如线程的栈指针等标识数据。</p><h3 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h3><h4 id="分区存储管理"><a href="#分区存储管理" class="headerlink" title="分区存储管理"></a>分区存储管理</h4><p>所谓分区存储组织，就是整存将某进程运行所需的内存整体一起分配给它然后再执行。有三种分区方式</p><p>固定分区:静态分区方法，将主存分为若千个固定的分区，将要运行的作业装配进去，由于分区固定，大小和作业需要的大小不同，会产生内部碎片。</p><p>可变分区:<br>动态分区方法，主存空间的分区是在作业转入时划分，正好划分为作业需要的大小，这样就不存在内部碎片，但容易将整片主存空间切割成许多块，会产生外部碎片。可变分区的算法如下:</p><p>首次适应法:按内存地址顺序从头查找，找到第一个&gt;&#x3D;9K空间的空闲块，即切割9K空间分配给进程。</p><p>最佳适应法:将内存中所有空闲内存块按从小到大排序，找到第一个&gt;<br>&#x3D;9K空间的空闲块，切割分配，这个将会找到与9K空间大小最相近的空闲块。</p><p>最差适应法:<br>和最佳适应法相反，将内存中空闲块空间最大的，切割9K空间分配给进程，这是为了预防系统中产生过多的细小空闲块。</p><p>循环首次适应法:<br>按内存地址顺序查找，找到第一个&gt;&#x3D;9K空间的空闲块，而后若还需分配，则找下一个，不用每次都从头查找，这是与首次适应法不同的地方。</p><p>可重定位分区:可以解决碎片问题，移动所有已经分配好的区域，使其成为个连续的区域，这样其他外部细小的分区碎片可以合并为大的分区，满足作业要求。只在外部作业请求空间得不到满足时进行。</p><h4 id="分页存储管理"><a href="#分页存储管理" class="headerlink" title="分页存储管理"></a>分页存储管理</h4><p>逻辑页分为页号和页内地址，页内地址就是物理偏移地址，而页号与物理块号并非按序对应的，需要查询页表，才能得知页号对应的物理块号，再用物理块号加上偏移地址才得出了真正运行时的物理地址。</p><p>优点:<br>利用率高，碎片小，分配及管理简单</p><p>缺点:增加了系统开销，可能产生抖动现象</p><h4 id="分段存储管理"><a href="#分段存储管理" class="headerlink" title="分段存储管理"></a>分段存储管理</h4><p>页面置换算法</p><ul><li>最优算法:OPT，理论上的算法无法实现，是在进程执行完后进行的最佳效率计算，用来让其他算法比较差距。原理是选择未来最长时间内不被访问的页面置换，这样可以保证未来执行的都是马上要访问的。</li><li>先进先出算法:FIFO，先调入内存的页先被置换淘汰，会产生抖动现象，即分配的页数越多，缺页率可能越多(即效率越低)</li><li>最近最少使用:LRU，在最近的过去，进程执行过程中，过去最少使用的页面被置换淘汰，根据局部性原理，这种方式效率高，且不会产生抖动现象，使用大量计数器，但是没有LFU多。</li><li>淘汰原则:优先淘汰最近未访问的，而后淘汰最近未被修改的页面</li></ul><p>快表是一块小容量的相联存储器，由快速存储器组成，按内容访问，速度快，并且可以从硬件上保证按内容并行查找，一般用来存放当前访问最频繁的少数活动页面的页号。</p><p>快表是将页表存于cache中;慢表是将页表存于内存上。慢表需要访问两次内存才能取出页，而快表是访问一次Cache和一次内存，因此更快。</p><h4 id="段页式存储管理"><a href="#段页式存储管理" class="headerlink" title="段页式存储管理"></a>段页式存储管理</h4><p>将进程空间分为一个个段，每段也有段号和段内地址，与页式存储不同的是每段物理大小不同，分段是根据逻辑整体分段的，因此，段表也与页表的内容不同，页表中直接是逻辑页号对应物理块号，而下图所示，段表有段长和基址两个属性，才能确定一个逻辑段在物理段中的位置。</p><h3 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h3><h4 id="设备管理概述"><a href="#设备管理概述" class="headerlink" title="设备管理概述"></a>设备管理概述</h4><p>设备是计算机系统与外界交互的工具，具体负责计算机与外部的输入&#x2F;输出工作所以常称为外部设备(简称外设)<br>。在计算机系统中，将负责管理设备和输入&#x2F;输出的机构称为I&#x2F;0 系统。因此，i&#x2F;0 系统由设备、控制器、通道(具有通道的计算机系统)、总线和&#x2F;0<br>软件组成</p><p>设备的分类:按数据组织分类:块设备、字符设备。按照设备功能分类:<br>输入设备、输出设备、存储设备网络联网设备、供电设备。资源分配角度分类:独占设备共享设备和虚拟设备数据传输速率分类低速设备中速设备、高速设备</p><p>设备管理的任务是保证在多道程序环境下，当多个进程竞争使用设备时，按一定的策略分配和管理各种设备，控制设备的各种操作，完成I&#x2F;0<br>设备与主存之间的数据交换。</p><p>设备管理的主要功能是动态地掌握并记录设备的状态、设备分配和释放、缓冲区管理、实现物理1&#x2F;0 设备的操作、提供设备使用的用户接口及设备的访问和控制</p><h4 id="I-O软件"><a href="#I-O软件" class="headerlink" title="I&#x2F;O软件"></a>I&#x2F;O软件</h4><p>I&#x2F;O设备管理软件的所有层次及每一层功能。</p><p>实例:当用户程序试图读一个硬盘文件时，需要通过操作系统实现这一操作与设备无关软件检查高速缓存中有无要读的数据块，若没有，则调用设备驱动程序，向i&#x2F;0<br>硬件发出一个请求。然后，用户进程阻塞并等待磁盘操作的完成。当磁盘操作完成时，硬件产生一个中断，转入中断处理程序。中断处理程序检查中断的原因，认识到这时磁盘读取操作已经完成，于是唤醒用户进程取回从磁盘读取的信息，从而结束此次i&#x2F;0<br>请求。用户进程在得到了所需的硬盘文件内容之，后继续运行。</p><h4 id="设备管理技术"><a href="#设备管理技术" class="headerlink" title="设备管理技术"></a>设备管理技术</h4><p>一台独占设备，在同一时间只能由一个进程使用，其他进程只能等待，且不知道什么时候打印机空闲，此时，极大的浪费了外设的工作效率。引入SPOOLING (<br>外围设备联机操作)<br>技术，就是在外设上建立两个数据缓冲区，分别称为输入井和输出井，这样，无论多少进程，都可以共用这一台打印机，只需要将打印命令发出，数据就会排队存储在缓冲区中，打印机会自动按顺序打印，实现了物理外设的共享，使得每个进程都感觉在使用一个打印机，这就是物理设备的虚拟化。</p><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h4 id="文件管理概述"><a href="#文件管理概述" class="headerlink" title="文件管理概述"></a>文件管理概述</h4><p>文件是具有符号名的、在逻辑上具有完整意义的一组相关信息项的集合。信息项是构成文件内容的基本单位，可以是一个字符，也可以是一个记录记录可以等长，也可以不等长。一个文件包括文件体和文件说明。文件体是文件真实的内容。文件说明是操作系统为了管理文件所用到的信息，包括文件名文件内部标识、文件的类型、文件存储地址、文件的长度、访问权限、建立时间和访问时间等。文件管理系统，就是操作系统中实现文件统一管理的一组软件和相关数据的集合，专门负责管理和存取文件信息的软件机构，简称文件系统。文件系统的功能包括按名存取;统一的用户接口;并发访问和控制;安全性控制，优化性能;差错恢复。</p><p>文件的类型</p><ul><li>(1)按文件性质和用途可将文件分为系统文件、库文件和用户文件</li><li>(2)按信息保存期限分类可将文件分为临时文件、档案文件和永久文件</li><li>(3)<br>按文件的保护方式分类可将文件分为只读文件、读&#x2F;写文件、可执行文件和不保护文件。</li><li>(4) UNIX系统将文件分为普通文件、目录文件和设备文件(特殊文件)</li></ul><p>文件的逻辑结构可分为两大类:有结构的记录式文件;无结构的流式文件</p><p>文件的物理结构是指文件在物理存储设备上的存放方法，包括:</p><ul><li>(1)连续结构。连续结构也称顺序结构，它将逻辑上连续的文件信息 (如记录)<br>依次存放在连续编号的物理块上。</li><li>(2)链接结构。链接结构也称串联结构，它是将逻辑上连续的文件信息 (如记录)<br>存放在不连续的物理块上，每个物理块设有一个指针指向下一个物理块。</li><li>(3)索引结构。将逻辑上连续的文件信息(如记录)<br>存放在不连续的物理块中系统为每个文件建立一张索引表。索引表记录了文件信息所在的逻辑块号对应的物理块号，并将索引表的起始地址放在与文件对应的文件目录项中</li><li>(4)多个物理块的索引表。索引表是在文件创建时由系统自动建立的，并与文件一起存放在同一文件卷上。根据一个文件大小的不同，其索引表占用物理块的个数不等，一般占一个或几个物理块。</li></ul><h4 id="索引文件结构"><a href="#索引文件结构" class="headerlink" title="索引文件结构"></a>索引文件结构</h4><p>如图所示，系统中有13个索引节点，0-9为直接索引，即每个索引节点存放的是内容，假设每个物理盘大小为4KB，共可存4KB*10&#x3D;10KB数据</p><p>10号索引节点为一级间接索引节点，大小为4KB，存放的并非直接数据，而是链接到直接物理盘块的地址，假设每个地址占4B，则共有1024个地址，对应1024个物理盘，可存1024*<br>4KB&#x3D;4098KB数据</p><p>二级索引节点类似，直接盘存放一级地址，一级地址再存放物理盘快地址，而后链接到存放数据的物理盘块，容量又扩大了一个数量级，为1024<br><em>1024</em>4KB数据</p><h4 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h4><p>文件控制块中包含以下三类信息:基本信息类、存取控制信息类和使用信息类。</p><ul><li>(1)基本信息类。例如文件名、文件的物理地址、文件长度和文件块数等</li><li>(2)存取控制信息类。文件的存取权限，像UNIX用户分成文件主、同组用户和一般用户三类，这三类用户的读&#x2F;写执行RWX权限。</li><li>(3)使用信息类。文件建立日期、最后一次修改日期、最后一次访问的日期、当前使用的信息(如打开文件的进程数在文件上的等待队列)<br>等文件控制块的有序集合称为文件目录<br>相对路径:是从当前路径开始的路径绝对路径:是从根目录开始的路径。全文件名&#x3D;绝对路径+文件名。要注意，绝对路径和相对路径是不加最后的文件名的，只是单纯的路径序列。</li></ul><h4 id="文件存储空间管理"><a href="#文件存储空间管理" class="headerlink" title="文件存储空间管理"></a>文件存储空间管理</h4><p>文件的存取方法是指读&#x2F;写文件存储器上的一个物理块的方法。通常有顺序存取和随机存取两种方法。顺序存取方法是指对文件中的信息按顺序依次进行读写;随机存取方法是指对文件中的信息可以按任意的次序随机地读&#x2F;写。</p><p>文件存储空间的管理:</p><ul><li>(1)空闲区表。将外存空间上的一个连续的未分配区域称为“空闲区”。操作系统为磁盘外存上的所有空闲区建立一张空闲表，每个表项对应一个空闲区适用于连续文件结构。</li><li>(2)位示图:这种方法是在外存上建立一张位示图(Bitmap)记录文件存储20器的使用情况。每一位对应文件存储器上的一个物理块，取值0<br>和1 分别表示空闲和占用。</li><li>(3)<br>空闲块链。每个空闲物理块中有指向下一个空闲物理块的指针，所有空闲物理块构成一个链表，链表的头指针放在文件存储器的特定位置上(<br>如管理块中)，不需要磁盘分配表，节省空间。</li><li>(4)成组链接法。例如，在实现时系统将空闲块分成若干组，每100个空闲块为一组，每组的第一个空闲块登记了下一组空闲块的物理盘块号和空闲块总数假如某个组的第一个空闲块号等于0，意味着该组是最后一组，无下一组空闲块。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第五章-数据库技术</title>
    <link href="/2024/01/13/system_analyst5/"/>
    <url>/2024/01/13/system_analyst5/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·数据库技术</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h3><p>数据:是数据库中存储的基本对象，是描述事物的符号记录。</p><p>数据的种类:文本、图形、图像、音频、视频、学生的档案记录、货物的运输 情况等</p><p>数据库DB:是长期存储在计算机内、有组织的、可共享的大量数据的集合。</p><p>数据库的基本特征:</p><ul><li>数据按一定的数据模型组织、描述和存储;</li><li>可为各种用户共享;</li><li>冗余度较小;</li><li>数据独立性较高易扩展。</li></ul><h4 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h4><p>数据库系统DBS:是一个采用了数据库技术，有组织地、动态地存储大量相关数据，方便多用户访问的计算机系统。其由下面四个部分组成:</p><ul><li>数据库(统一管理、长期存储在计算机内的，有组织的相关数据的集合)</li><li>硬件(构成计算机系统包括存储数据所需的外部设备)</li><li>软件(操作系统、数据库管理系统及应用程序)</li><li>人员(系统分析和数据库设计人员、应用程序员、最终用户、数据库管理员DBA)</li></ul><p>数据库管理系统DBMS的功能</p><ul><li>实现对共享数据有效的组织、管理和存取。</li><li>包括数据定义、数据库操作、数据库运行管理、数据的存储管理、数据库的建立和维护等，</li></ul><h4 id="三级模式-两级映像"><a href="#三级模式-两级映像" class="headerlink" title="三级模式-两级映像"></a>三级模式-两级映像</h4><ul><li><p>内模式:管理如何存储物理的数据，对应具体物理存储文件。</p></li><li><p>模式:又称为概念模式，就是我们通常使用的基本表，根据应用、需求将物理数据划分成一张张表。</p></li><li><p>外模式:对应数据库中的视图这个级别，将表进行一定的处理后再提供给用户使用</p></li><li><p>外模式一模式映像:是表和视图之间的映射，存在于概念级和外部级之间，若表中数据发生了修改，只需要修改此映射，而无需修改应用程序。</p></li><li><p>模式一内模式映像:是表和数据的物理存储之间的映射，存在于概念级和内部级之间，若修改了数据存储方式，只需要修改此映射，而不需要去修改应用程序。</p></li></ul><h4 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h4><p>需求分析:即分析数据存储的要求，产出物有数据流图数据字典、需求说明书，</p><p>概念结构设计:就是设计E-R图，也即实体-属性图，与物理实现无关，说明有哪些实体，实体有哪些属性。</p><p>逻辑结构设计:将E-R图，转换成关系模式，也即转换成实际的表和表中的列属性，这里要考虑很多规范化的东西。</p><p>物理设计:根据生成的表等概念，生成物理数据库</p><h4 id="E-R模型"><a href="#E-R模型" class="headerlink" title="E-R模型"></a>E-R模型</h4><p>用E-R图来描述概念数据模型，世界是由一组称作实体的基本对象和这些对象之间的联系构成的。</p><p>在E-R模型中，使用椭圆表示属性一般没有)、长方形表示实体、菱形表示。</p><p>实体:客观存在并可相互区别的事物。可以是具体的人、事、物或抽象概念如人、汽车、图书、账户、贷款。</p><p>弱实体和强实体:弱实体依赖于强实体的存在而存在。</p><p>实体集:具有相同类型和共享相同属性的实体的集合，如学生、课程。</p><p>属性:实体所具有的特性◆属性分类:简单属性和复合属性;单值属性和多值属性;NULL属性;派生属性。</p><p>域:属性的取值范围称为该属性的域。</p><p>码(key):唯一标识实体的属性集。</p><p>联系:现实世界中事物内部以及事物之间的联系，在E-R图中反映为实体内部的联系和实体之间的联系。</p><p>联系类型:一对一1:1、一对多1:N、多对多M:N。</p><p>E-R模型转换为关系模型:每个实体都对应一个关系模式;联系分为三种</p><ul><li>1:1联系中，联系可以放到任意的两端实体中，作为一个属性(要保证1:1的两端关联)，也可以转换为一个单独的关系模式;</li><li>1:N的联系中，联系可以单独作为一个关系模式，也可以在N端中加入1端实体的主键;</li><li>M:N的联系中，联系必须作为一个单独的关系模式，其主键是M和N端的联合主键。</li></ul><h4 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h4><p>关系模型是二维表的形式表示的实体-联系模型，是将实体-联系模型转换而来的，经过开发人员设计的;</p><p>概念模型是从用户的角度进行建模的，是现实世界到信息世界的第一抽象是真正的实体-联系模型。</p><p>网状模型表示实体类型及其实体之间的联系，一个事物和另外几个都有联系形成一张网。</p><p>面向对象模型是采用面向对象的方法设计数据库，以对象为单位，每个对象包括属性和方法，具有类和继承等特点。</p><p>数据模型三要素:数据结构(所研究的对象类型的集合)、数据操作(对数据库中各种对象的实例允许执行的操作的集合)、数据的约束条件(<br>一组完整性规则的集合)。</p><p>关系模型中数据的逻辑结构是一张二维表，由行列组成。用表格结构表达实体集，用外键标识实体间的联系。</p><ul><li>优点:建立在严格的数学概念基础上;概念单一、结构简单、清晰，用户易懂易用;存取路径对用户透明，从而数据独立性、安全性好，简化数据库开发工作。</li><li>缺点:由于存取路径透明，查询效率往往不如非关系数据模型。</li></ul><h4 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h4><p>并:结果是两张表中所有记录数合并，相同记录只显示一次</p><p>交:结果是两张表中相同的记录。</p><p>差:S1-S2，结果是S1表中有而S2表中没有的那些记录</p><p>笛卡尔积:S1<br><em>S2，产生的结果包括S1和S2的所有属性列，并且S1中每条记录依次和S2中所有记录组合成一条记录，最终属性列为S1+S2属性列，记录数为S1</em><br>S2记录数。</p><p>投影:实际是按条件选择某关系模式中的某列，列也可以用数字表示。</p><p>自然连接的结果显示全部的属性列，但是相同属性列只显示一次，显示两个关系模式中属性相同且值相同的记录。</p><h3 id="规范化和并发控制"><a href="#规范化和并发控制" class="headerlink" title="规范化和并发控制"></a>规范化和并发控制</h3><h4 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h4><p>给定一个X，能唯一确定一个Y，就称X确定Y，或者说依赖于X，例如Y&#x3D;X*X函数。</p><p>函数依赖又可扩展以下两种规则:</p><ul><li>部分函数依赖:A可确定C，(A,B)也可确定C，(A,B)中的一部分(即A)可以确定C，称为部分函数依赖。</li><li>传递函数依赖:当A和B不等价时，A可确定B，B可确定C，则A可确定C，是传递函数依赖;若A和B等价，则不存在传递，直接就可确定C。</li></ul><p><strong>函数依赖的公理系统(Armstrong)</strong></p><p>设关系模式R&lt;U,F&gt;,U是关系模式R的属性全集，F是关系模式R的一个函数依赖集。对于R&lt;U，F&gt;来说有以下的:</p><ul><li>自反律:若YCXCU，则X→Y为F所逻辑蕴含</li><li>增广律:若X-&gt;Y为F所逻辑蕴含，且ZSU，则XZ-YZ为F所逻辑蕴含传递律:若X-&gt;y和Y-Z为F所逻辑蕴含，则X-&gt;Z为F所逻辑蕴含</li><li>合并规则:若X-&gt;Y，X-Z，则X→&gt;YZ为F所蕴涵</li><li>伪传递率:若X→Y，WY-&gt;Z，则XW→Z为F所蕴涵</li><li>分解规则:若X→Y，ZSY，则X→Z为F所蕴涵</li></ul><h4 id="键与约束"><a href="#键与约束" class="headerlink" title="键与约束"></a>键与约束</h4><p>超键:能唯一标识此表的属性的组合。</p><p>候选键:超键中去掉冗余的属性，剩余的属性就是候选键。</p><p>主键:任选一个候选键，即可作为主键。</p><p>外键:其他表中的主键。</p><p>主属性:候选键内的属性为主属性，其他属性为非主属性。</p><p>实体完整性约束:即主键约束。主键值不能为空，也不能重复。</p><p>参照完整性约束:即外键约束，外键必须是其他表中已经存在的主键的值或者为空。</p><p>用户自定义完整性约束:自自定义表达式约束，如设定年龄属性的值必须在0到150之间。</p><h4 id="范式模式分解"><a href="#范式模式分解" class="headerlink" title="范式模式分解"></a>范式模式分解</h4><p>范式之间的转换一般都是通过拆分属性，即模式分解，将具有部分函数依赖和传递依赖的属性分离出来，来达到一步步优化，一般分为以下两种:</p><p>保持函数依赖分解对于关系模式R，有依赖集F，若对R进行分解，分解出来的多个关系模式，保持原来的依赖集不变，则为保持函数依赖的分解。另外，注意要消除掉冗余依赖(<br>如传递依赖)0</p><p>实例:设原关系模式R(A,B,C)，依赖集F(A-&gt;B,B-&gt;C,A-&gt;C)，将其分解为两个关系模式R1(A,B)和R2(B,C)，此时R1中保持依赖A-&gt;<br>B，R2保持依赖B-&gt;C，说明分解后的R1和R2是保持函数依赖的分解，因为A-&gt;C这个函数依赖实际是一个冗余依赖，可以由前两个依赖传递得到，因此不需要管</p><p>保持函数依赖的判断(补充，第2点不强求)1、如果F上的每一个函数依赖都在其分解后的某一个关系上成立，则这个分解是保持依赖的(<br>这是一个充分条件)<br>。也即我们课堂上说的简单方法，看函数每个依赖的左右两边属性是否都在同一个分解的模式中。</p><p>2、如果上述判断失败，并不能断言分解不是保持依赖的，还要使用下面的通用方法来做进一步判断。</p><p>该方法的表述如下: 不常用，不收录了。</p><p>无损分解:分解后的关系模式能够还原出原关系模式，就是无损分解，不能还原就是有损。</p><p>当分解为两个关系模式，可以通过以下定理判断是否无损分解:</p><p>定理:如果R的分解为p&#x3D;{R1，R2}，F为R所满足的函数依赖集合，分解p具有无损连接性的充分必要条件是R1nR2-&gt;(R1-R2)或者R1nR2-&gt;(<br>R2-R1)。</p><p>当分解为三个及以上关系模式时，可以通过表格法求解。</p><h4 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h4><p>速记：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">第一范式(1NF)<br>非码的非平凡 | ↓ 消除非主属性对码的部分函数依赖<br>第二范式(2NF)<br>↓ 消除非主属性对码的传递函数依赖<br>第三范式(3NF)<br>↓ 消除主属性对码的部分和传递函数依赖<br>BC范式(BCNF)<br>↓ 消除非平凡且非函数依赖的多值依赖<br>第四范式(4NF)<br>↓消除不是由候选码所蕴含的连接依赖<br>第五范式(5NF)<br></code></pre></td></tr></table></figure><p>第一范式1NF：关系中的每一个分量必须是一个不可分的数据项。通俗地说，第一范式就是表中不允许有小表的存在。</p><p>第二范式：如果关系R属于1NF，且每一个非主属性完全函数依赖于任何一个候选码，则R属于2NF。通俗地说，2NF就是在1NF的基础上，表中的每一个非主属性不会依赖复合主键中的某一个列。</p><p>第三范式：在满足1NF的基础上，表中不存在非主属性对码的传递依赖。</p><p>BC范式BCNF：是指在第三范式的基础上进一步消除主属性对于码的部分函数依赖和传递依赖。◆通俗的来说，就是在每一种情况下，每一个依赖的左边决定因素都必然包含候选键。</p><h4 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h4><p>事务:由一系列操作组成，这些操作，要么全做，要么全不做，拥有四种特性，详解如下:</p><ul><li>(操作)原子性:要么全做，要么全不做。</li><li>(数据)一致性:事务发生后数据是一致的，例如银行转账，不会存在A账户转出，但是B账户没收到的情况。</li><li>(执行)隔离性:任一事务的更新操作直到其成功提交的整个过程对其他事务都是不可见的，不同事务之间是隔离的，互不干涉。</li><li>(改变)持续性:事务操作的结果是持续性的。</li></ul><p>事务是并发控制的前提条件，并发控制就是控制不同的事务并发执行，提高系统效率，但是并发控制中存在下面三个问题:</p><ul><li>丢失更新:事务1对数据A进行了修改并写回，事务2也对A进行了修改并写回此时事务2写回的数据会覆盖事务1写回的数据，就丢失了事务1对A的更新。即对数据A的更新会被覆盖。</li><li>不可重复读:事务2读A，而后事务1对数据A进行了修改并写回，此时若事务2再读A，发现数据不对。即一个事务重复读A两次，会发现数据A有误。</li><li>读脏数据:事务1对数据A进行了修改后，事务2读数据A，而后事务1回滚，数据A恢复了原来的值，那么事务2对数据A做的事是无效的，读到了脏数据。</li></ul><h4 id="封锁协议"><a href="#封锁协议" class="headerlink" title="封锁协议"></a>封锁协议</h4><p>X锁是排它锁(写锁)</p><ul><li>若事务T对数据对象A加上X锁，则只允许T读取和修改其他事务都不能再对A加任何类型的锁，直到T释放A上的锁。</li></ul><p>S锁是共享锁(读锁)</p><ul><li>若事务T对数据对象A加上S锁，则只允许T读取A，但不能修改A，其他事务只能再对A加S锁(也即能读不能修改)，直到T释放A上的S锁。</li></ul><p>共分为三级封锁协议，如下</p><ul><li>1级封锁协议:事务在修改数据R之前必须先对其加X锁，直到事务结束才释放。可解决丢失更新问题。</li><li>二级封锁协议:一级封锁协议的基础上加上事务T在读数据R之前必须先对其加S锁，读完后即可释放S锁。 可解决丢失更新、读脏数据问题</li><li>三级封锁协议:一级封锁协议加上事务T在读取数据R之前先对其加S锁，直到事务结束才释放。可解决丢失更新、读脏数据、数据重复读问题</li></ul><h3 id="数据库新技术"><a href="#数据库新技术" class="headerlink" title="数据库新技术"></a>数据库新技术</h3><h4 id="数据库安全"><a href="#数据库安全" class="headerlink" title="数据库安全"></a>数据库安全</h4><p>用户标识和鉴定、存取控制、密码存储和传输、视图保护、审计</p><table><thead><tr><th>故障关系</th><th>故障原因</th><th>解决方法</th></tr></thead><tbody><tr><td>事务本身的可预期故障</td><td>本身逻辑</td><td>在程序中预先设置Rollback语句</td></tr><tr><td>事务本身的不可预期故障</td><td>算术溢出、违反存储保护</td><td>由DBMS的恢复子系统通过日志，撤消事务对数据库的修改，回退到事务初始状态</td></tr><tr><td>系统故障</td><td>系统停止运转</td><td>通常使用检查点法</td></tr><tr><td>介质故障</td><td>外存被破坏</td><td>一般使用日志重做业务</td></tr></tbody></table><p>静态转储:即冷备份，指在转储期间不允许对数据库进行任何存取、修改操作优点是非常快速的备份方法、容易归档(直接物理复制操作)<br>缺点是只能提供到某一时间点上的恢复，不能做其他工作，不能按表或按用户恢 复。</p><p>动态转储:<br>即热备份，在转储期间允许对数据库进行存取、修改操作，因此转储和用户事务可并发执行;优点是可在表空间或数据库文件级备份，数据库扔可使用，可达到秒级恢复:<br>缺点是不能出错，否则后果严重，若热备份不成功，所得结果几乎全部无效。</p><p>完全备份:备份所有数据。</p><p>差量备份:仅备份上一次完全备份之后变化的数据:</p><p>增量备份:备份上一次备份之后变化的数据。</p><p>日志文件:在事务处理过程中，DBMS把事务开始、事务结束以及对数据库的插入、删除和修改的每一次操作写入日志文件。一旦发生故障，DBMS的恢复子系统利用日志文件撤销事务对数据库的改变，回退到事务的初始状态。</p><h4 id="分布式数据库"><a href="#分布式数据库" class="headerlink" title="分布式数据库"></a>分布式数据库</h4><p>局部数据库位于不同的物理位置，使用一个全局DBMS将所有局部数据库联网管理，这就是分布式数据库。</p><p>分片模式</p><ul><li>水平分片:将表中水平的记录分别存放在不同的地方</li><li>垂直分片:将表中的垂直的列值分别存放在不同的地方。</li></ul><p>分布透明性</p><ul><li>分片透明性:用户或应用程序不需要知道逻辑上访问的表具体是如何分块存储的。</li><li>位置透明性:应用程序不关心数据存储物理位置的改变</li><li>逻辑透明性:用户或应用程序无需知道局部使用的是哪种数据模型。</li><li>复制透明性:用户或应用程序不关心复制的数据从何而来</li></ul><h4 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h4><p>数据仓库是一个面向主题的、集成的、非易失的、且随时间变化的数据集合，用于支持管理决策。</p><p>面向主题:按照一定的主题域进行组织的。</p><p>集成的:数据仓库中的数据是在对原有分散的数据库数据抽取、清理的基础上经过系统加工、汇总和整理得到的，必须消除源数据中的不一致性，以保证数据仓库内的信息是关于整个企业的一致的全局信息</p><p>相对稳定的:数据仓库的数据主要供企业决策分析之用，所涉及的数据操作主要是数据查询，一旦某个数据进入数据仓库以后，一般情况下将被长期保留，也就是数据仓库中一般有大量的查询操作，但修改和删除操作很少，通常只需要定期的加载、刷新。</p><p>反映历史变化:数据仓库中的数据通常包含历史信息，系统记录了企业从过去某一时点(如开始应用数据仓库的时点)<br>到目前的各个阶段的信息，通过这些信息，可以对企业的发展历程和未来趋势做出定量分析和预测。</p><p>数据仓库的结构通常包含四个层次</p><ol><li>数据源:是数据仓库系统的基础，是整个系统的数据源泉。</li><li>数据的存储与管理:是整个数据仓库系统的核心。</li><li>0LAP(联机分析处理)服务器:对分析需要的数据进行有效集成，按多维模型组织，以便进行多角度、多层次的分析，并发现趋势。</li><li>前端工具:主要包括各种报表工具、查询工具、数据分析工具、数据挖掘工具以及各种基于数据仓库或数据集市的应用开发工具。</li></ol><p>BI系统主要包括数据预处理、建立数据仓库、数据分析和数据展现四个主要阶段。</p><ul><li>数据预处理是整合企业原始数据的第一步，它包括数据的抽取(Extraction)、转换(Transformation)和加载(Load)三个过程(ETL过程);</li><li>建立数据仓库则是处理海量数据的基础</li><li>数据分析是体现系统智能的关键，一般采用联机分析处理(0LAP)<br>和数据挖掘两大技术。联机分析处理不仅进行数据汇总&#x2F;聚集，同时还提供切片、切块下钻、上卷和旋转等数据分析功能，用户可以方便地对海量数据进行多维分析。数据挖掘的目标则是挖掘数据背后隐藏的知识，通过关联分析、聚类和分类等方法建立分析模型，预测企业未来发展趋势和将要面临的问题;</li><li>在海量数据和分析手段增多的情况下，数据展现则主要保障系统分析结果的可视化。</li></ul><h4 id="反规范化技术"><a href="#反规范化技术" class="headerlink" title="反规范化技术"></a>反规范化技术</h4><p>反规范化技术:规范化设计后，数据库设计者希望牺牲部分规范化来提高性能</p><p>采用反规范化技术的益处:降低连接操作的需求、降低外码和索引的数目，还可能减少表的数目，能够提高查询效率。</p><p>可能带来的问题:</p><ul><li>数据的重复存储，浪费了磁盘空间;</li><li>可能出现数据的完整性问题，为了保障数据 的一致性，增加了数据维护的复杂性，会降低修改速度</li></ul><p>具体方法:</p><ol><li>增加冗余列:在多个表中保留相同的列，通过增加数据冗余减少或避免查询时的连接操作。</li><li>增加派生列:在表中增加可以由本表或其它表中数据计算生成的列，减少查询时的连接操作并避免计算或使用集合函数。</li><li>重新组表:<br>如果许多用户需要查看两个表连接出来的结果数据，则把这两个<br>表重新组成一个表来减少连接而提高性能。</li><li>水平分割表:<br>根据一列或多列数据的值，把数据放到多个独立的表中，主要用于表数据规模很大、表中数据相对独立或数据需要存放到多个介质上时使用。(</li><li>垂直分割表:对表进行分割，将主键与部分列放到一个表中，主键与其它列放到另一个表中，在查询时减少I&#x2F;0次数。</li></ol><h4 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h4><p>特点:大量化、多样化、价值密度低、快速化。<br>要处理大数据，一般使用集成平台，称为大数据处理系统，其特征为:<br>高度可扩展性、高性能、高度容错、支持异构环境、较短的分析延迟、易用且开放的接口、较低成本、向下兼容性。</p><h4 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h4><p>略。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理-408-存储系统</title>
    <link href="/2024/01/09/system_arch3/"/>
    <url>/2024/01/09/system_arch3/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于 <code>408机组</code> 备考经验相关的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>学过一些计算机基础课，<code>计算机体系结构</code>、<code>计算机网络</code>、<code>操作系统</code>、<code>数据架构</code>、<code>软件工程</code>、<code>UML建模</code>等，23 年下半年考的<code>软考中级·软件设计师</code>，学过用过近十几门编程语言。有算法竞赛经验，但是很菜。编程能力个人感觉较差，理论能力一般。</p><p>本章需要一定的基础。</p><h2 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h2><h3 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>天勤 408</li><li>王道 408</li><li>计组-软硬件接口</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
      <tag>408</tag>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF</title>
    <link href="/2024/01/09/ctf1/"/>
    <url>/2024/01/09/ctf1/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>CTF</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p><img src="/../images/img.png" alt="img.png"></p><p>&#x2F;bin<br>    放置的是在单人维护模式下还能够被操作的指令。在&#x2F;bin底下的指令可以被root与一般账号所使用</p><p>&#x2F;boot<br>    这个目录主要在放置开机会使用到的文件，包括Linux核心文件以及开机选单与开机所需配置文件等。</p><p>&#x2F;dev<br>在Linux系统上，任何装置与接口设备都是以文件的型态存在于这个目录当中的。</p><p>&#x2F;etc<br>系统主要的配置文件几乎都放置在这个目录内，例如人员的账号密码文件、各种服务的启始档等</p><p>&#x2F;home<br>这是系统默认的用户家目录(home directory)。</p><p>&#x2F;lib<br>放置的则是在开机时会用到的函式库，以及在&#x2F;bin或&#x2F;sbin底下的指令会呼叫的函式库</p><p>&#x2F;media<br>media底下放置的是可移除的装置,包括软盘、光盘、DVD等等装置都暂时挂载于此</p><p>&#x2F;opt<br>给第三方协力软件放置的目录</p><p>&#x2F;root<br>系统管理员(root)的家目录</p><p>&#x2F;sbin<br>放在&#x2F;sbin底下的为开机过程中所需要的，里面包括了开机、修复、还原系统所需要的指令</p><p>&#x2F;srv<br>srv可以视为 [service] 的缩写，是一些网络服务启动之后，这些服务所需要取用的数据目录。</p><p>&#x2F;tmp<br>这是让一般使用者或者是正在执行的程序暂时放置文件的地方</p><p>&#x2F;usr&#x2F;lib<br>包含各应用软件的函式库、目标文件(object file)，以及不被一般使用者惯用的执行档或脚本(script)。</p><p>&#x2F;usr&#x2F;local<br>系统管理员在本机自行安装自己下载的软件(非distribution默认提供者)，建议安装到此目录，这样会比较便于管理。</p><p>&#x2F;var&#x2F;lib<br>程序本身执行的过程中，需要使用到的数据文件放置的目录</p><p>&#x2F;var&#x2F;log(重要)<br>登录文件放置的目录,里面比较重要的文件如&#x2F;var&#x2F;log&#x2F;messages,&#x2F;var&#x2F;log&#x2F;wtmp(记录登入者的信息)等。</p><p>&#x2F;etc&#x2F;init.d&#x2F;<br>所有服务的预设启动 script 都是放在这里的</p><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>&#x2F;etc&#x2F;passwd</p><ul><li>test:x:501:501:test user:&#x2F;home&#x2F;test:&#x2F;bin&#x2F;bash</li><li>用户名：密码：UID：GID：用户全名：家目录：shell<br><img src="/../images/img_1.png" alt="img_1.png"></li></ul><p>&#x2F;etc&#x2F;shadow</p><p>密码有效期</p><h3 id="linux安全配置"><a href="#linux安全配置" class="headerlink" title="linux安全配置"></a>linux安全配置</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>人民银行培训</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>比赛</tag>
      
      <tag>考证</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA日志专辑</title>
    <link href="/2024/01/06/java_log/"/>
    <url>/2024/01/06/java_log/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>Java日志</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p><code>Java日志</code>是Java开发中非常重要的组件，它可以帮助我们快速定位问题，也可以帮助我们快速定位问题。</p><p>先来点直接的。</p><p>推荐使用log日志输出调试信息而不要使用System.out.println()方法，主要是因为println()使用了同步锁，会影响程序的并发性能和系统的吞吐量。</p><h2 id="日志的分类"><a href="#日志的分类" class="headerlink" title="日志的分类"></a>日志的分类</h2><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><ul><li>错误级别：ERROR</li><li>警告级别：WARN</li><li>信息级别：INFO</li><li>调试级别：DEBUG</li><li>跟踪级别：TRACE</li></ul><p><strong>强制：打印日志判断级别</strong></p><p>目的是为了，支持动态修改日志级别，以及环境区分。dev&#x2F;test环境可能会打印大量info用于开发测试调试，线上并不需要这些日志。或者线上出问题了，动态修改日志级别，再去打印此类日志。</p><p>线上分析工具，<code>Arthas</code>支持动态修改日志级别，以及更多操作。<a href="https://arthas.aliyun.com/doc/">Arthas</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (log.isErrorEnabled()) &#123;<br>    log.error(<span class="hljs-string">&quot;log.......&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (log.isWarnEnabled()) &#123;<br>    log.warn(<span class="hljs-string">&quot;log.......&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (log.isInfoEnabled()) &#123;<br>    log.info(<span class="hljs-string">&quot;log.......&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>    log.debug(<span class="hljs-string">&quot;log.......&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (log.isTraceEnabled()) &#123;<br>    log.trace(<span class="hljs-string">&quot;log.......&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="日志类型"><a href="#日志类型" class="headerlink" title="日志类型"></a>日志类型</h3><ul><li>系统日志：系统日志是指系统运行过程中的日志，比如系统启动，系统关闭等。</li><li>应用日志：应用日志是指应用运行过程中的日志，比如用户登录，用户操作等。</li><li>访问日志：访问日志是指用户访问系统的日志，比如用户访问的页面，用户访问的接口等。</li></ul><h3 id="好的日志习惯"><a href="#好的日志习惯" class="headerlink" title="好的日志习惯"></a>好的日志习惯</h3><ul><li>日志格式统一</li><li>日志文件大小拆分策略</li><li>不打无用日志</li><li>关键信息提到最前</li><li>敏感信息和日期</li><li>用好 debug 级别</li><li>用好切面日志</li></ul><p>优化日志的输出格式</p><p>官网对这几类模式的说明中反复强调了会影响性能。如果使用了如下属性输出，将极大的损耗性能：</p><p>比如 log4j官网</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">%</span><span class="language-bash">C or <span class="hljs-variable">$class</span>, %F or %file, %l or %location, %L or %line, %M or %method</span><br></code></pre></td></tr></table></figure><h3 id="Java日志框架总览"><a href="#Java日志框架总览" class="headerlink" title="Java日志框架总览"></a>Java日志框架总览</h3><p>理解日志库需要从下面三个角度去理解：</p><ul><li>最重要的一点是 区分日志系统和日志门面;</li><li>其次是日志库的使用, 包含配置与API使用；配置侧重于日志系统的配置，API使用侧重于日志门面；</li><li>最后是选型，改造和最佳实践等</li></ul><h3 id="日志的艺术"><a href="#日志的艺术" class="headerlink" title="日志的艺术"></a>日志的艺术</h3><p>理解日志并不是一件容易的事，开发人员在编写代码之时往往会纠结在某处打印的日志是不是有意义的，而 SRE 在面对缺少日志的生产问题时往往一筹莫展，Ops<br>在对面海量日志时往往需要花费更多的精力来维护，而项目的实际管理者在面对毫无实际业务价值的日志时，往往不想花费太多的人力和财力去管理它。</p><p>因此，在开发应用程序时遵循良好的实践，在收集管理日志时选用成熟的方案，往往能让这些矛盾得以缓解，这也就有了这一篇的分享。</p><h4 id="矛盾的开始"><a href="#矛盾的开始" class="headerlink" title="矛盾的开始"></a>矛盾的开始</h4><p>首先介绍的是为什么需要记录日志，日志的作用。其实关于日志的作用无需介绍太多，因为大多数的开发人员在调试代码问题时，解决不同环境的<br>Bug<br>时都有很明确的感受以及强烈的需求。日志作为调试的助手，生产环境的救星。笔者只见过嫌弃日志打的太少的，几乎没有见过嫌弃日志打的太多的开发和运维人员。通过查询日志的方式来确定代码的分支走向，API是否请求正确，核心业务的数据是否正确，是否有错误的堆栈信息，这些都构成开发和运维人员判断代码和生产问题的第一手段。笔者难以想象如果一个复杂庞大的系统没有记录任何日志，该如何排查生产环境的<br>Bug。</p><p>如果有如此强烈的需求，那每一行代码都打日志来记录上下文不就行了吗？这样无论什么环境有什么代码有问题，通过搜索日志都可以排查出来。理论上这样确实可行，但是有一些问题目前无法解决，一是日志存储量的问题，常见的中大型系统日志大概在<br>TB 级，超大型系统的日志大概在 PB 级，根据 Cloudflare提供的数据，它每秒大概处理 4 千万的请求，这对于存储的费用来讲是一个巨大的挑战。二是搜索的性能下降，像<br>Elasticsearch 数据库这类常见的日志存储方案，海量的日志会导致其所维护的映射关系爆炸式增长，即使划分不同的 Index，分布式管理不同的<br>ElasticSearch 集群，也很难做到搜索性能不随数据量的增加而下降。三是海量日志的生成会在峰期时拖慢系统性能，增大出故障的风险。</p><p>所以综上可以得出最简单的结论，即日志既不能打印太多导致存储和管理日志太难，也不应该因为打印太少导致运维人员无法排查问题，这听起来自相矛盾，但这就是关于日志的艺术！</p><ul><li>场景一<ul><li>某工程师在调查生产环境中某个创建资源的 API 性能较低问题时，发现是由于该 API 在保存资源前做了写 INFO<br>级别的日志，将资源对象都写到日志中，由于资源的对象属性很多，所以导致在业务峰期时，代码打印出海量日志，耗尽Buffer区内存，从而拖慢主线程，造成服务性能整体下降。因此该工程师将该业务日志打印操作删除，以降低生产环境磁盘<br>IO 损耗，解决性能问题。</li><li>但是某天由于修改了该 API 服务调用链路上的某服务代码，导致该 API 创建出来的对象有错误，并且由于缺少了生产环境保存该资源时的日志，无法排查出是<br>API 的请求参数有问题，还是后续的计算逻辑有问题。这时我们只能重新修改日志级别，重新构建发布上线吗？</li></ul></li><li>场景二<ul><li>假设将生产环境的日志设置为 ERROR 级别。某一时刻，依赖的下游服务故障，导致请求大量超时。又由于在业务峰期 QPS<br>非常高的时期，短时间内集中产生大量的错误日志，导致磁盘IO急剧提高，耗费大量CPU，进而导致整个服务瘫痪。我们应该如何处理？</li></ul></li><li>场景三<ul><li>某工程师在排查生产问题时，发现 INFO 级别的日志还无法满足排查 Root Cause，有一个 DEBUG 日志级别的日志是他需要的，但是生产环境只有<br>INFO 级别，这时只能修改级别然后重新启动服务吗？</li></ul></li></ul><h4 id="日志级别规范与动态调整"><a href="#日志级别规范与动态调整" class="headerlink" title="日志级别规范与动态调整"></a>日志级别规范与动态调整</h4><p>解决以上问题的方法，一是需要我们在项目中，明确日志级别的规范，不为了调试方便和减少存储随意使用日志级别。二是给日志级别加上动态调整的功能。也就是需要解决线上问题时，调低线上日志输出级别，获取全面的Debug日志，帮助工程师提高定位问题的效率。在生产日志海量增加拖慢服务性能时，调高线上日志输出级别，减少日志的生成，缓解磁盘<br>IO 压力和提高服务性能。</p><p>以下是对于日志级别给出的建议：</p><ul><li>TRACE：应该在开发期间使用它来追踪错误，但永远不要提交到版本控制系统（VCS）中。</li><li>DEBUG：记录程序中发生的任何事情。主要在调试期间使用，建议在进入生产阶段之前缩减调试语句的数量，只留下最有意义的条目，并可以在故障排除期间激活。</li><li>INFO：记录所有由用户驱动的事件或特定于系统的操作（例如定期计划操作）。</li><li>WARN：此级别记录所有可能成为错误的事件。例如，如果一个数据库调用花费的时间超过预定义的时间，或者如果内存缓存接近容量。这将允许适当的自动警报，并在故障排除期间允许更好地了解系统在故障之前的行为方式。</li><li>ERROR：在此级别记录每个错误条件。这可以是返回错误或内部错误条件的 API 调用。</li><li>FATAL：代表整个服务已经无法工作。请非常节制地使用这个级别。通常此级别记录表示程序的结束。</li></ul><h4 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h4><ul><li>什么时候记录日志<ul><li>什么时候记录日志并没有标准规范，需要开发人员根据业务和代码来自行判断，除了常规的记录事件，例如进行了哪些操作、发生了与预期不符的情况、运行期间出现未能处理的异常或警告、定期自动执行的任务外。笔者还建议在以下场景加上日志：</li></ul></li><li>在调用第三方系统时，将调用 API 的 URL 带上 Request&#x2F;Response Body<br>和异常都记录到日志。原因是当发生故障时，能够有明确且清晰的的日志报告说明故障原因，减少不同系统服务运维人员或者不同公司之间的责任界定，以更顺畅的方式推动问题的解决。</li><li>在重要核心业务的关键代码和分支加上日志，例如 if-then-else<br>语句，它可以帮助开发人员了解程序是否根据其当前状态遍历了预期路径。并且由于核心业务的数据普遍难以手动复现，了解代码分支的走向至关重要。</li><li>核心业务的审计日志，如果某业务和法律或合同具有关联性，给对应的操作加上审计日志是非常有必要的。并且存储日志要求强一致性数据库。</li><li>应用服务启动时输出配置信息。初始化配置的逻辑一般只会执行一次，不便于诊断时复现，所以应该输出到日志中。</li></ul><h4 id="日志属性"><a href="#日志属性" class="headerlink" title="日志属性"></a>日志属性</h4><p>除了在日志常规需要打印的 log level，timestamp，message，exception 和 stack trace 外，排查问题往往还需要其它的字段来帮助定位和查找<br>Root Cause，常见的额外字段有以下几种：</p><ul><li>trace id 即服务链路追踪的唯一 ID。在请求进入到系统 7 层网关时，即在 HTTP header 中加上对应请求整个生命周期唯一的 trace<br>id，并随着该请求调用一直携带。当请求链路过长，开发人员难以找到完整的请求日志时，trace id 有助于反向查找完整日志。</li><li>span id 即表示 trac id 生命周期中拆分的单个操作。例如当请求到达每个服务后，服务都会为请求生成 spanid，第一个 spanid 称之为<br>root span，而随请求一起从上游传过来的 spanid 会被记录成 pspanid (parent-spanid)。当前服务生成的 spanid<br>随着请求一起再传到下游服务时，这个spanid 又会被下游服务当做 pspanid 记录。由此 span id 有助于当服务调用复杂时还原出整个请求的调用链路视图。</li><li>user id 即用户的唯一 ID。确保当用户上报 Issue 或者提交 TIcket 的时候，可以根据当前用户的唯一 ID 直接查询对应错误日志，减少干扰项，缩短排查周期。</li><li>tenant_id 这是租户 ID（如果存在）。对多租户系统非常有帮助</li><li>request uri 即当前微服务请求 URI (用户一个业务操作可能对应着多个服务不同的 request uri)，当某业务出现问题时，通过该业务对应入口的<br>request uri 往往能很快拿到 trac id，再通过 trac id 去查找对应请求的日志往往能很快解决问题。</li><li>application name 即当前微服务名称。有助于识别哪个服务生成了此日志，也有助于通过 application name 过滤日志，查询服务整体故障。</li><li>pod name 即当前请求所在的 k8s 资源 Pod 名称（如果存在）。目前大多数微服务使用 k8s 来完成容器编排，打印 pod name 有助于当某个<br>pod 故障时，重启或者 Kill Pod。</li><li>host name 即当前请求所在的机器名称。即使使用 k8s 托管微服务，也会出现由于 k8s 集群所在的某台机器出现磁盘或者网络故障时，服务无法正常工作的情况，打印<br>host name 有助于排查问题最后一公里，即由于机器硬件问题导致故障。</li></ul><h4 id="日志-Sec"><a href="#日志-Sec" class="headerlink" title="日志 Sec"></a>日志 Sec</h4><p>日志需要保证日志框架的安全和敏感信息处理。框架安全指的是使用成熟的，经过大量生产环境验证的日志框架库，而非自己造轮子。敏感信息处理是大部分公司的生命线，请牢记日志的安全性和合规性要求：</p><ul><li>不要泄露敏感的个人身份信息 (PII)。</li><li>不要泄露加密密钥或秘密。</li><li>确保公司的隐私政策涵盖日志数据。</li><li>确保日志提供商满足合规性需求。</li><li>确保满足数据存储时间要求。</li></ul><h4 id="bad-smell"><a href="#bad-smell" class="headerlink" title="bad smell"></a>bad smell</h4><ul><li>使用中文或者非英文打印日志。<ul><li>英文表示日志将以 ASCII 字符记录。这一点特别重要，因为像中文经过一系列处理后，它可能因为字符集或者编码集最终无法正确呈现。</li><li>英文自带分词效果，像使用 ElasticSearch 这类倒排索引存储引擎存储日志，中文日志不仅需要添加专门的分词器，并且存储和查询效果不如英文。</li></ul></li><li>没有上下文的日志。类似直接打印 Transaction failed 或者 User operation succeeds<br>这类日志。因为在写代码时通过代码上下文能够理解日志消息，但是当阅读日志本身时，这个上下文不存在，这些消息可能无法理解。</li><li>将打印日志的操作放在循环当中。除非特定需求，否则打印出来的日志不仅难以阅读和查找，还会耗费大量存储资源。</li><li>引用慢操作数据，如果当前上下文中没有打印日志需要的数据，需要调用远程服务或者从数据库获取，又或者通过大量计算，那应该先考虑这项信息放到日志中是不是必要且恰当的。</li></ul><h4 id="日志-visible"><a href="#日志-visible" class="headerlink" title="日志 visible"></a>日志 visible</h4><p>最近十年因为微服务和云原生的相继崛起，收集存储和分析日志领域发生了重大的变化。早期我们无需进行日志的收集，当时将单体服务的所有日志存储在文件当中，使用<br>tail、grep、awk 来从日志中挖掘信息。但是在系统日益复杂的今天，这种方式已经无法满足我们的需求。为了应对日益复杂的日志管理需求，开源社区和工业界也发展出一些列的方案，例如最为流行的<br>Elastic Stack 开源解决方案，云厂商提供的一站式解决方案像 AWS DataDog 和 Azure Dynatrace。</p><p>无论使用哪种方案，日志管理都已经不再是一个简单的话题。在我们有明确感知的打印日志和查询分析日志之间，还包含着对日志进行收集、缓冲、聚合、加工、索引、存储等若干个步骤，并且每一步都蕴含着艰难曲折。</p><h4 id="日志-collection"><a href="#日志-collection" class="headerlink" title="日志 collection"></a>日志 collection</h4><p>最早我们使用 Elastic Stack 中的 Logstash 来进行日志的收集和加工。系统中不同的服务通过使用 tcp&#x2F;udp 的协议，主动发送请求将日志推送到<br>Logstash 中，接着 Logstash 将日志进行转换加工(数据结构化)和输出。这种模式维持了很长一段时间，但是它也有比较严重的缺陷，那就是<br>Logstash 与它的插件是基于 JRuby 编写的，要跑在单独的 Java 虚拟机进程上，默认的堆大小就到了<br>1GB。如果需要部署成千上万个日志收集器，那么这种方案就显得太过沉重。所以后来 Elastic.co 公司使用 Golang<br>重写了一个功能较少，却更轻量高效的日志收集器 Filebeat 才缓解了这一矛盾。</p><p>除此之外 Fluentd 通常是配合 Kubernetes 时的首选开源日志收集器。它是 Kubernetes 原生的，可以使用 DaemonSet 的方式部署与<br>Kubernetes 无缝集成。它允许从不同的地方像 Kubernetes 集群、MySQL、Apache2 等收集日志，并解析发送到所需位置如<br>Elasticsearch、Amazon S3 等。Fluentd 用 Ruby 编写的，在低容量下运行良好，但当需要增加节点和应用程序的数量时，也会有会性能问题。</p><p>最后在日志收集时，有可能会因为业务峰期生成海量日志，影响服务稳定性和造成日志丢失。在这种情况下，我们还需要在 Logstash<br>或者存储日志数据库前加上一道缓冲层。在较小规模的系统中 Redis streams 是一个较好的选择，如果面对的规模更大的数据，那么 Kafka<br>集群或者云厂商提供的消息队列解决方案将是不二之选。</p><h4 id="日志-struct"><a href="#日志-struct" class="headerlink" title="日志 struct"></a>日志 struct</h4><p>在收集完日志后，我们还需要进行结构化的处理。因为日志是非结构化数据，一行日志中通常会包含多项信息，如果不做处理，那只能以全文检索的原始方式去使用日志，这样既不利于统计对比，也不利于条件过滤。像下面这一行是<br>Nginx 服务器的 Access Log。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">10.209.21.28 - - [04/Mar/2023:18:12:11 +0800] &quot;GET /index.html HTTP/1.1&quot; 200 1314 &quot;https://guangzhengli.com&quot; Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36<br></code></pre></td></tr></table></figure><p>尽管我们已经习惯了默认的 Nginx 格式，但上面的示例仍然难以阅读和处理。我们可以通过 Logstash 或者其它工具将它转换成结构化的数据，例如<br>JSON 格式。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;RemoteIp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10.209.21.28&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;RemoteUser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;Datetime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;04/Mar/2023:10:49:21 +0800&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;Method&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;GET&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;URL&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/index.html&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;Protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HTTP/1.1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;Status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;Size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1314</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;Refer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://guangzhengli.com&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;Agent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>经过结构化后，例如像 ElasticSearch 这类倒排索引数据库可以针对不同的数据项建立索引，进行查询统计、聚合等操作。</p><p>除此之外还有一种工业界的做法像 Splunk 推荐将字段变为 key-value 对的形式放在同一个大的规范日志行中(logfmt)，如将 Nginx<br>日志作为规范日志行将变成如下这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">remote-ip=10.209.21.28 remote-user=null datetime=&quot;04/Mar/2023:10:49:21 +0800&quot; method=GET url=/index.html protocol=HTTP/1.1 status=200 size=1314 refer=https://guangzhengli.com agent=&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&quot;<br></code></pre></td></tr></table></figure><p>这类数据经过 Splunk 存储后，可以通过使用内置的查询语言进行检索，像使用 method&#x3D;get status&#x3D;500 查询所有返回 500 响应的 GET<br>方法。使用 method&#x3D;get method&#x3D;get status&#x3D;500 earliest&#x3D;-7d | timechart count 查询语句得到过去 7 天返回 500 响应的 GET<br>方法总数量和图表。</p><p>日志的存储与查询<br>经过日志的数据结构化后，可以将数据存入数据库中并进行查询分析。在选择使用什么方案来存储和分析之前，我们先来看看日志数据的特点。</p><ul><li>日志是写入密集型的，超过 99% 的日志写入后不会被查询使用。</li><li>日志是标准的时间流数据，需要顺序写入，存储到数据库后，不会再进行修改变动。</li><li>日志是具有时效性的，一般只需要最近一段时间的日志来查询分析或者排查故障，一段时间以后会被保留策略清除或者归档。</li><li>日志是半结构化的，尽管我们将所有应用服务的日志都进行结构化，还是还包含系统日志，网络日志等日志，它们字段各不相同。</li><li>查询日志依赖全文检索和即席查询（Ad-hoc search）。</li><li>查询日志不要求日志具有强时效性，但是也无法接受按小时甚至按天的延时。</li></ul><p><img src="https://at-luo-fu-web-img.oss-cn-hangzhou.aliyuncs.com/hexo/javalog/dev-package-log-6.png" alt="总览"></p><h2 id="日志框架-日志系统"><a href="#日志框架-日志系统" class="headerlink" title="日志框架-日志系统"></a>日志框架-日志系统</h2><p>目前SpringBoot目前支持4种类型的日志，分别是JDK内置的Log(JavaLoggingSystem)以及Log4j(Log4JLoggingSystem)、Log4j2(<br>Log4J2LoggingSystem)以及Logback(LogbackLoggingSystem).</p><p>LoggingSystem是个抽象类，内部有这几个方法：</p><ul><li>beforeInitialize方法：日志系统初始化之前需要处理的事情。抽象方法，不同的日志架构进行不同的处理</li><li>initialize方法：初始化日志系统。默认不进行任何处理，需子类进行初始化工作</li><li>cleanUp方法：日志系统的清除工作。默认不进行任何处理，需子类进行清除工作</li><li>getShutdownHandler方法：返回一个Runnable用于当jvm退出的时候处理日志系统关闭后需要进行的操作，默认返回null，也就是什么都不做</li><li>setLogLevel方法：抽象方法，用于设置对应logger的级别</li></ul><p>SpringBoot在启动时，会完成LoggingSystem的初始化，这部分代码是在LoggingApplicationListener中实现的</p><p>有了LoggingSystem以后，我们就可以通过他的setLogLevel方法来动态的修改日志级别。他帮我们屏蔽掉了底层的具体日志框架。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> LoggingSystem loggingSystem;<br><br>在 setLoggerLevel 方法内根据获取的loglevel 进行修改就行了。具体参考实现类。<br><br>如果需要支持动态日志级别，可以做监听器，监听日志等级变更，然后去动态修改。<br><br>Arthas 也支持 线上动态修改。<br></code></pre></td></tr></table></figure><h3 id="java-util-logging-JUL"><a href="#java-util-logging-JUL" class="headerlink" title="java.util.logging (JUL)"></a>java.util.logging (JUL)</h3><p>JDK1.4 开始，通过 java.util.logging 提供日志功能。虽然是官方自带的log lib，JUL的使用确不广泛。</p><p>主要原因:JUL从JDK1.4 才开始加入(2002年)，当时各种第三方log<br>lib已经被广泛使用了JUL早期存在性能问题，到JDK1.5上才有了不错的进步，但现在和Logback&#x2F;Log4j2相比还是有所不如JUL的功能不如Logback&#x2F;Log4j2等完善，比如Output<br>Handler就没有Logback&#x2F;Log4j2的丰富，有时候需要自己来继承定制，又比如默认没有从ClassPath里加载配置文件的功能</p><h3 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h3><p>Log4j 是 apache 的一个开源项目，创始人 Ceki Gulcu。</p><p>Log4j 应该说是 Java 领域资格最老，应用最广的日志工具。Log4j<br>是高度可配置的，并可通过在运行时的外部文件配置。它根据记录的优先级别，并提供机制，以指示记录信息到许多的目的地，诸如：数据库，文件，控制台，UNIX<br>系统日志等。Log4j 中有三个主要组成部分：</p><ul><li>loggers - 负责捕获记录信息。</li><li>appenders - 负责发布日志信息，以不同的首选目的地。</li><li>layouts - 负责格式化不同风格的日志信息。</li><li>官网地址：<a href="http://logging.apache.org/log4j/2.x/">http://logging.apache.org/log4j/2.x/</a></li></ul><p>Log4j 的短板在于性能，在Logback 和 Log4j2 出来之后，Log4j的使用也减少了。</p><h3 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h3><p>Logback 是由 log4j 创始人 Ceki Gulcu 设计的又一个开源日志组件，是作为 Log4j 的继承者来开发的，提供了性能更好的实现，异步<br>logger，Filter等更多的特性。</p><p>logback 当前分成三个模块：logback-core、logback-classic 和 logback-access。</p><ul><li>logback-core - 是其它两个模块的基础模块。</li><li>logback-classic - 是 log4j 的一个 改良版本。此外 logback-classic 完整实现 SLF4J API 使你可以很方便地更换成其它日志系统如<br>log4j 或 JDK14 Logging。</li><li>logback-access - 访问模块与 Servlet 容器集成提供通过 Http 来访问日志的功能。</li></ul><p>官网地址: <a href="http://logback.qos.ch/">http://logback.qos.ch/</a></p><h3 id="Log4j2"><a href="#Log4j2" class="headerlink" title="Log4j2"></a>Log4j2</h3><p>维护 Log4j 的人为了性能又搞出了 Log4j2。Log4j2 和 Log4j1.x 并不兼容，设计上很大程度上模仿了<br>SLF4J&#x2F;Logback，性能上也获得了很大的提升。Log4j2 也做了 Facade&#x2F;Implementation 分离的设计，分成了 log4j-api 和 log4j-core。<br>官网地址: <a href="http://logging.apache.org/log4j/2.x/">http://logging.apache.org/log4j/2.x/</a></p><h3 id="Log4j-vs-Logback-vs-Log4j2"><a href="#Log4j-vs-Logback-vs-Log4j2" class="headerlink" title="Log4j vs Logback vs Log4j2"></a>Log4j vs Logback vs Log4j2</h3><p>从性能上Log4J2要强，但从生态上Logback+SLF4J优先</p><h3 id="为什么禁止工程师直接使用日志系统中的-API"><a href="#为什么禁止工程师直接使用日志系统中的-API" class="headerlink" title="为什么禁止工程师直接使用日志系统中的 API"></a>为什么禁止工程师直接使用日志系统中的 API</h3><ul><li>使用门面日志系统，解耦。</li><li>门面模式针对日志系统做了优化性的封装</li></ul><h2 id="门面型日志框架"><a href="#门面型日志框架" class="headerlink" title="门面型日志框架"></a>门面型日志框架</h2><p>最常见的<code>门面模式/外观模式</code>应用场景，面试被问设计模式再也不害怕啦！</p><h3 id="JCL"><a href="#JCL" class="headerlink" title="JCL"></a>JCL</h3><p>Jakarta Commons-logging</p><p>他是apache开源的对jdk log进行封装的log组件，是一套Java日志接口。他可以配合log4j.不需要强依赖他们。松耦合的状态。</p><ol><li>首先去找配置文件commons-logging.properties，找不到的情况那么默认Log的实现类。</li><li>找到是否有其他的组件库比如log4j</li><li>找不到用jdk的原生</li><li>找不到结合commons-logging自己提供这个日志实现类</li></ol><p>官网地址: <a href="http://commons.apache.org/proper/commons-logging/">http://commons.apache.org/proper/commons-logging/</a></p><h3 id="Sel4j"><a href="#Sel4j" class="headerlink" title="Sel4j"></a>Sel4j</h3><p>Simple Logging Facade for Java，缩写Slf4j。是一套简易Java日志门面，本身并无日志的实现。</p><p>已经有log 组件了，为什么还要再开发一套新的组件?</p><ul><li>log打印的时候支持通配符</li><li>封装的比较完整</li><li>速度比较快</li><li>不会影响gc</li><li>支持异步不影响业务设计的比较清晰</li></ul><p>官网地址: <a href="http://www.slf4j.org/">http://www.slf4j.org/</a></p><p>细节差异：</p><ul><li>Log4j 提供 TRACE, DEBUG, INFO, WARN, ERROR 及 FATAL 六种纪录等级，但是 SLF4J 认为 ERROR 与 FATAL 并没有实质上的差别，所以拿掉了<br>FATAL 等级，只剩下其他五种。</li><li>大部分人在程序里面会去写logger.error(exception),其实这个时候Log4j会去把这个exception tostring。真正的写法应该是logger(<br>message.exception);而SLF4J就不会使得程序员犯这个错误。</li><li>Log4j间接的在鼓励程序员使用string相加的写法（这种写法是有性能问题的），而SLF4J就不会有这个问题<br>,你可以使用logger.error(“{} is+serviceid”,serviceid);</li><li>SLF4J 只支持 MDC，不支持 NDC。</li></ul><h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><h3 id="日志打点API绑定实现"><a href="#日志打点API绑定实现" class="headerlink" title="日志打点API绑定实现"></a>日志打点API绑定实现</h3><p>slf4j-api和log4j-api都是接口，不提供具体实现，理论上基于这两种api输出的日志可以绑定到很多的日志实现上。slf4j和log4j2也确实提供了很多的绑定器。简单列举几种可能的绑定链：</p><ul><li>slf4j → logback</li><li>slf4j → slf4j-log4j12 → log4j</li><li>slf4j → log4j-slf4j-impl → log4j2</li><li>slf4j → slf4j-jdk14 → jul</li><li>slf4j → slf4j-jcl → jcl</li><li>jcl → jul</li><li>jcl → log4j</li><li>log4j2-api → log4j2-cor</li><li>log4j2-api → log4j-to-slf4j → slf4j</li></ul><p><img src="https://at-luo-fu-web-img.oss-cn-hangzhou.aliyuncs.com/hexo/javalog/log.png" alt="环图"></p><h3 id="对Java日志组件选型的建议"><a href="#对Java日志组件选型的建议" class="headerlink" title="对Java日志组件选型的建议"></a>对Java日志组件选型的建议</h3><p>slf4j已经成为了Java日志组件的明星选手，可以完美替代JCL，使用JCL桥接库也能完美兼容一切使用JCL作为日志门面的类库，现在的新系统已经没有不使用slf4j作为日志API的理由了。日志记录服务方面，log4j在功能上输于logback和log4j2，在性能方面log4j2则全面超越log4j和logback。所以新系统应该在logback和log4j2中做出选择，对于性能有很高要求的系统，应优先考虑log4j2</p><h3 id="对日志架构使用比较好的实践"><a href="#对日志架构使用比较好的实践" class="headerlink" title="对日志架构使用比较好的实践"></a>对日志架构使用比较好的实践</h3><p>总是使用Log Facade，而不是具体Log Implementation</p><p>正如之前所说的，使用 Log Facade 可以方便的切换具体的日志实现。而且，如果依赖多个项目，使用了不同的Log Facade，还可以方便的通过<br>Adapter 转接到同一个实现上。如果依赖项目使用了多个不同的日志实现，就麻烦的多了。</p><p>具体来说，现在推荐使用 Log4j-API 或者 SLF4j，不推荐继续使用 JCL。</p><h3 id="只添加一个-Log-Implementation依赖"><a href="#只添加一个-Log-Implementation依赖" class="headerlink" title="只添加一个 Log Implementation依赖"></a>只添加一个 Log Implementation依赖</h3><p>毫无疑问，项目中应该只使用一个具体的 Log Implementation，建议使用 Logback 或者Log4j2。如果有依赖的项目中，使用的 Log<br>Facade不支持直接使用当前的 Log Implementation，就添加合适的桥接器依赖。</p><p>具体的日志实现依赖应该设置为optional和使用runtime scope</p><p>在项目中，Log Implementation的依赖强烈建议设置为runtime scope，并且设置为optional。例如项目中使用了 SLF4J 作为 Log<br>Facade，然后想使用 Log4j2 作为 Implementation，那么使用 maven 添加依赖的时候这样设置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;<br>    &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;<br>    &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;<br>    &lt;scope&gt;runtime&lt;/scope&gt;<br>    &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;<br>    &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;<br>    &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;<br>    &lt;scope&gt;runtime&lt;/scope&gt;<br>    &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>设为optional，依赖不会传递，这样如果你是个lib项目，然后别的项目使用了你这个lib，不会被引入不想要的Log Implementation 依赖；</p><p>Scope设置为runtime，是为了防止开发人员在项目中直接使用Log Implementation中的类，而不适用Log Facade中的类。</p><h3 id="如果有必要-排除依赖的第三方库中的Log-Impementation依赖"><a href="#如果有必要-排除依赖的第三方库中的Log-Impementation依赖" class="headerlink" title="如果有必要, 排除依赖的第三方库中的Log Impementation依赖"></a>如果有必要, 排除依赖的第三方库中的Log Impementation依赖</h3><p>这是很常见的一个问题，第三方库的开发者未必会把具体的日志实现或者桥接器的依赖设置为optional，然后你的项目继承了这些依赖——具体的日志实现未必是你想使用的，比如他依赖了Log4j，你想使用Logback，这时就很尴尬。另外，如果不同的第三方依赖使用了不同的桥接器和Log实现，也极容易形成环。</p><p>这种情况下，推荐的处理方法，是使用exclude来排除所有的这些Log实现和桥接器的依赖，只保留第三方库里面对Log Facade的依赖。</p><p>比如阿里的JStorm就没有很好的处理这个问题，依赖jstorm会引入对Logback和log4j-over-slf4j的依赖，如果你想在自己的项目中使用Log4j或其他Log实现的话，就需要加上excludes:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba.jstorm&lt;/groupId&gt;<br>    &lt;artifactId&gt;jstorm-core&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">2.1</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>    &lt;exclusions&gt;<br>        &lt;exclusion&gt;<br>            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;<br>            &lt;artifactId&gt;log4j-over-slf4j&lt;/artifactId&gt;<br>        &lt;/exclusion&gt;<br>        &lt;exclusion&gt;<br>            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;<br>            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;<br>        &lt;/exclusion&gt;<br>    &lt;/exclusions&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="避免为不会输出的log付出代价"><a href="#避免为不会输出的log付出代价" class="headerlink" title="避免为不会输出的log付出代价"></a>避免为不会输出的log付出代价</h3><p>Log库都可以灵活的设置输出界别，所以每一条程序中的log，都是有可能不会被输出的。这时候要注意不要额外的付出代价。</p><p>先看两个有问题的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">logger.<span class="hljs-title function_">debug</span>(<span class="hljs-string">&quot;start process request, url: &quot;</span> + url);<br>logger.<span class="hljs-title function_">debug</span>(<span class="hljs-string">&quot;receive request: &#123;&#125;&quot;</span>, <span class="hljs-title function_">toJson</span>(request));<br></code></pre></td></tr></table></figure><p>第一条是直接做了字符串拼接，所以即使日志级别高于debug也会做一个字符串连接操作；</p><p>第二条虽然用了SLF4J&#x2F;Log4j2 中的懒求值方式来避免不必要的字符串拼接开销，但是toJson()这个函数却是都会被调用并且开销更大。</p><p>推荐的写法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.debug(<span class="hljs-string">&quot;start process request, url:&#123;&#125;&quot;</span>, url); <span class="hljs-comment">// SLF4J/LOG4J2</span><br>logger.debug(<span class="hljs-string">&quot;receive request: &#123;&#125;&quot;</span>, () -&gt; toJson(request)); <span class="hljs-comment">// LOG4J2</span><br>logger.debug(() -&gt; <span class="hljs-string">&quot;receive request: &quot;</span> + toJson(request)); <span class="hljs-comment">// LOG4J2</span><br><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123; <span class="hljs-comment">// SLF4J/LOG4J2</span><br>    logger.debug(<span class="hljs-string">&quot;receive request: &quot;</span> + toJson(request));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="日志格式中最好不要使用行号，函数名等字段"><a href="#日志格式中最好不要使用行号，函数名等字段" class="headerlink" title="日志格式中最好不要使用行号，函数名等字段"></a>日志格式中最好不要使用行号，函数名等字段</h3><p>原因是，为了获取语句所在的函数名，或者行号，log库的实现都是获取当前的stacktrace，然后分析取出这些信息，而获取stacktrace的代价是很昂贵的。如果有很多的日志输出，就会占用大量的CPU。在没有特殊需要的情况下，建议不要在日志中输出这些这些字段。</p><p>最后， log中不要输出稀奇古怪的字符！</p><p>部分开发人员为了方便看到自己的log，会在log语句中加上醒目的前缀，比如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">logger.<span class="hljs-title function_">debug</span>(<span class="hljs-string">&quot;========================start process request=============&quot;</span>);<br></code></pre></td></tr></table></figure><p>虽然对于自己来说是方便了，但是如果所有人都这样来做的话，那log输出就没法看了！正确的做法是使用grep 来看只自己关心的日志。</p><h3 id="java-日志模板-logback"><a href="#java-日志模板-logback" class="headerlink" title="java 日志模板 logback"></a>java 日志模板 logback</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_HOME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/home&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--控制台日志， 控制台输出 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度,%msg：日志消息，%n是换行符--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--文件日志， 按照每天生成日志文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件输出的文件名--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/TestWeb.log.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件最大的大小--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">triggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">MaxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">MaxFileSize</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">triggeringPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- show parameters for hibernate sql 专为 Hibernate 定制 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.hibernate.type.descriptor.sql.BasicBinder&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;TRACE&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.hibernate.type.descriptor.sql.BasicExtractor&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.hibernate.SQL&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.hibernate.engine.QueryParameters&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.hibernate.engine.query.HQLQueryPlan&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--myibatis log configure--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.apache.ibatis&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;TRACE&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java.sql.Connection&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java.sql.Statement&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java.sql.PreparedStatement&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 日志输出级别 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="java-日志模板-log4j2"><a href="#java-日志模板-log4j2" class="headerlink" title="java 日志模板 log4j2"></a>java 日志模板 log4j2</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-comment">&lt;!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出--&gt;</span><br><span class="hljs-comment">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">monitorInterval</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span><br><br>    <span class="hljs-comment">&lt;!--变量配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Properties</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符--&gt;</span><br>        <span class="hljs-comment">&lt;!-- %logger&#123;36&#125; 表示 Logger 名字最长36个字符 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%date&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 定义日志存储的路径 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE_PATH&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;更换为你的日志路径&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE_NAME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;更换为你的项目名&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appenders</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Console&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--输出日志的格式--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$&#123;LOG_PATTERN&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;DENY&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">console</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Filelog&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;FILE_PATH&#125;/test.log&quot;</span> <span class="hljs-attr">append</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$&#123;LOG_PATTERN&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RollingFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RollingFileInfo&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;FILE_PATH&#125;/info.log&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;$&#123;FILE_PATH&#125;/$&#123;FILE_NAME&#125;-INFO-%d&#123;yyyy-MM-dd&#125;_%i.log.gz&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;DENY&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$&#123;LOG_PATTERN&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Policies</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">TimeBasedTriggeringPolicy</span> <span class="hljs-attr">interval</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;10MB&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">Policies</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">DefaultRolloverStrategy</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;15&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">RollingFile</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 这个会打印出所有的warn及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RollingFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RollingFileWarn&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;FILE_PATH&#125;/warn.log&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;$&#123;FILE_PATH&#125;/$&#123;FILE_NAME&#125;-WARN-%d&#123;yyyy-MM-dd&#125;_%i.log.gz&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;warn&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;DENY&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$&#123;LOG_PATTERN&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Policies</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">TimeBasedTriggeringPolicy</span> <span class="hljs-attr">interval</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;10MB&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">Policies</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">DefaultRolloverStrategy</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;15&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">RollingFile</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 这个会打印出所有的error及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RollingFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RollingFileError&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;FILE_PATH&#125;/error.log&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;$&#123;FILE_PATH&#125;/$&#123;FILE_NAME&#125;-ERROR-%d&#123;yyyy-MM-dd&#125;_%i.log.gz&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;error&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;DENY&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$&#123;LOG_PATTERN&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Policies</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">TimeBasedTriggeringPolicy</span> <span class="hljs-attr">interval</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;10MB&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">Policies</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">DefaultRolloverStrategy</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;15&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">RollingFile</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appenders</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。--&gt;</span><br>    <span class="hljs-comment">&lt;!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">loggers</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.mybatis&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--监控系统信息--&gt;</span><br>        <span class="hljs-comment">&lt;!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Logger</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Filelog&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;RollingFileInfo&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;RollingFileWarn&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;RollingFileError&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">loggers</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件详解</p><ul><li>日志级别<ul><li>机制：如果一条日志信息的级别大于等于配置文件的级别，就记录。</li><li>trace：追踪，就是程序推进一下，可以写个trace输出</li><li>debug：调试，一般作为最低级别，trace基本不用。</li><li>info：输出重要的信息，使用较多</li><li>warn：警告，有些信息不是错误信息，但也要给程序员一些提示。</li><li>error：错误信息。用的也很多。</li><li>fatal：致命错误。</li></ul></li><li>输出源<ul><li>CONSOLE（输出到控制台）</li></ul></li><li>FILE（输出到文件）</li><li>格式<ul><li>SimpleLayout：以简单的形式显示</li><li>HTMLLayout：以HTML表格显示</li><li>PatternLayout：自定义形式显示</li></ul></li></ul><p>PatternLayout自定义日志布局：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">%</span><span class="language-bash">d&#123;yyyy-MM-<span class="hljs-built_in">dd</span> HH:mm:ss, SSS&#125; : 日志生产时间,输出到毫秒的时间</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">-5level : 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">c : logger的名称(%logger)</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">t : 输出当前线程名称</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">p : 日志输出格式</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">m : 日志内容，即 logger.info(<span class="hljs-string">&quot;message&quot;</span>)</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">n : 换行符</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">C : Java类名(%F)</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">L : 行号</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">M : 方法名</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">l : 输出语句所在的行数, 包括类名、方法名、文件名、行数</span><br>hostName : 本地机器名<br>hostAddress : 本地ip地址<br></code></pre></td></tr></table></figure><p>Log4j2配置详解</p><p>根节点Configuration有两个属性:</p><ul><li><p>status</p></li><li><p>monitorinterval<br>有两个子节点:</p></li><li><p>Appenders</p></li><li><p>Loggers(表明可以定义多个Appender和Logger).</p></li><li><p>status用来指定log4j本身的打印日志的级别.</p></li><li><p>monitorinterval用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s.</p></li><li><p>Appenders节点</p></li><li><p>常见的有三种子节点:Console、RollingFile、File</p></li><li><p>Console节点用来定义输出到控制台的Appender.</p><ul><li>name:指定Appender的名字.</li><li>target:SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT.</li><li>PatternLayout:输出格式，不设置默认为:%m%n.</li></ul></li><li><p>File节点用来定义输出到指定位置的文件的Appender.</p><ul><li>name:指定Appender的名字.</li><li>fileName:指定输出日志的目的文件带全路径的文件名.</li><li>PatternLayout:输出格式，不设置默认为:%m%n.</li></ul></li><li><p>RollingFile节点用来定义超过指定条件自动删除旧的创建新的Appender.</p><ul><li>name:指定Appender的名字.</li><li>fileName:指定输出日志的目的文件带全路径的文件名.</li><li>PatternLayout:输出格式，不设置默认为:%m%n.</li><li>filePattern : 指定当发生Rolling时，文件的转移和重命名规则.</li><li>Policies:指定滚动日志的策略，就是什么时候进行新建日志文件输出日志.</li><li>TimeBasedTriggeringPolicy:Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1</li><li>hour。modulate&#x3D;true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am…而不是7am.</li><li>SizeBasedTriggeringPolicy:Policies子节点，基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小.</li><li>DefaultRolloverStrategy:用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)。</li></ul></li><li><p>Loggers节点，常见的有两种:Root和Logger.<br>Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出</p></li><li><p>level:日志输出级别，共有8个级别，按照从低到高为：All &lt; Trace &lt; Debug &lt; Info &lt; Warn &lt; Error &lt;</p><ul><li>AppenderRef：Root的子节点，用来指定该日志输出到哪个Appender.</li><li>Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。</li><li>level:日志输出级别，共有8个级别，按照从低到高为：All &lt; Trace &lt; Debug &lt; Info &lt; Warn &lt; Error &lt; Fatal &lt; OFF.</li><li>name:用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点.</li><li><code>AppenderRef</code><br>：Logger的子节点，用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root.如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，此时我们可以设置Logger的additivity&#x3D;”<br>false”只在自定义的Appender中进行输出。</li></ul></li></ul><h2 id="性能调优之日志打印的坑"><a href="#性能调优之日志打印的坑" class="headerlink" title="性能调优之日志打印的坑"></a>性能调优之日志打印的坑</h2><p>一是前段时间架构组同事的一次性能优化分享，单单日志（log4j2）这一项优化性能就提升了 19 倍，QPS 从1660 升到 32000，被震撼到了。</p><p>二是最近接手的一个项目中，日志加了彩色打印，按日志的级别设置了不同的高亮颜色，看得我眼花缭乱，用 less<br>等一些命令查看时还会展示出来一堆 “ESC[m]”，这让有点强迫症的我看着很不爽。</p><p>趁着技术优化，把这块也改一下，自己先爽了再说。顺便也重新认识一下在各种算法、秒杀设计大行其道的当下，这个不太起眼的小家伙。</p><h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>在任何系统中，日志对服务的重要性不言而喻，它是反映系统运行情况的重要依据；它轻巧、简单，与我们形影不离，使得我们在排查问题时无需绞尽脑汁。被线上服务问题毒打过的人都认可日志的重要性，但看似不起眼的日志，却是一把双刃剑，隐藏着各式各样的“坑”，如果使用不当，不仅不能助我们一臂之力，反而会成为服务“杀手”，所以，你知道有哪些场景可能导致性能问题吗？今天楼兰胡杨和各位老铁聊聊高并发系统下<br>Java 日志性能那些事，同时提供一套异步+随机采样方案能让程序与日志“和谐共处”。</p><p>Java 日志打印对服务的影响包括多种因素，例如日志级别、日志输出目标和日志格式等。下面的流程图展示了 Java 日志打印的一般流程和对<br>CPU 的影响。</p><p><img src="/../images/img_7.png" alt="image"></p><p>根据以上流程图可以得出以下结论：</p><p>Java 日志打印会增加代码的执行时间，因为需要执行额外的日志打印语句。</p><p>日志级别的选择会影响 CPU 的占用率。较低的日志级别（如 INFO 或 DEBUG）会导致更多的日志打印语句被执行，增加 CPU 的负担。</p><p>日志输出目标的选择也会影响 CPU 的占用率。将日志输出到控制台会导致额外的 I&#x2F;O 操作，增加 CPU 的负担。</p><p>日志格式的复杂程度也会影响 CPU 的占用率。使用更复杂的日志格式可能会导致更多的字符串操作，增加 CPU 的负担。</p><h3 id="影响性能的日志因素"><a href="#影响性能的日志因素" class="headerlink" title="影响性能的日志因素"></a>影响性能的日志因素</h3><h4 id="位置信息"><a href="#位置信息" class="headerlink" title="位置信息"></a>位置信息</h4><p>官网称作 Location Information，就是我们配置文件里的这类信息（%c{3}#%M %L），含义是当前这行日志是哪个类的哪个方法哪一行打印的。输出效果如下：</p><p>可配置的模式有很多，具体见官网 <a href="https://logging.apache.org/log4j/2.x/manual/layouts.html#Patterns">https://logging.apache.org/log4j/2.x/manual/layouts.html#Patterns</a> 。</p><p>这里只说和位置相关的 %C or %class, %F or %file, %l or %location, %L or %line, %M or %method。</p><p>官网这几个模式的说明中也都反复强调了会影响性能。同时也给出了具体的性能数据，比常用的同步 logger 慢 1.3 ~ 5 倍。如果在异步<br>logger 中使用位置信息，将会慢 30 ~ 100 倍。</p><p>为什么会这么慢呢？</p><p>我们都知道，java 程序执行时，每个线程都会有自己的栈，每个方法都会生成一个 frame，要获取位置信息，就要获取当前线程的栈帧信息，java<br>9 之前提供了两种获取栈帧的方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">java.lang.Throwable#getStackTrace()<br>java.lang.Thread#getStackTrace()<br></code></pre></td></tr></table></figure><p>java 9 提供了 StackWalker 类，有网友说它的性能要好一些，我没找到有力证据，看到的都是介绍跳帧的功能，有兴趣的可以深究一下。</p><p>我们就看一下 java 9 之前的 2 种方法：</p><p>有网友说 java.lang.Throwable#getStackTrace() 的性能要好一些，我也没有找到直接证据，但从调用底层 native 的方法名字看 Thread<br>里调用的是 dumpThreads ，看到 dump 字眼，就会联想到 stop the world ，如果真挂起线程，那效率就低了。</p><p>而且 log4j 里用的是java.lang.Throwable#getStackTrace()。</p><p>不管是哪种方法获取堆栈信息，应该都不会太高效。</p><p>想想我们一个请求，从框架层面交给一个线程后，动辄几十层方法才能调到我们的业务代码太正常不过了。</p><p>既然这么低效，那我们不打位置信息，有问题怎么定位呢？</p><p>我仔细回想了一下过往排查问题时，好像都是通过日志内容，定位到哪一行代码，几乎没有通过类名行号去定位代码，编译后的行号准不准确也另说。</p><p>其实我们的主要目的是不通过框架获取堆栈的形式打印位置信息，我们完全可以在日志的内容中带上位置信息，通过一个切面就能搞定的事。</p><h4 id="不同的-Appender"><a href="#不同的-Appender" class="headerlink" title="不同的 Appender"></a>不同的 Appender</h4><p>我们工作中一般都是把日志输出到文件中的，我们就挑 3 个文件相关的 Appender 说明一下，不同的 Appender 性能的差异主要在 I&#x2F;O 上。</p><p>FileAppender 和 RollingFileAppender 内部使用的都是 BufferedOutputStream。</p><p>而 RandomAccessFileAppender 内部使用了 ByteBuffer + RandomAccessFile 技术，与 FileAppender 相比，性能提高了20 ~ 200%。</p><p>AsyncAppender 它不能独立存在，要依赖其他的 Appenders，配置在它们之后。</p><p>它只是新起一个线程中把 LogEvents 交给了它所依赖的 Appenders。默认内部使用的是 ArrayBlockingQueue<br>，多线程并发打日志时，性能可能会变得更差。这种场景官方推荐使用无锁的 Asynchronous Loggers 。</p><p>Asynchronous Loggers，它是 log4j2 新提供的功能，通过新起线程执行 I&#x2F;O 操作来提升性能，底层使用的是 Disruptor 框架，通过无锁线程通信，代替了<br>ArrayBlockingQueue 。</p><p>它支持所有 Loggers 异步处理，也支持同步、异步 组合使用。可靠性要求高的比如异常信息就可以配成同步的，其他配成异步的。</p><p>每个 Appender 的具体用法可以从官网查看，</p><p><a href="https://logging.apache.org/log4j/2.x/manual/appenders.html">https://logging.apache.org/log4j/2.x/manual/appenders.html</a></p><h4 id="不同的刷盘策略"><a href="#不同的刷盘策略" class="headerlink" title="不同的刷盘策略"></a>不同的刷盘策略</h4><p>上面说到的 Appenders 的配置项中，都有一个 “immediateFlush”，默认 &#x3D; false，日志文件不像数据库那样追求高可靠性，可以忽略此配置，知道配置为<br>true 性能会变差就行。</p><p>貌似所有涉及到刷盘的技术，都会提供这类的配置项，这里就不多说了。</p><h3 id="不合理的书写方法"><a href="#不合理的书写方法" class="headerlink" title="不合理的书写方法"></a>不合理的书写方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 格式1<br>log.debug(&quot;User id = &quot; + userId);<br><br>// 格式2<br>if (log.isdebugEnable()) &#123;<br>    log.debug(&quot;User id = &quot; + userId);<br>&#125;<br><br>// 格式3<br>log.debug(&quot;User msg &#123;&#125;!&quot;, JSON.toJSONString(user));<br><br>// 格式4，既然加了开关，说明是核心日志，打印info级别<br>if (日志开关已开启) &#123;<br>  log.info(&quot;User msg &#123;&#125;!&quot;, JSON.toJSONString(user));<br>&#125;<br></code></pre></td></tr></table></figure><p>如上四种写法，我相信大家或多或少都在项目代码中看到过，那么它们之间有什么区别？对性能会造成什么影响？如果此时关闭 DEBUG<br>级别日志，差异就显露出来了。</p><ul><li>格式1 即使它不输出日志，依然需要执行字符串拼接，属于资源浪费。</li><li>格式2 缺点是需要加入额外的判断逻辑，增加了废代码，一点不优雅。</li><li>格式3 缺点是仍然需要根据系统配置的日志级别判断是否打印日志，并且需要提前序列化对象为JSON字符串，但是，不需要拼接字符串。</li><li>格式4 推荐在高并发系统中使用，优点是根据Boolean类型日志开关判断是否走日志打印逻辑，开关关闭时，不必校验是否需要打印日志。</li></ul><h2 id="Mybatis-Plus-自定义日志"><a href="#Mybatis-Plus-自定义日志" class="headerlink" title="Mybatis Plus 自定义日志"></a>Mybatis Plus 自定义日志</h2><p>不常用，不写了，详见参考资料。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>nx视频</li><li><a href="https://developer.aliyun.com/article/768396">Java 日志框架解析：汇总及最佳实践</a></li><li><a href="https://juejin.cn/post/6905026199722917902">深入掌握Java日志体系，再也不迷路了</a></li><li><a href="https://hezhiqiang8909.gitbook.io/java/docs/javalib/javalib-log">细说Java主流日志工具库</a></li><li><a href="https://logback.qos.ch/documentation.html">logback官网</a></li><li><a href="https://blog.csdn.net/weixin_55772633/article/details/148897445">Mybatis Plus 自定义日志</a></li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>Java</tag>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>职场认知</title>
    <link href="/2024/01/06/career/"/>
    <url>/2024/01/06/career/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于 <code>职场</code> 经验相关的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经济下行导致了很多人失业，失业率高，我们要做好是否要换工作与工作中处理问题的能力。</p><p><code>工作最重要的目的在于通过工作来磨练自己的心志、提高自己的人格。就是说，全身心投入当前自己该做的事情中去，聚精会神，精益求精。</code></p><h2 id="寻找方向"><a href="#寻找方向" class="headerlink" title="寻找方向"></a>寻找方向</h2><h3 id="我是不是该换工作了"><a href="#我是不是该换工作了" class="headerlink" title="我是不是该换工作了"></a>我是不是该换工作了</h3><p>如果你是大学生：</p><ul><li>大一开始准备找工作<ul><li>该考证考证</li><li>该准备的知识储备准备充足</li></ul></li><li>大二就开始找实习</li><li>大三如鱼得水</li><li>大四直达对岸</li><li>如果来不及了也不要紧，现在开始，一两年后，你的知识储备足以帮助你找到一个满意的工作。</li></ul><p>为什么容易延误机会？</p><ul><li>学婊横行</li><li>计划太远</li><li>人生没有规划</li></ul><p>你想要什么？</p><ul><li>钱（奖学金、勤工俭学、兼职…）</li><li>权力（学生会、工作…）</li><li>知识（企业里面的研发中心、院校研究院研究生点…）</li></ul><p>当你觉得你想要的东西学校已经给不了，就准备开始找工作吧！</p><p>重要时间点：</p><ul><li>金九银十</li><li>金三银四</li></ul><p>如果你是在职人士：</p><ul><li>换工作是再正常不过的事情，当前的环境，来来走走的是大多数</li><li>机会到来，该换就换，把握住机会</li><li>想要换工作，首先不要怕换工作</li><li>长远来看，主动跳槽的，收入都是增长的。</li></ul><p>思考以下几个问题：</p><ul><li>目前的工作能不能给你带来技能的提升？</li><li>你每天工作开心吗？</li><li>公司所在的行业处于什么时期？（上升期、成熟期、衰败期）</li><li>公司里有没有你想成为的人？</li><li>你离公司的核心业务近吗？</li></ul><p>为什么不容易实现跃升？</p><ul><li>厌恶损失</li><li>担忧未来</li><li>自我认知不清</li></ul><h3 id="作为普通人，是不是有所谓命中注定的好工作？"><a href="#作为普通人，是不是有所谓命中注定的好工作？" class="headerlink" title="作为普通人，是不是有所谓命中注定的好工作？"></a>作为普通人，是不是有所谓命中注定的好工作？</h3><p>推荐做一下，MBTI人格测试，辅助自己做职业规划。自己评价一下自己，让他人评价一下自己。</p><p>认可工作。</p><p>摆正心态</p><ul><li>不要迷信结果</li><li>选择你在职场中最看重的三个东西</li><li>在推荐的领域和职业种选择三个你最认可的</li></ul><h2 id="目标钻研"><a href="#目标钻研" class="headerlink" title="目标钻研"></a>目标钻研</h2><h2 id="简历面试"><a href="#简历面试" class="headerlink" title="简历面试"></a>简历面试</h2><h2 id="成长方案"><a href="#成长方案" class="headerlink" title="成长方案"></a>成长方案</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>一个人的工作职位不怕低，只要你不放弃你的理想，拿目前的工作做一个踏脚石，一方面维持生活，一方面找时间充实自己，认准一个确定的方向去努力。慢慢的，你总会发现，你的努力没有白费。</code></p><p><code>我们应该迷恋工作、热爱工作、拥抱工作。正因为迷恋工作、热爱工作，所以我就能长期坚持艰苦的工作，一以贯之，无怨无悔，心存感激</code></p>]]></content>
    
    
    <categories>
      
      <category>职场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>求职</tag>
      
      <tag>职场认知</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第三章-系统配置与性能评价</title>
    <link href="/2024/01/06/system_analyst3/"/>
    <url>/2024/01/06/system_analyst3/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·系统配置与性能评价</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><ol><li><p>对计算机评价的主要性能指标有:<br>时钟频率(主频)，运算速度，运算精度内存的存储容量;存储器的存取周期;数据处理速率PDR (<br>processingdatarate)吞吐率;各种响应时间;各种利用率，RASIS特性 (即:<br>可靠性Reliability、可用性Availability、可维护性Sericeability、:完整性和安全性Integraity and Security)<br>;平均故障响应时间，兼容性，可扩充性，性能价格比。</p></li><li><p>对路由器评价的主要性能指标有:<br>设备吞吐量、全双工线速转发端口吞吐量、能力、背靠背帧数、路由表能力、背板能力、丢包率、时延、时延抖动、VPN支持能力、内部时钟精度、队列管理机制、端口硬件队列数、分类业务带宽保证RSVP、IP<br>Diff Serv、CAR支持、余、热插拔组件、路由器余协议、网管、基于Web的管理、网管类型、带外网管支持、网管粒度、计费能力&#x2F;协议、分组语音支持方式、协议支持、语音压缩能力、端口密度、信令支持。</p></li><li><p>对交换机评价的主要性能指标有:<br>交换机类型、配置、支持的网络类型、最大ATM端口数、最大SONET端口数、最大FDDI端口数、背板吞吐量、缓冲区大小最大MAC地址表大小、最大电源数、支持协议和标准、路由信息协议RIP、RIP2开放式最短路径优先第2版、边界网关协议BGP、无类域间路由CIDR、互联网成组管理协议IGMP、距离矢量多播路由协议DVMRP、开放式最短路径优先多播路由协议MOSPF、协议无关的多播协议PIM、资源预留协议RSVP、802.1P优先级标记，多队列、路由、支持第3层交换、支持多层(<br>4到7层交换、支持多协议路由支持路由缓存可支持最大路由表数、VLAN、最大VLAN数量、网管、支持网管类型，支持端口镜像、Qos、支持基于策<br>略的第2层交换、每端口最大优先级队列数、支持基于策略的第3层交换、支持基于策略的应用级Qos、支持最小&#x2F;最大带宽分配、冗余、热交换组件(<br>管理卡，交换结构，接口模块，电源，冷却系统、支持端口链路聚集协议、负载均衡。</p></li><li><p>评价网络的性能指标有:设备级性能指标，网络级性能指标，应用级性能指标用户级性能指标;吞吐量。</p></li><li><p>操作系统 评价操作系统的性能指标有:系统的可靠性、系统的吞吐率 (量)、系统响应时间、系统资源利用率、可移植性。</p></li><li><p>衡量数据库管理系统的主要性能指标包括数据库本身和管理系统两部分，有:<br>数据库的大小、数据库中表的数量、单个表的大小、表中允许的记录 (行)数量、单个记录 (行)<br>的大小、表上所允许的索引数量、数据库所允许的索引数量、最大并发事务处理能力、负载均衡能力、最大连接数等等。</p></li><li><p>评价Web服务器的主要性能指标有: 最大并发连接数、响应延迟、吞吐量</p></li></ol><h3 id="性能评价方法"><a href="#性能评价方法" class="headerlink" title="性能评价方法"></a>性能评价方法</h3><p>(1)时钟频率。一般来讲，主频越高，速度越快。</p><p>(2)指令执行速度。计量单位KIPS、MIPS</p><p>(3)等效指令速度法。统计各类指令在程序中所占比例，并进行折算，是一种3固定比例法。</p><p>(4)数据外理速率(Processing Data Rate，PDR) 法。采用计算PDR 值的方法来衡量机器性能，PDR 值越大，机器性能越好。PDR<br>与每条指令和每个操作数的平均位数以及每条指令的平均运算速度有关</p><p>基准程序法 (Benchmark): 把应用程序中用得最多最频繁的那部分核心程序作为评价计算机性能的标准程序，称为基准测试程序是目前被(<br>benchmark)用户一致承认的测试性能的较好方法，有多种多样的基准程序，包括</p><ul><li><p>整数测试程序。同一厂家的机器，采用相同的体系结构，用相同的基准程序测试，得到的MIPS 值越大，一般说明机器速度越快。</p></li><li><p>浮点测试程序。指标MFLOPS(理论峰值浮点速度)。</p></li><li><p>SPEC基准程序(SPEC Benchmark)。重点面向处理器性能的基准程序集将被测计算机的执行时间标准化，即将被测计算机的执行时间除以一个参考处理器的执行时间。</p></li><li><p>TPC基准程序。用于评测计算机在事务处理、数据库处理、企业管理与决策支持系统等方面的性能。其中，TPC-C 是在线事务处理 (On-line<br>TransactionProcessing，OLTP) 的基准程序，TPC-D 是决策支持的基准程序。TPC-E 作为大型企业信息服务的基准程序。</p></li><li><p>大多数情况下，为测试新系统的性能，用户必须依靠评价程序来评价机器的性能。下面列出了4种评价程序，它们评测的准确程度依次递减:<br>真实的程序、核心程序、小型基准程序、合成基准程序</p></li></ul><h3 id="阿姆达尔解决方案"><a href="#阿姆达尔解决方案" class="headerlink" title="阿姆达尔解决方案"></a>阿姆达尔解决方案</h3><p>阿姆达尔(Amdahl)定律主要用于系统性能改进的计算中。阿姆达尔定律是指计算机系统中对某一部件采用某种更快的执行方式所获得的系统性能改变程度取决于这种方式被使用的频率，或所占总执行时间的比例。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考第二章-计组</title>
    <link href="/2024/01/06/system_analyst2/"/>
    <url>/2024/01/06/system_analyst2/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>系分考点·计组</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="计算机系统基础知识"><a href="#计算机系统基础知识" class="headerlink" title="计算机系统基础知识"></a>计算机系统基础知识</h3><h4 id="计算机硬件组成"><a href="#计算机硬件组成" class="headerlink" title="计算机硬件组成"></a>计算机硬件组成</h4><p>计算机的基本硬件系统由运算器、控制器、存储器、输入设备和输出设备5 大部件组成。</p><p>运算器、控制器等部件被集成在一起统称为中央处理单元(Central<br>ProcessingCPU是硬件系统的核心，用于数据的加工处理，能完成各种算术Unit，CPU)逻辑运算及控制功能</p><p>存储器是计算机系统中的记忆设备，分为内部存储器和外部存储器。前者速度高、容量小，一般用于临时存放程序、数据及中间结果。而后者容量大、速度慢，可以长期保存程序和数据。</p><p>输入设备和输出设备合称为外部设备 (简称外设)输入设备用于输入原始数据及各种命令，而输出设备则用于输出计算机运行的结果。</p><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><p>CPU的功能:</p><ul><li>程序控制。CPU 通过执行指令来控制程序的执行顺序，这是CPU 的重要功能</li><li>操作控制。一条指令功能的实现需要若干操作信号配合来完成，CPU 产生每条指令的操作信号并将操作信号送往对应的部件，控制相应的部件按指令的功能要求进行操作。</li><li>时间控制。CPU对各种操作进行时间上的控制，即指令执行过程中操作信号的出现时间、持续时间及出现的时间顺序都需要进行严格控制。</li><li>数据处理。CPU通过对数据进行算术运算及逻运算等方式进行加工处理数据加工处理的结果被人们所利用。所以，对数据的加工处理也是CPU最根本的任务。</li><li>此外，CPU 还需要对系统内部和外部的中断(异常)做出响应，进行相应的处理</li></ul><p>控制器CPU的组成:CPU主要由运算器寄存器组和内部总线等部件组成</p><ul><li>运算器:由算术逻辑单元ALU (实现对数据的算术和逻辑运算)、累加寄存器Ac(运算结果或源操作数的存放区)数据缓冲寄存器DR(<br>暂时存放内存的指令或数据)、和状态条件寄存器PSw (保存指令运行结果的条件码内容，如溢出标志等)<br>组成。执行所有的算术运算，如加减乘除等，执行所有的逻辑运算并进行逻辑测试，如与、或、非、比较等。</li><li>控制器:(存放指令执由指令寄存器IR (暂存CPU执行指令)、程序计数器PC行地址)地址寄存器AR (保存当前CPU所访问的内存地址)<br>、指令译码器ID(分析指令操作码)等组成。控制整个CPU的工作，最为重要</li><li>CPU依据指令周期的不同阶段来区分二进制的指令和数据，因为在指令周期的不同阶段，指令会命令CPU分别去取指令或者数据。</li></ul><h4 id="数据表示"><a href="#数据表示" class="headerlink" title="数据表示"></a>数据表示</h4><p>进制的表示:<br>二进制、十六进制，一般在题目中会给出中文说明，如果没给出，注意二进制符号为ob，一般表示为0b0011，十六进制符号为0x或H，可表示为0x18F或18FH。(<br>十六进制可表示0-15，其中10-15用A-F来表示)</p><p>R进制整数转十进制:位权展开法，用R进制数的每一位乘以R的n次方，n是变量，从R进制数的整数最低位开始，依次为0,1,2,3…累加。</p><p>例如有6进制数5043，此时R&#x3D;6，用6进制数的每一位乘以6的n次方，n是变量从6进制数的整数最低位开始(5043从低位到高位排列:3,4,05)<br>，n依次为0,1,2,3，那么最终5043&#x3D;3 * 6 ^ 0 + 4 * 6 ^ 1 + 0 * 6 ^ 2 + 5 * 6 ^ 3&#x3D;1107。</p><p>十进制转R进制:十进制整数 (除以R倒取余数)，用十进制整数除以R，记录而后将所有余数从下至每次所得余数，若商不为0，则继续除以R，直至商为0，上记录，排列成从左至右顺序，即为转换后的R进制数;</p><p>例:有十进制数200，转换为6进制，此时R&#x3D;6，将200&#x2F;6，得商为33，余数为2;因为商不等于0，因此再将商33&#x2F;6，得商为5，余数为3;，再将5&#x2F;6，得商为0，余数为5;此时商为0，将所有余数从下到上记录，得532。</p><p>m进制转n进制:先将m进制转化为十进制数，再将十进制数转化为n进制数中间需要通过十进制中转，但下面两种进制间可以直接转化:</p><p>二进制转八进制:每三位二进制数转换为一位八进制数，二进制数位个数不是三的倍数，则在前面补0 (原则是数值不变)<br>，如二进制数01101有五位，前面补一个0就有六位，为001101，每三位转换为一位八进制数001&#x3D;1,101&#x3D;1+4&#x3D;5，也即01101&#x3D;15。</p><p>二进制转十六进制:<br>每四位二进制数转换为一位十六进制数，二进制数位个数不是四的倍数，则在前面补0，如二进制数101101有六位，前面补两个0就有八位，为00101101，每四位转换为一位十六进制数，0010&#x3D;2,1101&#x3D;13&#x3D;D，也即101101&#x3D;2D</p><p>机器数:各种数值在计算机中表示的形式，其特点是使用二进制计数制，数的符号用0和1表示，小数点则隐含，不占位置。机器数有无符号数和带符号数之分。无符号数表示正数，没有符号位。带符号数最高位为符号位，正数符号位为0，负数符号位为1。</p><p>定点表示法分为纯小数和纯整数两种，其中小数点不占存储位，而是按照以下约定:</p><ul><li>纯小数:约定小数点的位置在机器数的最高数值位之前</li><li>纯整数:约定小数点的位置在机器数的最低数值位之后</li></ul><p>真值:机器数对应的实际数值。</p><p>带符号数有下列编码方式，当真值为-45时:</p><p>原码:一个数的正常二进制表示，最高位表示符号，数值0的源码有两种形式+0(00000000)和-0(10000000)。-45对应原码为10101101</p><p>反码:正数的反码即原码，负数的反码是在原码的基础上，除符号位外，其他各位按位取反。数值0的反码也有两种形式:+0(00000000)-0(<br>1。-45对应反码为110100101111111)</p><p>补码:正数的补码即原码，负数的补码是在原码的基础上，除符号位外，其他各位按位取反，而后末位+1，若有进位则产生进位。因此数值0的补码只有一种形式+0&#x3D;-0&#x3D;00000000。-45对应补码为11010011</p><p>移码:用作浮点运算的阶码，无论正数负数，都是将该原码的补码的首位(符号位)取反得到移码。-45对应移码为01010011</p><p>机器字长为n时各种码制表示的带符号数的取值范围(差别在于0的表示，原码和反码分+0和-0，补码只有一个0，因此可以多表示一个。)</p><table><thead><tr><th>码制</th><th>定点整数</th><th>定点小数</th></tr></thead><tbody><tr><td>原码</td><td>-(2 ** (n - 1) - 1) ~ +(2 ** (n - 1) -1)</td><td>-(1 - 2 ** -(n - 1)) ~ +(1 - 2 ** -(n - 1))</td></tr><tr><td>反码</td><td>-(2 ** (n - 1) - 1) ~ +(2 ** (n - 1) -1)</td><td>-(1 - 2 ** -(n - 1)) ~ +(1 - 2 ** -(n - 1))</td></tr><tr><td>补码</td><td>-2 ** (n -1) ~ +(2 ** (n - 1) - 1)</td><td>-1 ~ +(1 - 2 ** -(n -1))</td></tr><tr><td>移码</td><td>-2 ** (n -1) ~ +(2 ** (n - 1) - 1)</td><td>-1 ~ +(1 - 2 ** -(n -1))</td></tr></tbody></table><p>浮点数:表示方法为N&#x3D;F * 2 ^ E，其中E称为阶码，F称为尾数;类似于十进制的科学计数法，如85.125 &#x3D; 0.85125 * 10 ^ 2，二进制如101.011&#x3D;<br>0.101011 * 2 ^ 3</p><p>在浮点数的表示中，阶码为带符号的纯整数，尾数为带符号的纯小数，要注意符号占最高位(正数0负数1)，其表示格式如下:</p><p>阶符 | 阶码 | 数符 | 尾数</p><p>很明显，与科学计数法类似一个浮点数的表示方法不是唯一的，浮点数所能表示的数值范围由阶码确定，所表示的数值精度由尾数确定</p><p>尾数的表示采用规格化方法，也即带符号尾数的补码必须为1.0xxxx(负数)或者0.1xxxx(正数)，其中x可为0或1.</p><p>浮点数的运算</p><ul><li>对阶(使两个数的阶码相同，小阶向大阶看齐，较小阶码增加几位，尾数就右移位)</li><li>尾数计算(相加，若是减运算，则加负数)</li><li>结果规格化(即尾数表示规格化，带符号尾数转换为1.0xxxx或0.1xxxx)</li></ul><h4 id="校验码"><a href="#校验码" class="headerlink" title="校验码"></a>校验码</h4><p>码距:就单个编码A:<br>00而言，其码距为1，因为其只需要改变一位就变成另个编码。在两个编码中，从A码到B码转换所需要改变的位数称为码距，如A:00要转换为B:<br>11，码距为2。一般来说，码距越大，越利于纠错和检错</p><p>奇偶校验码:在编码中增加1位校验位来使编码中1的个数为奇数 (奇校验或者偶数(偶校验)，从而使码距变为2。例如:</p><p>奇校验:编码中，发送给接收方，接收方收到后，会计算收到的含有奇数个1，编码有多少个1，如果是奇数个，则无误，是偶数个，则有误。</p><p>偶校验同理，只是编码中有偶数个1，由上述，奇偶校验只能检1位错，并且无法纠错。</p><p>CRC只能检错，不能纠籍。使用CRC编码，需要先约定一个生成多项式G(x)<br>。生成多项式的最高位和最低位必须是1。假设原始信息有m位，则对应多项式M(x)<br>。生成校验码思想就是在原始信息位后追加若干校验位，使得追加的信息能被G(x)整除。接收方接收到带校验位的信息，然后用G(x)<br>整除。余数为0，则没有错误;反之则发生错误。</p><p>例:假设原始信息串为10110，CRC的生成多项式为G(x)&#x3D;x^4+x+1，求CRC校验码</p><ol><li><p>在原始信息位后面添0，假设生成多项式的阶为r，则在原始信息位后添加个0，本题中，G(x)阶为4，则在原始信息串后加4个0，得到的新串为101100000作为被除数。</p></li><li><p>由多项式得到除数，多项中x的幂指数存在的位置1，不存在的位置0。本题中，x的幂指数为0,1,4的变量都存在，而幂指数为2,3的不存在，因此得到串10011</p></li><li><p>生成CRC校验码将前两步得出的被除数和除数进行模2除法运算 (即不进位也不借位的除法运算)。<br>得到余数1111</p><p>注意:余数不足r，则余数左边用若干个0 补齐。如求得余数为11，r&#x3D;4，则补两个0 得到0011。</p></li><li><p>生成最终发送信息串，将余数添加到原始信息后。上例中，原始信息为10110，添加余数1111后，结果为10110 1111。发送方将此数据发送给接收方</p></li><li><p>接收方进行校验。接收方的CRC 校验过程与生成过程类似，接收方接收了带校验和的帧后，用多项式G(x)来除。余数为0，则表示信息无错;否则要求发送方进行重传。</p></li></ol><p>注意:收发信息双方需使用相同的生成多项式</p><p>海明码:<br>本质也是利用奇偶性来检错和纠错的检验方法，构成方法是在数据位之间的确定位置上插入k个校验位，通过扩大码距实现检错和纠错。设数据位是n位，校验位是k位，则n和k必须满足以下关系:<br>2^k-1&gt;&#x3D;n+k.</p><h3 id="计算机体系结构"><a href="#计算机体系结构" class="headerlink" title="计算机体系结构"></a>计算机体系结构</h3><h4 id="体系结构分类"><a href="#体系结构分类" class="headerlink" title="体系结构分类"></a>体系结构分类</h4><table><thead><tr><th>体系结构类型</th><th>结构</th><th>关键特性</th><th>代表</th></tr></thead><tbody><tr><td>SISD</td><td>控制部分:一个；处理器:一个；主存模块:一个</td><td></td><td>单处理机系统</td></tr><tr><td>SIMD</td><td>控制部分:一个；处理器:多个；主存模块:多个</td><td>各处理器以异步的形式执行同一条指令</td><td>并行处理机、阵列处理机、超级向量处理机</td></tr><tr><td>MISD</td><td>控制部分:多个；处理器:一个；主存模块:多个</td><td>被证明不可能，至少是不实际</td><td>日前没有，有文献称流水线计算机为此类</td></tr><tr><td>MIMD</td><td>控制部分:多个；处理器:多个；主存模块:多个</td><td>能够实现作业、任务、指令等各级全面并行</td><td>多处理机系统、多计算机</td></tr></tbody></table><p>按处理机的数量进行分类: 单处理系统(一个处理单元和其他设备集成厂并行处理系统(两个以上的处理机互联)分布式处理系统(<br>物理上远距离且松合的多计算机系统)</p><p>Flynn分类法:<br>分类有两个因素，即指令流和数据流，指令流由控制部分处理，每一个控制部分处理一条指令流，多指令流就有多个控制部分;数据流由处理器来处理，每一个处理器处理一条数据流，多数据流就有多个处理器;至于主存模块，是用来存储的，存储指令流或者数据流，因此，无论是多指令流还是多数据流，都需要多个主存模块来存储，对于主存模块，指令和数据都一样。</p><p>依据计算机特性，是由指令来控制数据的传输，因此，一条指令可以控制一条或多条数据流，但一条数据流不能被多条指令控制，否则会出错，就如同上级命令太多还互相冲突不知道该执行哪个，因此多指令单数据MISD不可能。</p><h4 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h4><p>计算机指令的组成:<br>一条指令由操作码和操作数两部分组成，操作码决定要完成的操作，操作数指参加运算的数据及其所在的单元地址在计算机中，操作要求和操作数地址都由二进制数码表示，分别称作操作码和地址码，整条指令以二进制编码的形式存放在存储器中。</p><p>计算机指令执行过程:<br>取指令-一分析指令–执行指令三个步骤，首先将程序计数器PC中的指令地址取出，送入地址总线，CPU依据指令地址去内存中取出指令内容存入指令寄存器I;而后由指令译码器进行分析，分析指令操作码;最后执行指令，取出指令执行所需的源操作数。</p><p>指令寻址方式</p><ul><li>顺序寻址方式:当执行一段程序时，是一条指令接着一条指令地顺序执行</li><li>跳跃寻址方式:指下一条指令的地址码不是由程序计数器给出，而是由本条指令直接给出。程序跳跃后，按新的指令地址开始顺序执行。因此，程序计数器的内容也必须相应改变，以便及时跟踪新的指令地址。</li></ul><p>指令操作数的寻址方式</p><ul><li>立即寻址方式·指令的地址码字段指出的不是地址，而是操作数本身</li><li>直接寻址方式在指令的地址字段中直接指出操作数在主存中的地址。</li><li>间接寻址方式:指令地址码字段所指向的存储单元中存储的是操作数的地址</li><li>寄存器寻址方式:指令中的地址码是寄存器的编号</li><li>基址寻址方式:将基址寄存器的内容加上指令中的形式地址而形成操作数的有效地址，其优点是可以扩大寻址能力。</li><li>变址寻址方式:变址寻址方式计算有效地址的方法与基址寻址方式很相似，它是将变址寄存器的内容加上指令中的形式地址而形成操作数的有效地址。</li></ul><p>CISC是复杂指令系统兼容性强，指令繁多、长度可变，由微程序实现;</p><p>RISC是精简指令系统，指令少，使用频率接近，主要依靠硬件实现(通用寄存器硬布线逻辑控制)。</p><table><thead><tr><th>指令系统类型</th><th>指令</th><th>寻址方式</th><th>实现方式</th><th>其他</th></tr></thead><tbody><tr><td>CISC</td><td>数量多，使用频率差别大可变长格式</td><td>支持多种</td><td>微程序控制技术</td><td>研制周期长</td></tr><tr><td>RISC</td><td>数量少，使用频率接近定长格式，大部分为单周期指令，操作寄存器，只有Load&#x2F;Store操作:内存</td><td>支持方式少</td><td>增加了通用寄存器;硬布线逻辑控制为主:适合采用流水线</td><td>优化编译，有效支持高级语言</td></tr></tbody></table><p>指令流水线原理:<br>将指令分成不同段，每段由不同的部分去处理，因此可以产生叠加的效果，所有的部件去处理指令的不同段</p><p>RISC中的流水线技术:</p><ol><li>超流水线 (super Pipe Line) 技术。它通过细化流水、增加级数和提高主频，使得在每个机器周期内能完成一个甚至两个浮点操作。其实质是以时间换取空间。</li><li>超标量 (super Scalar) 术。它通过内装多条流水线来同时执行多个处理，其时钟频率虽然与一般流水接近，却有更小的CPI。其实质是以空间换取时间。</li><li>超长指令字 (Very Long Instruction Word，VLIW) 技术VLIW 和超标量都是20 世纪80<br>年代出现的概念，其共同点是要同时执行多条指令，其不同在于超标量依靠硬件来实现并行处理的调度，VLIW 则充分发挥软件的作用，而使硬件简化性能提高。</li></ol><p>流水线时间计算</p><ul><li><p>流水线周期:指令分成不同执行段，其中执行时间最长的段为流水线周期。</p></li><li><p>流水线执行时间:1条指令总执行时间+ (总指令条数-1)*流水线周期</p></li><li><p>流水线吞吐率计算:吞吐率即单位时间内执行的指令条数。</p><p>公式:指令条数&#x2F;流水线执行时间。</p></li><li><p>流水线的加速比计算:加速比即使用流水线后的效率提升度，即比不使用流水线快了多少倍，越高表明流水线效率越高，公式:<br>不使用流水线执行时间&#x2F;使用流水线执行时间</p></li></ul><h4 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h4><p>计算机采用分级存储体系的主要目的是为了解决存储容量、成本和速度之间的矛盾问题。</p><p>两级存储:Cache-主存、主存-辅存(虚拟存储体系)</p><p>局部性原理:总的来说，在CPU运行时，所访问的数据会趋向于一个较小的局部空间地址内，包括下面两个方面:</p><p>时间局部性原理:如果一个数据项正在被访问，那么在近期它很可能会被再次访问，即在相邻的时间里会访问同一个数据项。</p><p>空间局部性原理:在最近的将来会用到的数据的地址和现在正在访问的数据地址很可能是相近的，即相邻的空间地址会被连续访问。</p><p>高速缓存Cache用来存储当前最活跃的程序和数据，直接与CPU交互，位于CPU和主存之间，容量小，速度为内存的5-10倍，由半导体材料构成。其内容是主存内存的副本拷贝，对于程序员来说是透明的。</p><p>Cache由控制部分和存储器组成，存储器存储数据，控制部分判断CPU要访问的数据是否在Cache中，在则命中，不在则依据一定的算法从主存中替换。</p><p>地址映射:<br>在CPU工作时，送出的是主存单元的地址，而应从Cache存储器中读&#x2F;写信息。这就需要将主存地址转换为Cache存储器地址，这种地址的转换称为地址映像，由硬件自动完成映射，分为下列三种方法:</p><ul><li>直接映像:将cache存储器等分成块，主存也等分成块并编号主存中的块与Cache中的块的对应关系是固定的，也即二者块号相同才能命中。地址变换简单但不灵活，容易造成资源浪费。</li><li>全相联映像:<br>同样都等分成块并编号。主存中任意一块都与Cache中任意一块对应。因此可以随意调入Cache任意位置，但地址变换复杂，速度较慢。因为主存可以随意调入Cache任意块，只有当Cache满了才会发生块冲突，是最不容易发生块冲突的映像方式</li><li>组组相连映像:前面两种方式的结合将Cache存储器先分块再分组，主存也同样先分块再分组，组间采用直接映像，即主存中组号与Cache中组号相同的组才能命中，但是组内全相联映像，也即组号相同的两个组内的所有块可以任意调换。</li></ul><p>替换算法的目标就是使Cache 获得尽可能高的命中率。</p><p>常用算法有如下几种:</p><ol><li>随机替换算法。就是用随机数发生器产生一个要替换的块号，将该块替换出去</li><li>先进先出算法。就是将最先进入Cache 的信息块替换出去</li><li>近期最少使用算法。这种方法是将近期最少使用的Cache 中的信息块替换出去</li><li>优化替换算法这种方法必须先执行一次程序，统计cache 的替换情况有了这样的先验信息，在第二次执行该程序时便可以用最有效的方式来替换。</li></ol><p>命中率及平均时间</p><p>Cache有一个命中率的概念，即当CPU所访问的数据在Cache中时，命中，直接从Cache中读取数据，设读取一次Cache时间为1ns，若CPU访问的数据不在Cache中则需要从内存中读取，设读取一次内存的时间为1000ns，若在CPU多次读取数据过程中，有90%命中Cache，则CPU读取一次的平均时间为(<br>90%*1+10%*1000)ns</p><p>主存编址计算也是重点考点。</p><p>磁盘结构和参数</p><p>磁盘有正反两个盘面，每个盘面有多个同心圆，每个同心圆是一个磁道，每个同心圆又被划分为多个扇区，数据就被存放在一个个扇区中。</p><p>磁头首先要寻找到对应的磁道，然后等待磁盘进行周期旋转，旋转到指定的扇区，才能读取到对应的数据，因此，会产生寻道时间和等待时间。公式为:<br>存取时间&#x3D;寻道时间+等待时间(平均定位时间+转动延迟)</p><p>注意: 寻道时间是指磁头移动到磁道所需的时间;等待时间为等待读写的扇区转到磁头下方所用的时间。</p><p>磁盘调度算法</p><p>之前已经说过，磁盘数据的读取时间分为寻道时间+旋转时间，也即先找到对应的磁道，而后再旋转到对应的扇区才能读取数据，其中寻道时间耗时最长，需要重点调度，</p><p>有如下调度算法:</p><ul><li>先来先服务FCFS:根据进程请求访问磁盘的先后顺序进行调度</li><li>最短寻道时间优先SSTF: 请求访问的磁道与当前磁道最近的进程优先调度，使得每次的寻道时间最短。会产生“饥饿”现象，即远处进程可能永远无法访问。</li><li>扫描算法SCAN:又称“电梯算法”，磁头在磁盘上双向移动，其会选择离磁头当前所在磁道最近的请求访问的磁道，并且与磁头移动方向一致，磁头永远都是从里向外或者从外向里一直移动完才掉头，与电梯类似。</li><li>单向扫描调度算法CSCAN:与SCAN不同的是，其只做单向移动，即只能从里向外或者从外向里。</li></ul><h4 id="输入-输出技术"><a href="#输入-输出技术" class="headerlink" title="输入&#x2F;输出技术"></a>输入&#x2F;输出技术</h4><p>计算机系统中存在多种内存与接口地址的编址方法，常见的是下面两种</p><ol><li><p>内存与接口地址独立编址方法</p><p>内存地址和接口地址是完全独立的两个地址空间。访问数据时所使用的指令也完全不同，用于接口的指令只用于接口的读&#x2F;写，其余的指令全都是用于内存的因此，在编程序或读程序时很易使用和辨认。这种编址方法的缺点是用于接口的指令太少、功能太弱</p></li><li><p>内存与接口地址统一编址方法</p><p>内存地址和接口地址统一在一个公共的地址空间里，即内存单元和接口共用地址空间，优点是原则上用于内存的指今全都可以用于接口，这就大大地增强了对接口的操作功能，而且在指令上也不再区分内存或接口指令。该编址方法的缺点就在于整个地址空间被分成两部分，其中一部分分配给接口使用，剩余的为内存所用，这经常会导致内存地址不连续</p></li></ol><p>计算机和外设间的数据交互方式</p><ul><li>程序控制(查询)方式: CPU主动查询外设是否完成数据传输，效率极低</li><li>程序中断方式:<br>外设完成数据传输后，向CPU发送中断，等待CPU处理数据效率相对较高。中断响应时间指的是从发出中断请求到开始进入中断处理程序中断处理时间指的是从中断处理开始到中断处理结束。中断向量提供中断服务程序的入口地址。多级中断嵌套，使用堆栈来保护断点和现场。</li><li>DMA方式(直接主存存取): CPU只需完成必要的初始化等操作，数据传输的整个过程都由DMA控制器来完成，在主存和外设之间建立直接的数据通路效率很高。</li></ul><p>在一个总线周期结束后，CPU会响应DMA请求开始读取数据;CPU响应程序中断方式请求是在一条指令执行结束时。</p><h4 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h4><p>总线 (Bus)，是指计算机设备和设备之间传输信息的公共数据通道。总线是连接计算机硬件系统内多种设备的通信线路，它的一个重要特征是由总线上的所有设备共享，因此可以将计算机系统内的多种设备连接到总线上</p><p>从广义上讲，任何连接两个以上电子元器件的导线都可以称为总线，通常分为以下三类:</p><ul><li>内部总线:内部芯片级别的总线，芯片与处理器之间通信的总线</li><li>用于计算机内各部分之间的连接，具体分为数据总线系统总线:是板级总线，(并行数据传输位数)地址总线(<br>系统可管理的内存空间的大小) 、控制总线(传送控制命令)。代表的有ISA总线、EISA总线、PCI总线。</li><li>外部总线:设备一级的总线，微机和外部设备的总线。代表的有RS232(串行总线)、SCSI(并行总线)、USB (<br>通用串行总线，即插即用，支持热插拔)。</li></ul><h3 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h3><h4 id="可靠性计算"><a href="#可靠性计算" class="headerlink" title="可靠性计算"></a>可靠性计算</h4><ul><li>可靠性指标平均无故障时间MTTF&#x3D;1&#x2F;失效率</li><li>平均故障修复时间MTTR&#x3D;1&#x2F;修复率</li><li>平均故障间隔时间MTBF&#x3D;MTTF+MTTR。</li><li>系统可用性&#x3D;MTTF&#x2F;(MTTF+MTTR)*100%</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教材-系统分析师综合教程</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>认识股权</title>
    <link href="/2024/01/06/understand_equity/"/>
    <url>/2024/01/06/understand_equity/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于<code>公司股权</code>的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于为什么写这篇文章？</p><p>曾经号召万众创业，到如今政策收紧。水多了加面，面多了加水，下一轮万众创业周期，我等必将顺势而起。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="注册制"><a href="#注册制" class="headerlink" title="注册制"></a>注册制</h3><p>课前秀:干一家世界500强需要多少时间?</p><p>2019年7月22日，美国《财富》杂志发布2019年世界500强排行榜。。小米集团首次登榜，排名468位，在上榜的全球互联网企业中排名第7，在上榜的中国企业中排名第112位</p><p>小米集团是哪年成立的呢?是2010年</p><p>那小米在这8年中究竟做对了什么呢?<br>我从从产业、机制、人才上，来看一看我个人的看法</p><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>股权</category>
      
    </categories>
    
    
    <tags>
      
      <tag>股权分析</tag>
      
      <tag>股权设计</tag>
      
      <tag>公司</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理-408-概述</title>
    <link href="/2024/01/06/system_arch1/"/>
    <url>/2024/01/06/system_arch1/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于 <code>408机组</code> 备考经验相关的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>学过一些计算机基础课，<code>计算机体系结构</code>、<code>计算机网络</code>、<code>操作系统</code>、<code>数据架构</code>、<code>软件工程</code>、<code>UML建模</code>等，23 年下半年考的<code>软考中级·软件设计师</code>，学过用过近十几门编程语言。有算法竞赛经验，但是很菜。编程能力个人感觉较差，理论能力一般。</p><p>本章需要一定的基础。</p><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="设计一台简单的计算机"><a href="#设计一台简单的计算机" class="headerlink" title="设计一台简单的计算机"></a>设计一台简单的计算机</h3><p>什么是计算机？冯诺依曼模型你了解吗？</p><p>计算机的功能：</p><ul><li>逻辑运算-与或非门</li><li>算术运算-加减乘除</li><li>存储功能</li></ul><h3 id="计算机史"><a href="#计算机史" class="headerlink" title="计算机史"></a>计算机史</h3><p>408 大纲已删除，非统考保留。</p><h4 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h4><p><code>ENIAC-1946</code>：世界上第一台计算机，组成部分是电子管。</p><table><thead><tr><th>发展阶段</th><th>时间</th><th>技术</th><th>速度&#x2F;(次&#x2F;秒)</th></tr></thead><tbody><tr><td>一</td><td>1946~1957</td><td>电子管</td><td>40，000</td></tr><tr><td>二</td><td>1958~1964</td><td>晶体管</td><td>200，000</td></tr><tr><td>三</td><td>1965~1971</td><td>中、小规模集成电路</td><td>1，000，000</td></tr><tr><td>四</td><td>1972~1977</td><td>大规模集成电路</td><td>10，000，000</td></tr><tr><td>五</td><td>1978~现在</td><td>超大规模集成电路</td><td>100，000，000</td></tr></tbody></table><h4 id="摩尔定律"><a href="#摩尔定律" class="headerlink" title="摩尔定律"></a>摩尔定律</h4><p>每平方英寸电路板上的晶体管数量每 18 个月翻一倍</p><h4 id="微处理器的出现和发展"><a href="#微处理器的出现和发展" class="headerlink" title="微处理器的出现和发展"></a>微处理器的出现和发展</h4><p>把运算器和控制器合并到一块芯片上制造出了微处理器，经历了 4 位、8 位、16 位、32 位和 64 位微处理器几个发展阶段:</p><h4 id="半导体存储器的发展"><a href="#半导体存储器的发展" class="headerlink" title="半导体存储器的发展"></a>半导体存储器的发展</h4><p>经历了 1KB、4KB、16KB、64KB、256KB、1MB、4MB16MB、64MB、…、1GB 等阶段，每个新阶段在容量上是前一阶段的 4 倍</p><h4 id="计算机软件发展"><a href="#计算机软件发展" class="headerlink" title="计算机软件发展"></a>计算机软件发展</h4><p>计算机语言的发展从机器语言到汇编语言再到高级语言(FORTRAN、CJava 等)</p><p>操作系统的发展语言发展到一定程度出现了操作系统 (DOS、Windows.UNIX、macOS 等)，它可以协调管理计算机中的各种软硬件资源。</p><h3 id="层次结构-主存"><a href="#层次结构-主存" class="headerlink" title="层次结构-主存"></a>层次结构-主存</h3><p>主存的组成：</p><ul><li><p>M-存储器</p></li><li><p>MAR-地址寄存器</p></li><li><p>MDR-数据寄存器</p><p>MDR 的长度等于存储单元的长度，称之为存储字长(字)，即存储单元中存储基元的个数;</p><p>存储字长可以是 8 位、16 位或 32 位等，因不同的机器设计而不同;</p><p>每 8 个存储基元称之为一个字节，存储字长为字节的整数倍;</p><p>位 (bit) 、字节 (byte) 、字 (word)</p></li></ul><h3 id="层次结构-运算器与控制器"><a href="#层次结构-运算器与控制器" class="headerlink" title="层次结构-运算器与控制器"></a>层次结构-运算器与控制器</h3><p>运算器：</p><ul><li>MQ-乘商寄存器</li><li>ACC-累加器</li><li>算术逻辑单元</li><li>操作数寄存器</li></ul><table><thead><tr><th></th><th>加</th><th>减</th><th>乘</th><th>除</th></tr></thead><tbody><tr><td>ACC</td><td>被加数与和</td><td>被减数与差</td><td>乘积高位</td><td>被除数和余数</td></tr><tr><td>MQ</td><td></td><td></td><td>乘数和乘积低位</td><td>商</td></tr><tr><td>X</td><td>加数</td><td>减数</td><td>被乘数</td><td>除数</td></tr></tbody></table><p>控制器：</p><ul><li>CU-控制单元</li><li>IR-指令寄存器</li><li>PC-程序计数器</li></ul><p>指令：操作码+地址码</p><h3 id="层次结构-IO-设备及组织方式"><a href="#层次结构-IO-设备及组织方式" class="headerlink" title="层次结构-IO 设备及组织方式"></a>层次结构-IO 设备及组织方式</h3><ul><li>输入设备</li><li>输出设备</li></ul><p>组织方式：</p><ul><li>冯诺依曼模型</li><li>图灵机</li></ul><h3 id="层次结构-五层结构"><a href="#层次结构-五层结构" class="headerlink" title="层次结构-五层结构"></a>层次结构-五层结构</h3><ul><li>第四层：虚拟机器 M4 - 高级语言机</li><li>第三层：虚拟机器 M3 - 汇编语言机</li><li>第二层：虚拟机器 M2 - 操作系统机</li></ul><p>以上软件层，下面是硬件层</p><ul><li>第一层：传统机器 M1 - 机器语言机</li><li>第零层：微程序机器 M0 - 机器语言机</li></ul><p>计算机软件与硬件的关系</p><ul><li><p>硬件和软件互相依存</p><p>硬件是软件工作的物质基础，软件的正常工作是硬件发挥作用的唯一途径:</p></li><li><p>硬件和软件无严格界线</p><p>在许多情况下，计算机的某些功能既可以由硬件实现，也可以由软件来实现因此，硬件与软件在一定意义上说没有严格的界面;</p></li><li><p>硬件和软件协同发展</p><p>计算机软件随硬件技术的发展而发展，而软件的不断发展与完善又促进硬件的更新，两者交织发展，缺一不可。</p></li></ul><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><ul><li><p>存储容量</p><p>存储单元个数 x 存储字长&#x2F;8 字节(byte)</p><p>MAR 的位数反映了最大存储单元个数</p><p>MDR 的位数等于存储字长 ;</p></li><li><p>机器字长</p><p>进行一次整数运算所能处理的最大二进制位数的整数倍</p><p>一般机器字长为一字节(8bit)</p></li><li><p>运算速度</p><p>吞吐量:单位时间内的数据处理量</p><p>响应时间:从用户向计算机发出一个请求，到计算机返回这个请求对应的结果之间的时间;(包括 CPU 处理时间和存储器访问、操作系统开销、外设访问时间;)</p><p>CPU 时钟周期: 节拍脉冲时间（机器中最小的时间单位）</p></li><li><p>主频</p><p>CPU 时钟周期的倒数</p></li><li><p>CPI:</p><p>执行一条指令所需要的时钟周期数</p></li><li><p>MIPS</p></li><li><p>FLOPS</p></li></ul><h3 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>天勤 408</li><li>王道 408</li><li>计组-软硬件接口</li></ul><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
      <tag>408</tag>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>智能家居</title>
    <link href="/2024/01/05/smart_home/"/>
    <url>/2024/01/05/smart_home/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于居家智能家居相关的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><h2 id="智能家居"><a href="#智能家居" class="headerlink" title="智能家居"></a>智能家居</h2><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>组网方式</p><ul><li>有线 mesh 组网（需要独立规划）</li><li>无线 mesh 组网（每个房间都拉个网线即可）</li><li>AC + AP（钞能力，启动！）</li></ul><table><thead><tr><th></th><th>光猫</th><th>交换机</th><th>主路由</th><th>副路由</th></tr></thead><tbody><tr><td>放置位置</td><td>弱电箱</td><td>弱电箱</td><td>电视柜或客餐厅空调进风口吊顶</td><td>主卧进门处，空调进风口吊顶</td></tr><tr><td>预留方式</td><td>排插供电</td><td>排插供电</td><td>两根网线和电源插座</td><td>一根网线和电源插座</td></tr></tbody></table><p>主要目的是主副路由尽量覆盖全屋即可。如果是极客，喜欢折腾，自己在家坐<code>NAS</code>等，光猫，交换机，在机柜里放一起就行。</p><p>至于具体怎么选型，以下会介绍。</p><h4 id="光猫"><a href="#光猫" class="headerlink" title="光猫"></a>光猫</h4><h4 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h4><h4 id="主路由"><a href="#主路由" class="headerlink" title="主路由"></a>主路由</h4><h4 id="副路由"><a href="#副路由" class="headerlink" title="副路由"></a>副路由</h4><h3 id="智能安防"><a href="#智能安防" class="headerlink" title="智能安防"></a>智能安防</h3><table><thead><tr><th></th><th>智能门</th><th>智能门锁</th><th>摄像头</th></tr></thead><tbody><tr><td>放置位置</td><td>玄关入户处</td><td>玄关入户处</td><td>根据个人需求，门口、阳台区域监控，客餐厅、活动区监控，宠物区域监控</td></tr><tr><td>预留方式</td><td>需要电源</td><td>一般都是电池的，预留电源插座，给门锁电池充电即可</td><td>电源插座，室外需要网线，室内 WiFi 即可</td></tr></tbody></table><table><thead><tr><th></th><th>烟雾报警器</th><th>水浸报警器</th><th>天然气报警器</th></tr></thead><tbody><tr><td>放置位置</td><td>厨房吊顶</td><td>水管、水池下方</td><td>厨房吊顶</td></tr><tr><td>预留方式</td><td>纽扣电池</td><td>纽扣电池</td><td>电源插座</td></tr></tbody></table><h4 id="智能门"><a href="#智能门" class="headerlink" title="智能门"></a>智能门</h4><h4 id="智能门锁"><a href="#智能门锁" class="headerlink" title="智能门锁"></a>智能门锁</h4><h4 id="摄像头"><a href="#摄像头" class="headerlink" title="摄像头"></a>摄像头</h4><h4 id="烟雾报警器"><a href="#烟雾报警器" class="headerlink" title="烟雾报警器"></a>烟雾报警器</h4><h4 id="水浸报警器"><a href="#水浸报警器" class="headerlink" title="水浸报警器"></a>水浸报警器</h4><h4 id="天然气报警器"><a href="#天然气报警器" class="headerlink" title="天然气报警器"></a>天然气报警器</h4><h3 id="智能灯光开关"><a href="#智能灯光开关" class="headerlink" title="智能灯光开关"></a>智能灯光开关</h3><p>灯具按照规划让电工做就行了。注意磁吸轨道灯只需要给轨道供电，不需要给每个灯供电。灯带需要预留三芯线，如果灯控和灯带近就不需要了，如果远，还是需要的。</p><p>开关，更简单，电工都会。无线开关是纽扣电池的，哪里需要背胶粘一下就行了。其他的都是标准件，底盒基本上都一样。</p><p>无线开关的纽扣电池可以用三年，整体价格也便宜，如果灯控支持，适合选用。如果是旧房改造，大多数只能选用智能开关。</p><h4 id="吸顶灯"><a href="#吸顶灯" class="headerlink" title="吸顶灯"></a>吸顶灯</h4><h4 id="磁吸轨道灯"><a href="#磁吸轨道灯" class="headerlink" title="磁吸轨道灯"></a>磁吸轨道灯</h4><h4 id="筒射灯"><a href="#筒射灯" class="headerlink" title="筒射灯"></a>筒射灯</h4><h4 id="灯带"><a href="#灯带" class="headerlink" title="灯带"></a>灯带</h4><h4 id="单火版智能开关"><a href="#单火版智能开关" class="headerlink" title="单火版智能开关"></a>单火版智能开关</h4><h4 id="零火版智能开关"><a href="#零火版智能开关" class="headerlink" title="零火版智能开关"></a>零火版智能开关</h4><h4 id="凌动开关"><a href="#凌动开关" class="headerlink" title="凌动开关"></a>凌动开关</h4><h4 id="无线开关"><a href="#无线开关" class="headerlink" title="无线开关"></a>无线开关</h4><h4 id="全面屏开关"><a href="#全面屏开关" class="headerlink" title="全面屏开关"></a>全面屏开关</h4><h3 id="智能窗帘"><a href="#智能窗帘" class="headerlink" title="智能窗帘"></a>智能窗帘</h3><p>尽量每个电机都留一个电源口，每个轨道一个电机。预算有限，用一个也行，找师傅设计一下，都隐藏在轨道盒内更美观，也可以布置氛围灯。</p><h4 id="开合帘窗帘电机"><a href="#开合帘窗帘电机" class="headerlink" title="开合帘窗帘电机"></a>开合帘窗帘电机</h4><h4 id="梦幻帘电机"><a href="#梦幻帘电机" class="headerlink" title="梦幻帘电机"></a>梦幻帘电机</h4><h4 id="卷帘电机"><a href="#卷帘电机" class="headerlink" title="卷帘电机"></a>卷帘电机</h4><h4 id="窗帘伴侣"><a href="#窗帘伴侣" class="headerlink" title="窗帘伴侣"></a>窗帘伴侣</h4><h4 id="推窗器"><a href="#推窗器" class="headerlink" title="推窗器"></a>推窗器</h4><h3 id="传感器"><a href="#传感器" class="headerlink" title="传感器"></a>传感器</h3><p>最好是买来试一试，玩明白了再规划，不好用就退货。</p><table><thead><tr><th></th><th>人体传感器</th><th>门窗传感器</th><th>温湿度传感器</th><th>空间传感器</th><th>人在传感器</th></tr></thead><tbody><tr><td>放置位置</td><td>玄关，过道，床下</td><td>门上，床上</td><td>各个房间</td><td>大空间</td><td>人常逗留位置</td></tr><tr><td>预留方式</td><td>纽扣电池</td><td>纽扣电池</td><td>纽扣电池</td><td>电源插座</td><td>纽扣电池或电源供电</td></tr></tbody></table><h4 id="人体传感器"><a href="#人体传感器" class="headerlink" title="人体传感器"></a>人体传感器</h4><h4 id="门窗传感器"><a href="#门窗传感器" class="headerlink" title="门窗传感器"></a>门窗传感器</h4><h4 id="温湿度传感器"><a href="#温湿度传感器" class="headerlink" title="温湿度传感器"></a>温湿度传感器</h4><h4 id="人在传感器"><a href="#人在传感器" class="headerlink" title="人在传感器"></a>人在传感器</h4><h4 id="空间传感器"><a href="#空间传感器" class="headerlink" title="空间传感器"></a>空间传感器</h4><h3 id="智能音箱"><a href="#智能音箱" class="headerlink" title="智能音箱"></a>智能音箱</h3><p>智慧屏上墙，可以当中控，双音箱可以做立体声。</p><h4 id="家庭智慧屏"><a href="#家庭智慧屏" class="headerlink" title="家庭智慧屏"></a>家庭智慧屏</h4><h4 id="小爱触屏音箱"><a href="#小爱触屏音箱" class="headerlink" title="小爱触屏音箱"></a>小爱触屏音箱</h4><h4 id="Xiaomi-Sound-智能音响"><a href="#Xiaomi-Sound-智能音响" class="headerlink" title="Xiaomi Sound 智能音响"></a>Xiaomi Sound 智能音响</h4><h4 id="Homepod-Mini-智能音响"><a href="#Homepod-Mini-智能音响" class="headerlink" title="Homepod Mini 智能音响"></a>Homepod Mini 智能音响</h4><h3 id="智能网关"><a href="#智能网关" class="headerlink" title="智能网关"></a>智能网关</h3><p>好的网关都要接网线,可以和路由器放一起.需要预留插座.</p><h4 id="Aqara-E1"><a href="#Aqara-E1" class="headerlink" title="Aqara E1"></a>Aqara E1</h4><h4 id="小米中枢网关"><a href="#小米中枢网关" class="headerlink" title="小米中枢网关"></a>小米中枢网关</h4><h4 id="易来-pro-网关"><a href="#易来-pro-网关" class="headerlink" title="易来 pro 网关"></a>易来 pro 网关</h4><h4 id="Aqara-M1S"><a href="#Aqara-M1S" class="headerlink" title="Aqara M1S"></a>Aqara M1S</h4><h4 id="Aqara-M2-网关"><a href="#Aqara-M2-网关" class="headerlink" title="Aqara M2 网关"></a>Aqara M2 网关</h4><h4 id="小米多模网关"><a href="#小米多模网关" class="headerlink" title="小米多模网关"></a>小米多模网关</h4><h4 id="小燕在家网关"><a href="#小燕在家网关" class="headerlink" title="小燕在家网关"></a>小燕在家网关</h4><h3 id="智能空调"><a href="#智能空调" class="headerlink" title="智能空调"></a>智能空调</h3><table><thead><tr><th></th><th>空调伴侣</th><th>小超人</th><th>VRF</th></tr></thead><tbody><tr><td>放置位置</td><td>壁挂式空调</td><td>接入风管机</td><td>任意内机</td></tr><tr><td>预留方式</td><td>空调电源插座</td><td></td><td>根据需要预留,电源和网线</td></tr></tbody></table><h4 id="空调伴侣"><a href="#空调伴侣" class="headerlink" title="空调伴侣"></a>空调伴侣</h4><h4 id="小超人"><a href="#小超人" class="headerlink" title="小超人"></a>小超人</h4><h4 id="VRF"><a href="#VRF" class="headerlink" title="VRF"></a>VRF</h4><h3 id="智能家电"><a href="#智能家电" class="headerlink" title="智能家电"></a>智能家电</h3><table><thead><tr><th></th><th>智能浴霸</th><th>智能晾衣架</th><th>扫地机器人</th><th>智能马桶</th></tr></thead><tbody><tr><td>放置位置</td><td>浴室吊顶</td><td>阳台</td><td>有上下水的位置,预留好尺寸</td><td>卫生间</td></tr><tr><td>预留方式</td><td>电源插座</td><td>电源插座</td><td>电源插座</td><td>电源插座</td></tr></tbody></table><h4 id="智能浴霸"><a href="#智能浴霸" class="headerlink" title="智能浴霸"></a>智能浴霸</h4><h4 id="智能晾衣架"><a href="#智能晾衣架" class="headerlink" title="智能晾衣架"></a>智能晾衣架</h4><h4 id="扫地机器人"><a href="#扫地机器人" class="headerlink" title="扫地机器人"></a>扫地机器人</h4><h4 id="智能马桶"><a href="#智能马桶" class="headerlink" title="智能马桶"></a>智能马桶</h4><h4 id="新风空调"><a href="#新风空调" class="headerlink" title="新风空调"></a>新风空调</h4><h4 id="空气净化器"><a href="#空气净化器" class="headerlink" title="空气净化器"></a>空气净化器</h4><h4 id="除湿器"><a href="#除湿器" class="headerlink" title="除湿器"></a>除湿器</h4><h4 id="增湿器"><a href="#增湿器" class="headerlink" title="增湿器"></a>增湿器</h4><h4 id="热水器"><a href="#热水器" class="headerlink" title="热水器"></a>热水器</h4><h4 id="净水器"><a href="#净水器" class="headerlink" title="净水器"></a>净水器</h4><h4 id="电饭煲"><a href="#电饭煲" class="headerlink" title="电饭煲"></a>电饭煲</h4><h4 id="空气炸锅"><a href="#空气炸锅" class="headerlink" title="空气炸锅"></a>空气炸锅</h4><h3 id="小家电"><a href="#小家电" class="headerlink" title="小家电"></a>小家电</h3><h4 id="香薰机"><a href="#香薰机" class="headerlink" title="香薰机"></a>香薰机</h4><h4 id="驱蚊器"><a href="#驱蚊器" class="headerlink" title="驱蚊器"></a>驱蚊器</h4><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p><code>能事莫促迫，快手多粗疏.</code></p><p>内容挺多,需要慢慢整理,闲暇时间会继续补充.</p>]]></content>
    
    
    <categories>
      
      <category>吃喝玩乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>养生</tag>
      
      <tag>智能家居</tag>
      
      <tag>居家生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日常理财</title>
    <link href="/2024/01/04/Financial_freedom1/"/>
    <url>/2024/01/04/Financial_freedom1/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于理财知识分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="金钱愿景与自我管理"><a href="#金钱愿景与自我管理" class="headerlink" title="金钱愿景与自我管理"></a>金钱愿景与自我管理</h3><p>金钱远景</p><ul><li>合理</li><li>精确</li></ul><p>金钱远景的 SMART 法则</p><ul><li>S 具体的</li><li>M 可衡量的</li><li>A 可以实现的</li><li>R 相关的</li><li>T 时效性的</li></ul><p>例子：</p><ul><li>S 具体的 – 带爸妈去泰国自由行 &#x2F;跟团 5 天 4 晚</li><li>M 可衡量的 – 总花费&#x3D;机票、酒店、餐费、景点、购物等</li><li>A 可以实现的 – 三人可以出发的时间段</li><li>R 相关的 – 这个目标实现后对你和家人的意义</li><li>T 时效性的 – 上述内容大概在什么时间可以准备好</li></ul><h3 id="金钱自由的第一步，整理自己的钱包"><a href="#金钱自由的第一步，整理自己的钱包" class="headerlink" title="金钱自由的第一步，整理自己的钱包"></a>金钱自由的第一步，整理自己的钱包</h3><p>钱包：只放和钱有关的且适量。</p><p><code>一个人应该有三个钱包，第一只是你实际上有多少钱；第二只是你的信用，人家钱包里的钞票，你可以调动多少；第三只呢，钱包给我，别人认为你有多少钱。--《繁花》</code></p><p>对于我们常说的借记卡，也就是储蓄卡，一般建议保留在三张以内，主要包括像工资卡或者是其他收入的卡片，一些不常用，但是绝对不能扔的卡片要好好的保管。比如说公积金的卡，对于信用卡更应该严谨，根据自己的使用规则尽量保持在三张以内。</p><p>第一张主要是个人的生活消费卡，第二张可以是公司的用途的卡。什么是公司用途的卡呢？比如说经常出差，或者是经常帮公司买东西需要垫付，这一些就应该单独开一张卡片，公和私分明对于我们金钱管理是非常有帮助的。</p><p>如果信用卡有好几张的同学建议你要精简一下，尤其不要以卡养卡非常的危险。</p><h3 id="手机支付时代的“金钱管理大坑"><a href="#手机支付时代的“金钱管理大坑" class="headerlink" title="手机支付时代的“金钱管理大坑"></a>手机支付时代的“金钱管理大坑</h3><p>给大家举一个例子，比方说现在我们要去商场买一件 3000 块钱的衣服，</p><p>给大家三种消费的选择。第一种，网购，我们在网上下了单，手指头轻轻一点，甚至是免密支付，然后坐等收货。第二种就是在商场进行刷卡，我们刷了卡之后签了名字，提着衣服回家，这是第二种。第三种就是从钱包当中掏出<br>3000 块钱，没有钱的就去 ATM 取 3000 块一一张数清楚之后给柜员，然后提着衣服回家。请问大家这三种对你来说哪一种最肉疼？</p><p>有科学研究表明，脑科学的研究当中指出，其实第三种对于大部分人来说是最疼的一个状态，这是为什么？是因为只有第三种，让我们的眼睛接受了足够长时间的刺激，是因为在人类的潜意识当中，手机上的转账只不过是一串数字，但是只有赤裸裸的货币色香味俱全的货币，才在分分钟的提醒着我们，这可是真的钱。我们对于三<br>d 立体的东西最有感觉，所谓的耳听为虚，眼见为实就是这个道理。因此无比便利的网购就会跳过这种本能的视觉刺激，</p><p>让我们停不下的去买买买，买的越多，能存下的是不是就越少？所以在电子时代的手机支付很难被好好管理，就是因为下面这 4<br>个原因。第一就是我们刚刚说到的，因为看不见，所以没感觉，因为看不到真真正正的钱，想不到自己为挣钱辛苦的付出，所以在付款的时候就没有感觉，反而觉得说扫码付款面部识别真的是太酷了。第二就是没有规划，所以买起来很随意。为什么没有规划？就是因为不清楚自己的行为习惯，甚至说从来都没有关注过。</p><p>第三就是因为没有目标，所以容易被诱惑。我认识一个姐姐她非常厉害，白手起家打拼 2000<br>年的时候，在工资不太高的时候，在北京买了一套房，当时他给我看他的账本，每一天的支出都准确的记录，他说在当时他脑海中只有一件事情，就是攒住一切可以攒住的钱，全家上下一起为买房而努力。所以每次想到他和我说这事儿的时候，我都觉得人其实只要有目标，没有到达不了的彼岸。第四就是大环境的影响。如果大家仔细的想一想，</p><p>从我们早上踏出家门的那一刻开始，我们就在频繁的接受着广告的刺激，比如说楼宇的广告，公交地铁站牌的广告， APP<br>首页的广告，浏览器的广告，朋友圈的广告，甚至是你听到大家在议论的，有人推荐的，各种各样的声音都在告诉我们应该买。所以不买的时候自己都感觉有一些奇怪。</p><p>我们作为个人一个很小的个体，在我们管理自己金钱的时候，就更加应该用企业的思维去做好自己的成本控制，从而最大化的实现盈利。而这努力开源，合理节流才是这道数学题最好的答案。</p><h3 id="信用卡、贷款软件-放纵-无法富足"><a href="#信用卡、贷款软件-放纵-无法富足" class="headerlink" title="信用卡、贷款软件 放纵&#x3D;无法富足"></a>信用卡、贷款软件 放纵&#x3D;无法富足</h3><p>有一种富裕叫做假富裕，就是穿着名牌开着好车，收入也不错，但是月月都存不下钱，甚至是入不敷出，他们很有可能有一大笔的消费，很有可能有固定的贷款，还有可能债务缠身，但是展现在外人面前就是光鲜亮丽，可是同学们千万不要被假象迷惑，因为这很有可能是坑。</p><p>有一些人看上去也是非常的有钱，可是他们其实债务缠身，怎么回事其实很简单，就是信用卡的套现，从最初的信用卡几千块钱套现，慢慢的以卡养卡滚雪球的积累了几十万的债务，而当金额如此之大的时候，再去调整就非常麻烦。</p><p>所以无论在什么情况下，都应该尽快的还清债务，尽可能避免去借债。因为当一个人总是在偿还债务，就等于说他真的是难以富足。同时我们要记得合理的使用信用卡带给你的福利，除非说你是一个数学非常优秀或者很有天分的人，不然不要沉迷于积分的兑换，信用卡的技巧，它只会无形当中吸走你的时间和精力，降低你开源的能力。因为毕竟和设计信用卡的人相比，我们薄弱的太多。</p><h2 id="钱包管理-为什么攒不下钱"><a href="#钱包管理-为什么攒不下钱" class="headerlink" title="钱包管理-为什么攒不下钱"></a>钱包管理-为什么攒不下钱</h2><h3 id="你“真的”知道你每个月的财务状况吗"><a href="#你“真的”知道你每个月的财务状况吗" class="headerlink" title="你“真的”知道你每个月的财务状况吗"></a>你“真的”知道你每个月的财务状况吗</h3><p>恩格尔系数：</p><table><thead><tr><th><code>最富裕</code></th><th><code>富裕</code></th><th><code>小康</code></th><th><code>温饱</code></th><th><code>贫困</code></th></tr></thead><tbody><tr><td>&lt;30%</td><td>30-40</td><td>40-50</td><td>50-60</td><td>&gt;60%</td></tr></tbody></table><table><thead><tr><th>收入</th><th>支出</th></tr></thead><tbody><tr><td>工资、租金、分红、兼职…</td><td>自己这代、父母那代、孩子那代</td></tr></tbody></table><p>消费记录统计</p><ul><li>找不全：多记录</li><li>看不懂：注意记录详情</li></ul><h3 id="记账-bug-解析-存钱失败的原因不赖你"><a href="#记账-bug-解析-存钱失败的原因不赖你" class="headerlink" title="记账 bug 解析 - 存钱失败的原因不赖你"></a>记账 bug 解析 - 存钱失败的原因不赖你</h3><p>原因</p><ul><li>账户复杂</li><li>分类杂乱、相互交叉</li></ul><p>结果</p><ul><li>无法分析、无法调整</li></ul><p>闭环记账</p><ul><li>分类记录</li><li>数据分析</li><li>建立预算</li><li>即时查找</li></ul><h3 id="神奇的金钱工具-思维导图初体验"><a href="#神奇的金钱工具-思维导图初体验" class="headerlink" title="神奇的金钱工具 - 思维导图初体验"></a>神奇的金钱工具 - 思维导图初体验</h3><p>思维导图：利于思维发散和思维梳理</p><p>构成：</p><ul><li>心</li><li>线</li><li>词</li><li>色</li><li>像</li><li>构</li></ul><p>记录手账</p><h2 id="钱包整理"><a href="#钱包整理" class="headerlink" title="钱包整理"></a>钱包整理</h2><h3 id="如何建立自己与金钱的关系"><a href="#如何建立自己与金钱的关系" class="headerlink" title="如何建立自己与金钱的关系"></a>如何建立自己与金钱的关系</h3><p>金钱的负面信念：</p><ul><li>原生家庭</li><li>自信心</li><li>钱为他人而花</li><li>挣钱很辛苦</li><li>挣钱需要狡诈的手段</li><li>有钱人都有不好的行为</li><li>有钱就变坏</li><li>谈钱伤感情</li><li>etc…</li></ul><p>金钱的正面信念</p><ul><li>增强自己获得金钱的能力</li><li>学习提升自己</li><li>加入更多利他的信念</li><li>不要浪费金钱</li><li>积累财富</li><li>享受金钱带来的快乐</li><li>etc…</li></ul><h3 id="信用卡、借记卡、借贷软件的规划方法"><a href="#信用卡、借记卡、借贷软件的规划方法" class="headerlink" title="信用卡、借记卡、借贷软件的规划方法"></a>信用卡、借记卡、借贷软件的规划方法</h3><p>前面的分享中，我们将卡分为入口卡和出口卡。</p><p><img src="https://at-luo-fu-web-img.oss-cn-hangzhou.aliyuncs.com/hexo/Financial_freedom/img.png" alt="规划"></p><p>不要以贷养贷。</p><h3 id="从冰箱入手的“金钱回流”方法"><a href="#从冰箱入手的“金钱回流”方法" class="headerlink" title="从冰箱入手的“金钱回流”方法"></a>从冰箱入手的“金钱回流”方法</h3><ul><li>审视冰箱全貌</li><li>检查卫生情况</li><li>觉察购买习惯</li><li>建立购买规划</li></ul><h2 id="如何搭建个性化的账目体系"><a href="#如何搭建个性化的账目体系" class="headerlink" title="如何搭建个性化的账目体系"></a>如何搭建个性化的账目体系</h2><h3 id="从新认识我们的政府"><a href="#从新认识我们的政府" class="headerlink" title="从新认识我们的政府"></a>从新认识我们的政府</h3><ul><li>政府体系建立<ul><li>部门与职能<br><img src="https://at-luo-fu-web-img.oss-cn-hangzhou.aliyuncs.com/hexo/Financial_freedom/img_1.png" alt="部门职能"></li></ul></li><li>月度记账方法</li><li>大数据分析方法</li><li>预算建立方法</li></ul><h3 id="用政府思维搭建金钱管理体系"><a href="#用政府思维搭建金钱管理体系" class="headerlink" title="用政府思维搭建金钱管理体系"></a>用政府思维搭建金钱管理体系</h3><p>参考政府部门，自己做一个思维导图。</p><ul><li>列自己有关的</li><li>想清楚这笔钱为了什么</li></ul><p><img src="https://at-luo-fu-web-img.oss-cn-hangzhou.aliyuncs.com/hexo/Financial_freedom/img_2.png" alt="例子1"></p><p><img src="https://at-luo-fu-web-img.oss-cn-hangzhou.aliyuncs.com/hexo/Financial_freedom/img_3.png" alt="例子2"></p><p>不要出现模糊不清的字眼</p><ul><li>其他部门</li><li>淘宝</li><li>etc…</li></ul><h3 id="特殊的花费该怎么分类"><a href="#特殊的花费该怎么分类" class="headerlink" title="特殊的花费该怎么分类"></a>特殊的花费该怎么分类</h3><ul><li>和自己有关</li><li>为什么花这笔钱</li></ul><p>例子</p><ul><li>约会期间的餐费 （食品-农业部）</li><li>党费 （保险-人社）</li><li>工会费 （保险-人社）</li><li>丧葬费 （日常生活 - 民政）</li><li>集体捐款 （集体 - 人社）</li><li>相亲费 （目的 - 外交）</li><li>保险 （保险 - 人社）</li><li>孩子足球班费 （目的 - 教育&#x2F;健康-卫健委&#x2F;兴趣-文旅）</li></ul><h2 id="每日记账"><a href="#每日记账" class="headerlink" title="每日记账"></a>每日记账</h2><h3 id="随时随地的每日消费记录方法"><a href="#随时随地的每日消费记录方法" class="headerlink" title="随时随地的每日消费记录方法"></a>随时随地的每日消费记录方法</h3><p>记账方式</p><ul><li>纸质 - 不及时</li><li>电子表格</li><li>思维导图<br><img src="https://at-luo-fu-web-img.oss-cn-hangzhou.aliyuncs.com/hexo/Financial_freedom/Snipaste_2024-01-07_18-58-44.png" alt="格式"></li></ul><p>比较推荐思维导图的形式。</p><ul><li>真实记录</li><li>单位统一</li><li>日期</li><li>地点</li><li>事情详情</li></ul><h3 id="暴露物品凌乱程度的记账格式"><a href="#暴露物品凌乱程度的记账格式" class="headerlink" title="暴露物品凌乱程度的记账格式"></a>暴露物品凌乱程度的记账格式</h3><p>记账切记：</p><ul><li>统一格式</li><li>先模仿，后创新</li><li>建立归类的意识</li><li>账单尽可能不使用模板</li></ul><h3 id="超市购物车的“长账单”应该如何拆分记录"><a href="#超市购物车的“长账单”应该如何拆分记录" class="headerlink" title="超市购物车的“长账单”应该如何拆分记录?"></a>超市购物车的“长账单”应该如何拆分记录?</h3><p>购物路径，分区记录</p><ul><li>其他类别</li><li>日用</li><li>食品</li><li>ETC…</li></ul><h3 id="通过账目整理提升自我管理能力，是种怎样的体验"><a href="#通过账目整理提升自我管理能力，是种怎样的体验" class="headerlink" title="通过账目整理提升自我管理能力，是种怎样的体验"></a>通过账目整理提升自我管理能力，是种怎样的体验</h3><p>《富翁日记》:<br>昨天最棒的金钱事情是发现了一个觉得挺棒的线上课程，没有学习金钱整理以前肯定马上下单购买，但现在会反思一下自己究竟有多少线上课程还在学呢?是不是全部都认真学透了呢?如果最近有认真学透一课，那才能奖励自己学习下一个新课程!</p><p>《富翁日记》:昨天最棒的金钱事情是买化妆品的时候没有冲动购物，缺什么买什么，而且忘记色号的口红，决定和同事核对完再买!<br>今天也要加油哦本周任务:练习第五课作业:旅行记账或专项支</p><p>《富翁日记》:昨天最棒的金钱事情是把自己的记账和财务愿景联系在一起，如果我肆无忌惮的乱花钱没有规划，那么我的美好人生就会打折，这是我不愿意看到的事，所以每一笔支出都要认真。</p><h2 id="分析账单"><a href="#分析账单" class="headerlink" title="分析账单"></a>分析账单</h2><h3 id="政府体系与月账单的关系"><a href="#政府体系与月账单的关系" class="headerlink" title="政府体系与月账单的关系"></a>政府体系与月账单的关系</h3><table><thead><tr><th>政府体系</th><th>月账单</th></tr></thead><tbody><tr><td>宏观架构</td><td>微观填充</td></tr><tr><td>每月整理一次</td><td>每天记录累积</td></tr><tr><td>底层逻辑</td><td>表层数据</td></tr></tbody></table><h3 id="如何进行大数据分析与预算建立"><a href="#如何进行大数据分析与预算建立" class="headerlink" title="如何进行大数据分析与预算建立"></a>如何进行大数据分析与预算建立</h3><p>数据统计</p><ul><li>辅助工具</li><li>APP</li><li>帮助我们理性消费</li><li>预算建立</li></ul><h3 id="每月各导图命名法"><a href="#每月各导图命名法" class="headerlink" title="每月各导图命名法"></a>每月各导图命名法</h3><ul><li>XX政府体系</li><li>月账单</li><li>月政府报告</li></ul><h2 id="冰箱整理"><a href="#冰箱整理" class="headerlink" title="冰箱整理"></a>冰箱整理</h2><h3 id="冰箱整理-1"><a href="#冰箱整理-1" class="headerlink" title="冰箱整理"></a>冰箱整理</h3><ol><li>审视箱的全貌</li><li>检查冰箱的卫生</li><li>觉察自己的购买习惯</li><li>重建购买规划</li></ol><h2 id="爱情中的记账法"><a href="#爱情中的记账法" class="headerlink" title="爱情中的记账法"></a>爱情中的记账法</h2><h3 id="如何谈钱，能提升感情"><a href="#如何谈钱，能提升感情" class="headerlink" title="如何谈钱，能提升感情?"></a>如何谈钱，能提升感情?</h3><h3 id="恋爱中的“金钱洞察术”"><a href="#恋爱中的“金钱洞察术”" class="headerlink" title="恋爱中的“金钱洞察术”"></a>恋爱中的“金钱洞察术”</h3><p>金钱观是否健康</p><h3 id="婚姻中的金钱“互动”方法"><a href="#婚姻中的金钱“互动”方法" class="headerlink" title="婚姻中的金钱“互动”方法"></a>婚姻中的金钱“互动”方法</h3>]]></content>
    
    
    <categories>
      
      <category>理财</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理财</tag>
      
      <tag>财务自由</tag>
      
      <tag>财务规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统分析师备考-绪论</title>
    <link href="/2024/01/03/system_analyst1/"/>
    <url>/2024/01/03/system_analyst1/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于 2024 年上半年系统分析师备考经验相关的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>学过一些计算机基础课，<code>计算机体系结构</code>、<code>计算机网络</code>、<code>操作系统</code>、<code>数据架构</code>、<code>软件工程</code>、<code>UML建模</code>等，23 年下半年考的<code>软考中级·软件设计师</code>，对于别的一些前置知识也不是很了解。多多加油吧！努力了就能过。</p><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="考试介绍"><a href="#考试介绍" class="headerlink" title="考试介绍"></a>考试介绍</h3><h4 id="考试简介"><a href="#考试简介" class="headerlink" title="考试简介"></a>考试简介</h4><p>软考全程是计算机技术与软件资格（水平）考试，是由国家人力资源和社会保障部、工业和信息化部领导下的国家级考试。总共有三级，在职称体系内对应的是初级对应四级初级工程师，一般还有个类似助理工程师一样的五级，如人资这些会有，软考没有。中级对应的是三级中级工程师，高级对应的是二级副高级工程师。再往上是一级，正高级工程师，这个需要评定，提交相应材料，难度还是比较大的。</p><p>系统分析师考试属于全国计算机技术与软件专业技术资格考试(即软考)中的一个高级考试。</p><p>通过本考试的合格人员应熟悉应用领域的业务，能分析用户的需求和约束条件，写出信息系统需求规格说明书，制订项目开发计划，协调信息系统开发与运行所涉及的各类人员;能指导制订企业的战略数据规划、组织开发信息系统能评估和选用适宜的开发方法和工具;能按照标准规范编写系统分析、设计文档;能对开发过程进行质量控制与进度控制;能具体指导项目开发，具有高级工程师的实际工作能力和业务水平。</p><p>简单的说，通过系统分析师考试，代表你将拥有高级专业技术资格 (高级工程师系列，副高级)，从级别上讲，它相当于副教授、高级教师等，从专业技术资格来讲没有区别。</p><table><thead><tr><th>考试科目</th><th>考题形式</th><th>考试时长</th><th>合格标准</th></tr></thead><tbody><tr><td>信息系统综合</td><td>笔试-75 道单选题（每题 1 分，总分 75 分）</td><td>150 分钟</td><td>45 分及以上合格</td></tr><tr><td>系统分析设计案例</td><td>笔试，三道问答题（1 道必答+4 选 2）</td><td>90 分钟</td><td>45 分及以上</td></tr><tr><td>系统分析师论文</td><td>笔试，一道论文（4 选 1）</td><td>120 分钟</td><td>45 分以上</td></tr></tbody></table><p>之前都是笔试，现在换成机试了，软考官网有软件试用，考前可以下载试试。</p><h4 id="考试报名"><a href="#考试报名" class="headerlink" title="考试报名"></a>考试报名</h4><p>报名条件:系统分析师考试不设学历与资历条件，也不论年龄和专业，考生可根据自己的技术水平选择合适的级别合适的资格可根据自己的学术水平选择拿的级合适的类格、保一次者试只能报者、种一标准、统一证书的考试办法。<br>报名时间和地址:基本都是网上报名，一般在考试前 3 个月。各地报名时间不同。</p><p>请关注：<a href="http://wwwruankao.orq.cn/">软考官网</a>;同时关注考生所在地区考试中心网站通知。</p><p>考试安排:之前一般都在 05 月的第三周六考试，一年安排 1 次考试（系分）。现在改成<code>一年两次</code>了[time:2024]，别的请关注官网通知。</p><h4 id="证书价值"><a href="#证书价值" class="headerlink" title="证书价值"></a>证书价值</h4><ol><li>以考代评单位聘职称</li><li>升职加薪找工作</li><li>提升职场竞争力人才引进</li><li>人才补贴直接落户或积分落户</li><li>入专家库，成为评标专家招投标时加分项</li></ol><p>评是国家承认，聘是公司承认你。公司聘你会给你相应待遇，不聘没什么用。私企价值不大，一般都不会聘。</p><h4 id="实用网站"><a href="#实用网站" class="headerlink" title="实用网站"></a>实用网站</h4><ol><li>官网</li><li>各地考试机构</li></ol><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><p>Q:软考会取消吗?</p><p>A:软考作为计算机行业唯一的专业技术职称考试，同会计等其他职称考试同等重要，不可能被取消。在 2016.12.16 日国务院最新公布的国家职业资格目录清单一样包括软考，可以说是更稳定了。在最新的 2017.09.17 也公布了国家职业资格目录，软考处于专业技术人员职业资格中，详见<a href="https://www.gov.cn/xinwen/2017-09/17/content_5225705.htm">国家职业资格目录</a>。</p><p>Q:软考证书长期有效吗?</p><p>A:多数省份已经承认计算机资格证书长期有效并停止了证书登记的相关工作。</p><h3 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h3><h4 id="总纲"><a href="#总纲" class="headerlink" title="总纲"></a>总纲</h4><p>考试要求:</p><ol><li>掌握系统工程的基础知识</li><li>掌握开发信息系统所需的综合技术知识(硬件、软件、网络、数据库等)</li><li>熟悉企业或政府信息化建设，并掌握组织信息化战略规划的知识</li><li>熟练掌握信息系统开发过程和方法</li><li>熟悉信息系统开发标准</li><li>掌握信息安全的相关知识与技术</li><li>熟悉信息系统项目管理的知识与方法</li><li>掌握应用数学、经济与管理的相关基础知识，熟悉有关的法律法规</li><li>熟练阅读和正确理解相关领域的英文文献。</li></ol><h4 id="科目一"><a href="#科目一" class="headerlink" title="科目一"></a>科目一</h4><ol><li>计算机组成与结构</li><li>系统配置与性能评价</li><li>操作系统知识</li><li>数据库系统</li><li>计算机网络</li><li>多媒体技术</li><li>信息安全</li><li>知识产权与标准化</li><li>企业信息化战略与实施</li><li>软件工程</li><li>系统规划</li><li>系统分析及需求工程</li><li>系统设计</li><li>系统实施与维护</li><li>项目管理</li><li>嵌入式技术</li><li>数学与经济管理</li></ol><h4 id="科目二"><a href="#科目二" class="headerlink" title="科目二"></a>科目二</h4><p>考点：需求获取和分析、系统分析、系统设计、文档编制和沟通能力考点、系统规划、系统运行和维护、软件过程改进、系统开发项目管理、企业信息化战略与实施。</p><ol><li>系统规划</li><li>系统分析和需求工程</li><li>系统运行和维护</li><li>项目管理</li><li>数据库系统</li><li>嵌入式</li><li>Web 应用开发</li></ol><h4 id="科目三"><a href="#科目三" class="headerlink" title="科目三"></a>科目三</h4><p>考点：信息系统工程、数据库及应用、网络规划与应用、系统安全、新技术应用、应用系统集成、企业信息系统、企业信息化的组织和实施。<br>复习策略:</p><ol><li>看文老师论文写作分析视频，掌握写作套路</li><li>提前准备好论文项目，写好论文模板，准备好素材</li><li>多动手，当做考试对待，培养手速和文字功底。</li><li>论文模板写好后，多与文老师沟通，采纳批改后的建议，查缺补漏</li><li>要准备新技术、大项目，配得上系统分析师的身份。</li><li>心态最重要，不能慌</li></ol><h4 id="通过率分析"><a href="#通过率分析" class="headerlink" title="通过率分析"></a>通过率分析</h4><p>据参考资料统计，全国平均通过率 5%-10%左右</p><p>整体看来，通过率不算高，但要注意以下原因:</p><ol><li>每个考场约有 1&#x2F;3 的考生缺考:</li><li>少数考生未能进行全面有效的复习;</li></ol><p>去除以上原因，据文老师对多数学员的回访来看，如果有切实可行的复习计划并且认真准备的考生，考试通过率是还可以的。</p><h3 id="备考复习"><a href="#备考复习" class="headerlink" title="备考复习"></a>备考复习</h3><h4 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h4><p>官方教材、培训机构教材。</p><h4 id="备考策略"><a href="#备考策略" class="headerlink" title="备考策略"></a>备考策略</h4><p>看一些视频，<code>B站</code>就有很多，或者去电商网站买点视频。</p><p>其次是一定要多练，按照我的经验，历年真题练的多，考试成绩都不会很差。</p><p>关于时间，一天俩小时，两个月就够了。如果基础好，甚至一个月就行。如果怕不稳就加长时间，笨鸟先飞。</p><h2 id="启示录"><a href="#启示录" class="headerlink" title="启示录"></a>启示录</h2><p><code>富贵岂由人，时会高志须酬。</code></p><p><code>能成功于千载者，必以近察远。</code></p>]]></content>
    
    
    <categories>
      
      <category>系统分析师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考证</tag>
      
      <tag>软考高级</tag>
      
      <tag>系统分析师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>食疗</title>
    <link href="/2023/12/29/diet%20therapy/"/>
    <url>/2023/12/29/diet%20therapy/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于食疗养生相关的分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="食疗背景"><a href="#食疗背景" class="headerlink" title="食疗背景"></a>食疗背景</h3><p><a href="https://www.bilibili.com/video/BV1Me4y187Ra">中医药膳</a></p><p><code>为学不实，无可据之地。</code></p><h3 id="前置资料"><a href="#前置资料" class="headerlink" title="前置资料"></a>前置资料</h3><h2 id="食谱"><a href="#食谱" class="headerlink" title="食谱"></a>食谱</h2><h3 id="气血双补茶"><a href="#气血双补茶" class="headerlink" title="气血双补茶"></a>气血双补茶</h3><p>取红枣、黑枣、党参、当归、红参、桂圆、黄芪各<code>5g</code>，清洗干净，加入养生壶（没发现有能远程控制的，真遗憾，希望米家那款可以早日连上米家，我买的是小熊养生壶，<code>80r</code>）煮 30 分钟，可重复煮 5-6 次。也可以搭配肌肉一起炖汤喝。</p><h3 id="五红汤"><a href="#五红汤" class="headerlink" title="五红汤"></a>五红汤</h3><p>红枣、红豆、红糖、红米、红枸杞、花生。</p><p>适合：产后恢复，姨妈期血虚，不规律，面色蜡黄，贫血，手脚冰凉。</p><h3 id="黄芪当归双补汤"><a href="#黄芪当归双补汤" class="headerlink" title="黄芪当归双补汤"></a>黄芪当归双补汤</h3><p>黄芪，当归，党参，桂圆，红枣，玉竹。</p><p>适合：补气血不上火，脸色蜡黄，皮肤暗沉，宫寒，经常掉发的可能就是气血不足导致的。</p><h3 id="苹果黄芪汤"><a href="#苹果黄芪汤" class="headerlink" title="苹果黄芪汤"></a>苹果黄芪汤</h3><p>苹果，黄芪，麦冬，桂圆，红枸杞。红枣。</p><p>适合：脸色蜡黄没有血色，气虚乏力，经常熬夜。</p><h4 id="蛹虫草花胶响螺肉汤"><a href="#蛹虫草花胶响螺肉汤" class="headerlink" title="蛹虫草花胶响螺肉汤"></a>蛹虫草花胶响螺肉汤</h4><p>蛹虫草（虫草花），佐罗胶，玉竹，响螺肉，白莲子。</p><p>适合：补血，补肾，美容养颜，改善皮肤。</p><h3 id="黄精阿胶汤"><a href="#黄精阿胶汤" class="headerlink" title="黄精阿胶汤"></a>黄精阿胶汤</h3><p>阿胶，芡实，桂圆，红枣，红枸杞，红莲，黑豆，黄精。</p><p>适合：面色苍白，气血两虚，肤色蜡黄， 手脚冰凉。</p><h3 id="胶原三宝甜品羹"><a href="#胶原三宝甜品羹" class="headerlink" title="胶原三宝甜品羹"></a>胶原三宝甜品羹</h3><p>皂角米，雪燕，桃胶，银耳，红枣，冰糖。</p><p>适合：经常熬夜，肤色暗沉，气色差，排便不畅。</p><h3 id="八珍汤"><a href="#八珍汤" class="headerlink" title="八珍汤"></a>八珍汤</h3><p>炙甘草，党参，白术，茯苓，白芍，川穹，当归，地黄。</p><p>适合：气血两虚，手脚冰凉，宫寒，脾胃虚弱，面色苍白，肤色蜡黄，头晕眼花，四肢倦怠。</p><h3 id="当归参杞汤"><a href="#当归参杞汤" class="headerlink" title="当归参杞汤"></a>当归参杞汤</h3><p>红枣，红参，桂圆，当归，红枸杞，红糖。</p><p>适合：宫寒，姨妈期量少不准时，气血虚，心慌。</p><h3 id="女神四物汤"><a href="#女神四物汤" class="headerlink" title="女神四物汤"></a>女神四物汤</h3><p>当归，白芍，川穹，地黄。</p><p>适合：女孩子补气血，内调气血，姨妈量少发黑，不准时，姨妈之后气色不好的宝贝~</p><h2 id="补肾专题"><a href="#补肾专题" class="headerlink" title="补肾专题"></a>补肾专题</h2><h3 id="方子-1-阳虚"><a href="#方子-1-阳虚" class="headerlink" title="方子 1 - 阳虚"></a>方子 1 - 阳虚</h3><p>覆盆子 10 克、枸杞 15 克、益智仁 6 克、黄精 10g、加水 1000ml 煮沸。</p><h3 id="方子-2-类似八宝茶"><a href="#方子-2-类似八宝茶" class="headerlink" title="方子 2 - 类似八宝茶"></a>方子 2 - 类似八宝茶</h3><p>人参，枸杞，覆盆子，肉桂，山药，丁香，红枣，山楂，黄精，冲泡十分钟，随时饮用.</p><h3 id="方子-3"><a href="#方子-3" class="headerlink" title="方子 3"></a>方子 3</h3><p>枸杞子，菟丝子，淫羊藿，补骨脂。</p><p>滋肝养肾，补肾阳，防止早泄，补精血。</p><h3 id="方子-4-补气血"><a href="#方子-4-补气血" class="headerlink" title="方子 4 补气血"></a>方子 4 补气血</h3><p>黄芪、党参、当归、麦冬</p><p>补气升阳，搭配麦冬生津润肺。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="编者按语"><a href="#编者按语" class="headerlink" title="编者按语"></a>编者按语</h2><p><code>尘缨世网重重缚，回顾方知出得难</code></p><p><code>相从勉讲学，事业在积累。</code></p><p><code>成名每在穷苦日，败事多于得志时。</code></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
    
    
    <categories>
      
      <category>吃喝玩乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>饮食</tag>
      
      <tag>食疗</tag>
      
      <tag>养生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux终端管理工具</title>
    <link href="/2023/12/22/Linux%E7%BB%88%E7%AB%AF%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/12/22/Linux%E7%BB%88%E7%AB%AF%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于Linux终端管理工具的知识分享。<br>其中包括了关于我的经验和收集的知识分享。</p><span id="more"></span><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h3><p><code>为学不实，无可据之地。</code></p><h3 id="前置资料"><a href="#前置资料" class="headerlink" title="前置资料"></a>前置资料</h3><ul><li><a href="https://fishshell.com/">Fish</a></li><li><a href="https://starship.rs/">Starship</a></li><li><a href="https://github.com/tmux/tmux/wiki">Tmux</a></li><li><a href="https://www.zsh.org/">Zsh</a></li><li><a href="https://ohmyz.sh/">Oh My Zsh</a></li></ul><h2 id="Linux终端管理工具"><a href="#Linux终端管理工具" class="headerlink" title="Linux终端管理工具"></a>Linux终端管理工具</h2><p><code>fish</code></p><h2 id="实践技巧"><a href="#实践技巧" class="headerlink" title="实践技巧"></a>实践技巧</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="编者按语"><a href="#编者按语" class="headerlink" title="编者按语"></a>编者按语</h2><p><code>尘缨世网重重缚，回顾方知出得难</code></p><p><code>相从勉讲学，事业在积累。</code></p><p><code>成名每在穷苦日，败事多于得志时。</code></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>shell</tag>
      
      <tag>fish</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git Flow 教程</title>
    <link href="/2023/12/22/GitFlow/"/>
    <url>/2023/12/22/GitFlow/</url>
    
    <content type="html"><![CDATA[<p>欢迎你来读这篇博客，这篇博客主要是关于Git Flow的知识分享。<br>其中包括了关于我的简介和收集的知识分享。</p><span id="more"></span><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h3><p><code>为学不实，无可据之地。</code></p><blockquote><ul><li>建议了解Git的基本使用</li><li>有Git使用经验更佳</li><li>对GitFlow的组织和规范较为感兴趣</li></ul></blockquote><h3 id="前置资料"><a href="#前置资料" class="headerlink" title="前置资料"></a>前置资料</h3><p><a href="https://git-scm.com/book/zh/v2">Git - 官方文档</a></p><p><a href="https://rogerdudler.github.io/git-guide/index.zh.html">Git - 简明指南</a></p><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git 教程</a></p><p><a href="https://missing-semester-cn.github.io/2020/version-control/">缺失的一课 - 版本控制Git</a></p><p><a href="https://education.github.com/git-cheat-sheet-education.pdf">Git Cheatsheet</a></p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h3 id="GitLab-私服搭建"><a href="#GitLab-私服搭建" class="headerlink" title="GitLab 私服搭建"></a>GitLab 私服搭建</h3><h2 id="GitFlow"><a href="#GitFlow" class="headerlink" title="GitFlow"></a>GitFlow</h2><h3 id="Git-管理模型"><a href="#Git-管理模型" class="headerlink" title="Git 管理模型"></a>Git 管理模型</h3><ul><li>Git Flow<br>  特点：适合大型长期项目、五大分支、复杂繁琐、分工明确协同前进</li><li>GitHub Flow<br>  简化的Git Flow</li><li>GitLab Flow<br>  介于 GitFlow 和 GitHubFlow 之间</li><li>Forking Work Flow<br>  分布式开发，注重Merge，开源居多</li><li>Trunk-Base Development<br>  单一共享分支，共享主干，小步快跑</li></ul><h3 id="GitFlow介绍"><a href="#GitFlow介绍" class="headerlink" title="GitFlow介绍"></a>GitFlow介绍</h3><p>GitFlow 是一种基于 Git 版本控制系统的工作流程模型，旨在管理软件开发过程中的分支管理和版本发布。它是由 Vincent Driessen 在<br>2010 年提出的，并得到了广泛应用。</p><p>GitFlow 的核心概念是将软件开发过程划分为两个主要分支：master 分支和 develop 分支。master 分支用于存储稳定的、可发布的代码版本，而<br>develop 分支则用于集成新功能和修复 bug 的开发。除了这两个主要分支外，GitFlow 还定义了一些辅助分支，用于处理功能开发、bug<br>修复和发布等任务。</p><p>GitFlow 的优点包括清晰的分支管理、严格的代码版本控制、适应长期和大规模开发项目等。它提供了一种结构化的工作流程，使团队成员能够更好地协作和管理软件开发过程。</p><h3 id="分支命名规范"><a href="#分支命名规范" class="headerlink" title="分支命名规范"></a>分支命名规范</h3><p>git分支命名规范：</p><ul><li><p>主分支 master（发布正式使用的都是这个分支）</p></li><li><p>发布分支 release&#x2F;版本号（通常是我们需要发布的版本，起名最好跟版本号走）</p></li><li><p>预生产分支 pre （测试完毕后，还是会在预发环境下面再次 check 一面，才会上生产）</p></li><li><p>开发分支 dev（所有功能分支在开发的时候需要验证，除了在本地验证，还可以合入 dev 发布验证）</p></li><li><p>测试分支 test（所有的功能分支开发完成后会合入 test发布，就是我们所说的提测）</p></li><li><p>功能分支 feature&#x2F;版本号（通常是我们需要开发的需求，起名最好跟版本号走）</p></li><li><p>修复分支 hotfix&#x2F;bug号（通常是生产上出现了一些问题，需要紧急修复，起名最好按照 bug 号）</p></li></ul><p>你可以参考这个</p><img src="https://at-luo-fu-web-img.oss-cn-hangzhou.aliyuncs.com/hexo/gitflow.png" alt="git-flow-img" width="50%"><h2 id="实践技巧"><a href="#实践技巧" class="headerlink" title="实践技巧"></a>实践技巧</h2><h3 id="GitFlow实践-TODO"><a href="#GitFlow实践-TODO" class="headerlink" title="GitFlow实践 TODO"></a>GitFlow实践 TODO</h3><h3 id="MR规范"><a href="#MR规范" class="headerlink" title="MR规范"></a>MR规范</h3><p>不知道你是否还是在工作或者平常coding当中还是在 <code>git commit -m &#39;some message&#39;</code>，或者是直接不写message的形式提交你变更的代码呢？<br>我只能说这样的方式真的是很不友好，而且很low~</p><p>格式化的Commit message，有几个好处。</p><ul><li>提供更多的历史信息，方便快速浏览。</li><li>可以过滤某些commit（比如文档改动），便于快速查找信息。</li><li>可以直接从commit生成Change log。</li></ul><p>那么如何能优雅而又不失体面的提交你的代码呢？其实我们的 git commit message 是应该具备一些规范的。<br>目前社区有很多规范，你可以查看<a href="https://github.com/conventional-changelog/conventional-changelog">mr规范</a>了解更多。<br>当前用的比较多的是 Angular<br>团队的<a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0">规范</a>。</p><h3 id="Commit-message-的格式"><a href="#Commit-message-的格式" class="headerlink" title="Commit message 的格式"></a>Commit message 的格式</h3><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs LaTeX">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;<br>// 空一行<br>&lt;body&gt;<br>// 空一行<br>&lt;footer&gt;<br></code></pre></td></tr></table></figure><p>其中，Header 是必需的，Body 和 Footer 可以省略。</p><p>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p><code>Header</code>部分只有一行，包括三个字段：<code>type</code>（必需）、<code>scope</code>（可选）和<code>subject</code>（必需）。</p><ul><li><code>type</code></li></ul><p><code>type</code>用于说明 <code>commit</code> 的类别，只允许使用下面7个标识。</p><blockquote><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul></blockquote><p>如果<code>type</code>为<code>feat</code>和<code>fix</code>，则该 <code>commit</code> 将肯定出现在 <code>Change log</code> 之中。其他情况（<code>docs</code>、<code>chore</code>、<code>style</code>、<code>refactor</code>、<code>test</code><br>）由你决定，要不要放入 <code>Change log</code>，建议是不要。</p><ul><li><code>scope</code></li></ul><p><code>scope</code> 用于说明 <code>commit</code> 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><ul><li><code>subject</code></li></ul><p><code>subject</code>是 <code>commit</code> 目的的简短描述，不超过50个字符。</p><blockquote><ul><li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</li><li>第一个字母小写</li><li>结尾不加句号（.）</li></ul></blockquote><p>下面是一个范例。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs LaTeX">&lt;feat&gt;(&lt;blog os&gt;):&lt;double faults&gt;<br></code></pre></td></tr></table></figure><h4 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h4><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs LaTeX">blog os kernel double faults<br>  - trigger double faults<br>  - switch stacks<br>    - create tss<br>    - create gdt<br>    - reload code segment register<br>    - load tss<br>    - update idt entry<br>  - stack overflow test case<br>    - test idt<br>    - impl <span class="hljs-built_in">_</span>start<br>    - double fault handler<br></code></pre></td></tr></table></figure><p>有两个注意点。</p><ul><li><p>使用第一人称现在时，比如使用change而不是changed或changes。</p></li><li><p>应该说明代码变动的动机，以及与以前行为的对比。</p></li></ul><h4 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h4><p>Footer 部分只用于两种情况</p><ul><li>不兼容变动</li></ul><p>如果当前代码与上一个版本不兼容，则 Footer 部分以<code>BREAKING CHANGE</code>开头，后面是对变动的描述、以及变动理由和迁移方法。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs LaTeX">BREAKING CHANGE: isolate scope bindings definition has changed.<br><br>    To migrate the code follow the example below:<br><br>    Before:<br><br>    scope: &#123;<br>      myAttr: &#x27;attribute&#x27;,<br>    &#125;<br><br>    After:<br><br>    scope: &#123;<br>      myAttr: &#x27;@&#x27;,<br>    &#125;<br><br>    The removed `inject` wasn&#x27;t generaly useful for directives so there should be no code using it.<br></code></pre></td></tr></table></figure><ul><li>关闭 Issue</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs LaTeX"><span class="hljs-comment">% 如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</span><br>Closes <span class="hljs-params">#2</span>34<br><span class="hljs-params">#</span> 也可以一次关闭多个 issue 。<br>Closes <span class="hljs-params">#1</span>23, <span class="hljs-params">#2</span>45, <span class="hljs-params">#9</span>92<br></code></pre></td></tr></table></figure><h4 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h4><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以<code>revert:</code>开头，后面跟着被撤销 Commit 的 Header。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs LaTeX">revert: feat(pencil): add &#x27;graphiteWidth&#x27; option<br><br>This reverts commit 667ecc1654a317a13331b17617d973392f415f02.<br></code></pre></td></tr></table></figure><p>Body部分的格式是固定的，必须写成<code>This reverts commit &lt;hash&gt;.</code>，其中的<code>hash</code>是被撤销 commit 的 <code>SHA 标识符</code>。</p><p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。<br>如果两者在不同的发布，那么当前 commit，会出现在 Change log 的<code>Reverts</code>小标题下面。</p><h3 id="Git-Commit-模版"><a href="#Git-Commit-模版" class="headerlink" title="Git Commit 模版"></a>Git Commit 模版</h3><p>如果你只是想要尝试一下，你可以给 git 设置 commit template 在每次 git commit 的时候在 vim 中显示，用来提示自己。</p><p>修改 <code>～/.gitconfig</code> 添加</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs LaTeX">[commit]<br>template = ~./gitmessage<br></code></pre></td></tr></table></figure><p>新建 <code>~/.gitmessage</code> 内容如下</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs LaTeX"><span class="hljs-params">#</span> head: &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;<br><span class="hljs-params">#</span> - type: feat, fix, docs, style, refactor, test, chore<br><span class="hljs-params">#</span> - scope: can be empty (eg. if the change is a global or difficult to assign to a single component)<br><span class="hljs-params">#</span> - subject: start with verb (such as &#x27;change&#x27;), 50-character line<br><span class="hljs-params">#</span><br><span class="hljs-params">#</span> body: 72-character wrapped. This should answer:<br><span class="hljs-params">#</span> * Why was this change necessary?<br><span class="hljs-params">#</span> * How does it address the problem?<br><span class="hljs-params">#</span> * Are there any side effects?<br><span class="hljs-params">#</span><br><span class="hljs-params">#</span> footer: <br><span class="hljs-params">#</span> - Include a link to the ticket, if any.<br><span class="hljs-params">#</span> - BREAKING CHANGE<br></code></pre></td></tr></table></figure><h2 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h2><h3 id="Commitizen"><a href="#Commitizen" class="headerlink" title="Commitizen"></a>Commitizen</h3><p>工具级 commit message 生成，<a href="https://github.com/commitizen/cz-cli">commitizen</a>提供的 git cz 来替代我们的 git commit<br>命令生成符合规范的 commit message 信息。</p><p>还需要为 commitizen 指定一个 Adapter<br>比如：Angular团队的<a href="https://github.com/commitizen/cz-conventional-changelog">cz-conventional-changelog</a>使它能够按照我们指定的规范生成<br>commit message 信息</p><ul><li>全局安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装</span><br>yarn global add commitizen cz-conventional-changelog<br><span class="hljs-meta prompt_"># </span><span class="language-bash">or</span><br>npm install -g commitizen cz-conventional-changelog<br><span class="hljs-meta prompt_"># </span><span class="language-bash">全局模式下，需要～/.czrc 配置文件 为 commitizen 指定 Adapter</span><br>echo &#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27; &gt; ~/.czrc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">直接在对应的项目里面 git cz 就可以</span><br></code></pre></td></tr></table></figure><ul><li>项目级安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装</span><br>yarn add -D commitizen cz-conventional-changelog<br><span class="hljs-meta prompt_"># </span><span class="language-bash">or</span><br>npm install -D commitizen cz-conventional-changelog<br></code></pre></td></tr></table></figure><p>package.json 配置</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs LaTeX">&quot;script&quot;: &#123;<br>    ...,<br>    &quot;commit&quot;: &quot;git-cz&quot;,<br>    &#125;,<br>&quot;config&quot;: &#123;<br>    &quot;commitizen&quot;: &#123;<br>    &quot;path&quot;: &quot;node<span class="hljs-built_in">_</span>modules/cz-conventional-changelog&quot;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">commitizen init cz-conventional-changelog --save --save-exact<br></code></pre></td></tr></table></figure><p>以后，凡是用到<code>git commit</code>命令，一律改为使用<code>git cz</code>。这时，就会出现选项，用来生成符合格式的 Commit message。</p><h3 id="validate-commit-msg"><a href="#validate-commit-msg" class="headerlink" title="validate-commit-msg"></a>validate-commit-msg</h3><p><a href="https://github.com/conventional-changelog-archived-repos/validate-commit-msg">validate-commit-msg</a> 用于检查 Node 项目的<br>Commit message 是否符合格式。</p><p>它的安装是手动的。首先，拷贝下面这个JS文件，放入你的代码库。文件名可以取为validate-commit-msg.js。</p><p>接着，把这个脚本加入 Git 的 hook。下面是在package.json里面使用 <a href="http://npm.im/ghooks">ghooks</a>，把这个脚本加为commit-msg时运行。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs LaTeX">&quot;config&quot;: &#123;<br>  &quot;ghooks&quot;: &#123;<br>    &quot;commit-msg&quot;: &quot;./validate-commit-msg.js&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，每次git commit的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add -A</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -m <span class="hljs-string">&quot;edit markdown&quot;</span></span> <br>INVALID COMMIT MSG: does not match &quot;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&quot; ! was: edit markdown<br></code></pre></td></tr></table></figure><h3 id="生成-Change-log"><a href="#生成-Change-log" class="headerlink" title="生成 Change log"></a>生成 Change log</h3><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成（例1，例2，例3）。</p><p>生成的文档包括以下三个部分。</p><blockquote><ul><li>New features</li><li>Bug fixes</li><li>Breaking changes.</li></ul></blockquote><p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。</p><p><a href="https://github.com/conventional-changelog/conventional-changelog">conventional-changelog</a> 就是生成 Change log<br>的工具，运行下面的命令即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install -g conventional-changelog</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> my-project</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">conventional-changelog -p angular -i CHANGELOG.md -w</span><br></code></pre></td></tr></table></figure><p>上面命令不会覆盖以前的 Change log，只会在<code>CHANGELOG.md</code>的头部加上自从上次发布以来的变动。</p><p>如果你想生成所有发布的 Change log，要改为运行下面的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">conventional-changelog -p angular -i CHANGELOG.md -w -r 0</span><br></code></pre></td></tr></table></figure><p>为了方便使用，可以将其写入package.json的scripts字段。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs LaTeX">&#123;<br>  &quot;scripts&quot;: &#123;<br>    &quot;changelog&quot;: &quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以后，直接运行下面的命令即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm run changelog<br></code></pre></td></tr></table></figure><h3 id="Git-flow-script-命令行"><a href="#Git-flow-script-命令行" class="headerlink" title="Git flow script(命令行)"></a>Git flow script(命令行)</h3><p>Git Flow不仅仅是一种规范，还提供了一套方便的工具。大大简化了执行Git Flow的过程。</p><p>安装</p><ol><li>OSX</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install git-flow<br></code></pre></td></tr></table></figure><ol start="2"><li>Linux</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get/yum/dnf install git-flow<br></code></pre></td></tr></table></figure><ol start="3"><li>Windows(cygwin)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -q -O - --no-check-certificate https://github.com/nvie/gitflow/raw/develop/contrib/gitf<br></code></pre></td></tr></table></figure><h3 id="Git-Flow-SourceTree-图形化"><a href="#Git-Flow-SourceTree-图形化" class="headerlink" title="Git Flow SourceTree (图形化)"></a>Git Flow SourceTree (图形化)</h3><p>SourceTree下载官方：<a href="https://www.sourcetreeapp.com/">Sourcetree | Free Git GUI for Mac and Windows</a></p><p>大神推荐SourceTree：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/1317161920364578">使用SourceTree - 廖雪峰的官方网站</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Git Flow模型通过不同的分支从源代码管理的角度对软件开发活动进行了约束，为我们的软件开发提供了一个可供参考的管理模型。Git<br>Flow模型让代码仓库保持整洁，让小组各个成员之间的开发相互隔离，能够有效避免处于开发状态中的代码相互影响而导致的效率低下和混乱。但同时，不同的开发团队存在不同的文化，在不同的项目背景情况下都可能根据该模型进行适当的精简或扩充。防控中心通过合理使用Git<br>Flow，更好地管理代码仓库，提高工作的效率。</p><h2 id="编者按语"><a href="#编者按语" class="headerlink" title="编者按语"></a>编者按语</h2><p><code>尘缨世网重重缚，回顾方知出得难</code></p><p><code>相从勉讲学，事业在积累。</code></p><p><code>成名每在穷苦日，败事多于得志时。</code></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">阮一峰的网络日志-Commit message 和 Change log 编写指南</a></p><p><a href="https://lqk9511.github.io/blog/share/git-commit-message.html#%E8%87%AA%E5%AE%9A%E4%B9%89-adapter">Jeff Lee github page - 更优雅的提交你的 Git Commit Message</a></p><p><a href="https://github.com/spivet/Blog/issues/19">规范 commit 与 changelog 生成</a></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Git Flow</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
